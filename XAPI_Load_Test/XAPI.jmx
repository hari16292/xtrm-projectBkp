<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="XAPI" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="basePath" elementType="Argument">
            <stringProp name="Argument.name">basePath</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir())}</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Dev" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">xapidev.xtrm.com</stringProp>
          </elementProp>
          <elementProp name="clientId" elementType="Argument">
            <stringProp name="Argument.name">clientId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">2110184_API_User</stringProp>
          </elementProp>
          <elementProp name="clientSecret" elementType="Argument">
            <stringProp name="Argument.name">clientSecret</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">ttUVKX7RNuftlfZdb68UXaabVGzPtGaBjzvh0DkXKw=</stringProp>
          </elementProp>
          <elementProp name="issuerAccountNumber" elementType="Argument">
            <stringProp name="Argument.name">issuerAccountNumber</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">SPN2190533</stringProp>
          </elementProp>
          <elementProp name="issuerWalletId" elementType="Argument">
            <stringProp name="Argument.name">issuerWalletId</stringProp>
            <stringProp name="Argument.value">86293</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issuerFundBankId" elementType="Argument">
            <stringProp name="Argument.name">issuerFundBankId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issuerFundCrediCardId" elementType="Argument">
            <stringProp name="Argument.name">issuerFundCrediCardId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">8A7F4E96FB854C5</stringProp>
          </elementProp>
          <elementProp name="beneUserId" elementType="Argument">
            <stringProp name="Argument.name">beneUserId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">PAT2394289</stringProp>
          </elementProp>
          <elementProp name="beneUserWalletId" elementType="Argument">
            <stringProp name="Argument.name">beneUserWalletId</stringProp>
            <stringProp name="Argument.value">91254</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneUserTransferBankId" elementType="Argument">
            <stringProp name="Argument.name">beneUserTransferBankId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">32ad94b230ad44a78b4af4f875388668</stringProp>
          </elementProp>
          <elementProp name="beneUserRapidCardId" elementType="Argument">
            <stringProp name="Argument.name">beneUserRapidCardId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">4A48AB5492F3471</stringProp>
          </elementProp>
          <elementProp name="beneCompanyId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">SPN1986817</stringProp>
          </elementProp>
          <elementProp name="beneCompanyWalletId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyWalletId</stringProp>
            <stringProp name="Argument.value">83083</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneCompanyTransferBankId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyTransferBankId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">91bd8777c94a4ddb848b01cf6c1d0401</stringProp>
          </elementProp>
          <elementProp name="beneCompanyRapidCardId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyRapidCardId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">0088E86F1342473</stringProp>
          </elementProp>
          <elementProp name="beneFileName" elementType="Argument">
            <stringProp name="Argument.value">${basePath}/DataSet/IndividualBeneficiary-Dev.csv</stringProp>
            <stringProp name="Argument.name">beneFileName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issuerFileName" elementType="Argument">
            <stringProp name="Argument.value">${basePath}/DataSet/IssuerAccountDetails-Dev.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.name">issuerFileName</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - SBox" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">xapisandbox.xtrm.com</stringProp>
          </elementProp>
          <elementProp name="clientId" elementType="Argument">
            <stringProp name="Argument.name">clientId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">2341945_API_User</stringProp>
          </elementProp>
          <elementProp name="clientSecret" elementType="Argument">
            <stringProp name="Argument.name">clientSecret</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">v3lglWss/9LG8K3a735vyWskuSMnO4fqgmwHUUlWE8=</stringProp>
          </elementProp>
          <elementProp name="issuerAccountNumber" elementType="Argument">
            <stringProp name="Argument.name">issuerAccountNumber</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">SPN23148181</stringProp>
          </elementProp>
          <elementProp name="issuerWalletId" elementType="Argument">
            <stringProp name="Argument.name">issuerWalletId</stringProp>
            <stringProp name="Argument.value">122485</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issuerFundBankId" elementType="Argument">
            <stringProp name="Argument.name">issuerFundBankId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issuerFundCrediCardId" elementType="Argument">
            <stringProp name="Argument.name">issuerFundCrediCardId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneUserId" elementType="Argument">
            <stringProp name="Argument.name">beneUserId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">PAT23148183</stringProp>
          </elementProp>
          <elementProp name="beneUserWalletId" elementType="Argument">
            <stringProp name="Argument.name">beneUserWalletId</stringProp>
            <stringProp name="Argument.value">122910</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneUserTransferBankId" elementType="Argument">
            <stringProp name="Argument.name">beneUserTransferBankId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneUserRapidCardId" elementType="Argument">
            <stringProp name="Argument.name">beneUserRapidCardId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneCompanyId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">SPN23148182</stringProp>
          </elementProp>
          <elementProp name="beneCompanyWalletId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyWalletId</stringProp>
            <stringProp name="Argument.value">122909</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneCompanyTransferBankId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyTransferBankId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneCompanyRapidCardId" elementType="Argument">
            <stringProp name="Argument.name">beneCompanyRapidCardId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="beneFileName" elementType="Argument">
            <stringProp name="Argument.name">beneFileName</stringProp>
            <stringProp name="Argument.value">${basePath}/DataSet/IndividualBeneficiary-SBox.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${token}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager many to many" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${token}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - SendAPI" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseURLSendAPI" elementType="Argument">
            <stringProp name="Argument.name">baseURLSendAPI</stringProp>
            <stringProp name="Argument.value">senddevtest.xtrm.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sendAPISimpleSendFileName" elementType="Argument">
            <stringProp name="Argument.name">sendAPISimpleSendFileName</stringProp>
            <stringProp name="Argument.value">${basePath}/DataSet/SendAPI-SimpleSendAccount-Dev.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sendAPIIndividaulBatchFileName" elementType="Argument">
            <stringProp name="Argument.name">sendAPIIndividaulBatchFileName</stringProp>
            <stringProp name="Argument.value">${basePath}/DataSet/SendAPI-IndividualSendBatch-Dev.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sendAPICompanyBatchFileName" elementType="Argument">
            <stringProp name="Argument.name">sendAPICompanyBatchFileName</stringProp>
            <stringProp name="Argument.value">${basePath}/DataSet/SendAPI-CompanySendBatch-Dev.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - Send API" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header"/>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">X-SendAPI-Key</stringProp>
            <stringProp name="Header.value">3bu3wu4yf5zjfc4zc7olcynz71x4ld2b</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Execution Condition" enabled="false">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">${basePath}/DataSet/Condition.csv</stringProp>
        <stringProp name="variablesPrefix">condition_</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <intProp name="skipLines">1</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Issuer CSV Data Set Config" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${issuerFileName}</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">issuerAccountNumber,clientId,clientSecret,issuerWalletId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Authorization" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${condition_Token}&quot;!=&quot;Yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token Generation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="Argument.value">password</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">${clientId}</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                  <stringProp name="Argument.value">${clientSecret}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/oAuth/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__setProperty(token,${token})};

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

def path = FileServer.getFileServer().getBaseDir()+&quot;/DataSet/&quot;;
def csvFile = new File (path + &apos;Token.csv&apos;);
//log.info(&quot;token valuev-${token}&quot;)

csvFile.append(&quot;${token}&quot;);
csvFile.append(&quot;\n&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token Generation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
                <stringProp name="Argument.value">password</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">${clientId}</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
                <stringProp name="Argument.value">${clientSecret}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/oAuth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(token,${token})};

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

def path = FileServer.getFileServer().getBaseDir()+&quot;/DataSet/&quot;;
def csvFile = new File (path + &apos;Token.csv&apos;);
//log.info(&quot;token valuev-${token}&quot;)

csvFile.append(&quot;${token}&quot;);
csvFile.append(&quot;\n&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load Test" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUp,1)}</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,10)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Authorization" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Token If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_Token}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token Generation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                    <stringProp name="Argument.value">password</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">${clientId}</stringProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                    <stringProp name="Argument.value">${clientSecret}</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">${__setProperty(token,${token})};

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary User" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create User If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CreateUser}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;createUser&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot; : &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;legalFirstName&quot;: &quot;Hari&quot;,&#xd;
            &quot;legalLastName&quot;: &quot;LoadTest${randomUserValue}&quot;,&#xd;
            &quot;emailAddress&quot;: &quot;apiloadtestdynamic${randomUserValue}@mailinator.com&quot;,&#xd;
            &quot;emailNotification&quot; :&quot;true&quot;,&#xd;
            &quot;mobilePhone&quot;: &quot;&quot;,&#xd;
            &quot;taxId&quot;: &quot;&quot;,&#xd;
            &quot;dateOfBirth&quot;: {&#xd;
                &quot;day&quot;: &quot;&quot;,&#xd;
                &quot;month&quot;: &quot;&quot;,&#xd;
                &quot;year&quot;: &quot;&quot;&#xd;
            },&#xd;
            &quot;address&quot;: {&#xd;
                &quot;addressLine1&quot;: &quot;&quot;,&#xd;
                &quot;addressLine2&quot;: &quot;&quot;,&#xd;
                &quot;aptSuitNum&quot;: &quot;&quot;,&#xd;
                &quot;city&quot;: &quot;&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;postalCode&quot;: &quot;&quot;,&#xd;
                &quot;region&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/CreateUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomUserValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UpdateUser If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_UpdateUser}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;updateUser&quot;: {&#xd;
         &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;userId&quot;:&quot;${beneUserId}&quot;,&#xd;
            &quot;legalFirstName&quot;: &quot;Hari&quot;,&#xd;
            &quot;legalLastName&quot;: &quot;Test&quot;,&#xd;
            &quot;taxId&quot;: &quot;&quot;,&#xd;
            &quot;dateOfBirth&quot;: {&#xd;
                &quot;day&quot;: &quot;&quot;,&#xd;
                &quot;month&quot;: &quot;&quot;,&#xd;
                &quot;year&quot;: &quot;&quot;&#xd;
            },&#xd;
            &quot;address&quot;: {&#xd;
                &quot;addressLine1&quot;: &quot;&quot;,&#xd;
                &quot;addressLine2&quot;: &quot;&quot;,&#xd;
                &quot;aptSuitNum&quot;: &quot;&quot;,&#xd;
                &quot;city&quot;: &quot;&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;postalCode&quot;: &quot;&quot;,&#xd;
                &quot;region&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/UpdateUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetPersonalBeneficiaries If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetPersonalBeneficiaries}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Personal Beneficiaries" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;getPersonalBeneficiaries&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
      &quot;pagination&quot;: {&#xd;
        &quot;recordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;recordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/GetPersonalBeneficiaries</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CheckUserExist If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CheckUserExist}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check User Exist" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CheckUserExist&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Email&quot;: &quot;haritestuser01@mailinator.com&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/CheckUserExist</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Methods" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetPaymentMethods If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetPaymentMethods}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Payment Methods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Payment/GetPaymentMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetUserPaymentMethods If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetUserPaymentMethods}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Payment Methods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Payment/GetUserPaymentMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetBeneficiaryCompanyPaymentMethods If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetBeneficiaryCompanyPaymentMethods}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Beneficiary Company Payment Methods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Payment/GetBeneficiaryCompanyPaymentMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Wallets" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Issuer Company" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCompanyWallets If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCompanyWallets}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetCompanyWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCompanyWalletTransactions If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCompanyWalletTransactions}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Wallet Transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;20&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Random Transaction ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">issuerTransactionId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">GetCompanyWalletTransactionsResponse.GetCompanyWalletTransactionsResult.Transactions[*].TransactionID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCompanyWalletTransactionDetails If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCompanyWalletTransactionDetails}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${issuerTransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CreateCompanyWallet If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_CreateCompanyWallet}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Company Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;CreateCompanyWallet&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;AllowAccessAccountNumber&quot;: &quot;&quot;,&#xd;
            &quot;EntityID&quot;:&quot;0&quot;,&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;WalletName&quot;: &quot;Load Test Company Wallet - ${randomValue}&quot;,&#xd;
            &quot;WalletType&quot;: &quot;Standard&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/CreateCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UpdateCompanyWallet If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_UpdateCompanyWallet}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Company Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UpdateCompanyWallet&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;WalletName&quot;: &quot;Load Test Company Wallet Update - ${randomValue}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/updatecompanywallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FundCompanyWalletUsingCreditCard If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_FundCompanyWalletUsingCreditCard}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Company Wallet Using CreditCard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;FundCompanyWalletUsingCreditCardRequest&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;PaymentDetails&quot;: {&#xd;
                &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;Amount&quot;: &quot;15&quot;,&#xd;
                &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;&#xd;
            },&#xd;
            &quot;PayerInformation&quot;: {&#xd;
                &quot;FirstName&quot;: &quot;Hari&quot;,&#xd;
                &quot;LastName&quot;: &quot;Test&quot;&#xd;
            },&#xd;
            &quot;PayerBillingAddress&quot;: {&#xd;
                &quot;AddressLine1&quot;: &quot;Addr1&quot;,&#xd;
                &quot;City&quot;: &quot;Test City&quot;,&#xd;
                &quot;State&quot;: &quot;Test State&quot;,&#xd;
                &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;879564&quot;&#xd;
            },&#xd;
            &quot;CreditCardDetails&quot;: {&#xd;
                &quot;CardToken&quot;: &quot;${issuerFundCrediCardId}&quot;,&#xd;
                &quot;ExpireMonth&quot;: &quot;02&quot;,&#xd;
                &quot;ExpireYear&quot;: &quot;2024&quot;,&#xd;
                &quot;CreditCardNumber&quot;: &quot;4111111111111111&quot;,&#xd;
                &quot;CreditCardType&quot;: &quot;Visa Card&quot;,&#xd;
                &quot;CVV&quot;: &quot;123&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/FundCompanyWalletUsingCreditCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FundWalletUsingACHDebit If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_FundWalletUsingACHDebit}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Amount&quot;: &quot;25&quot;,&#xd;
            &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;LinkedBankID&quot;: &quot;${issuerFundBankId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/FundWalletUsingACHDebit</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FundWalletUsingBankTransfer If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_FundWalletUsingBankTransfer}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using Bank Transfer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;FundWalletUsingBankTransfer&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Amount&quot;: &quot;26&quot;,&#xd;
            &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;ProgramID&quot;: &quot;&quot;,&#xd;
            &quot;InvoiceRequired&quot;: &quot;&quot;,&#xd;
            &quot;PurchaseOrderNumber&quot;: &quot;&quot;,&#xd;
            &quot;RequiredDepositDate&quot;: &quot;&quot;,&#xd;
            &quot;RequiredPaymentDate&quot;: &quot;&quot;,&#xd;
            &quot;Additionalinformtaion&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/FundWalletUsingBankTransfer</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetExchangeRate If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetExchangeRate}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exchange Rate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetExchangeRate&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;ToCurrency&quot;: &quot;GBP&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Payment/GetExchangeRate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="BookExchange If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_BookExchange}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Book Exchange" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BookExchange&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;AccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;ToWalletID&quot;: &quot;91273&quot;,&#xd;
            &quot;FromCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;ToCurrency&quot;: &quot;INR&quot;,&#xd;
            &quot;Amount&quot;: 50&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Payment/BookExchange</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary Company" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetBeneficiaryWallets If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetBeneficiaryWallets}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Beneficiary Wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetBeneficiaryWallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetBeneficiaryWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CreateBeneficiaryCompanyWallet If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_CreateBeneficiaryCompanyWallet}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Beneficiary Company Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;CreateBeneficiaryCompanyWallet&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;WalletName&quot;: &quot;Load Test Bene Company Wallet - ${randomValue}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;GBP&quot;,&#xd;
            &quot;EntityID&quot;: &quot;0&quot;,&#xd;
            &quot;WalletType&quot;: &quot;Standard&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/CreateBeneficiaryCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UpdateBeneficiaryCompanyWallet If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_UpdateBeneficiaryCompanyWallet}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Beneficiary Company Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UpdateBeneficiaryCompanyWallet&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${beneCompanyWalletId}&quot;,&#xd;
            &quot;WalletName&quot;: &quot;Load Test Beneficiary Company Update - ${randomValue}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/updateBeneficiarycompanywallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary User" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetUserWallets If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetUserWallets}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWallets&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetUserWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCompanyWallets If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCompanyWallets}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallet Balance" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetCompanyWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetUserWalletTransactions If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetUserWalletTransactions}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallet Transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get First Transaction ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">beneUserTransactionId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">GetUserWalletTransactionsResponse.GetUserWalletTransactionsResult.Transactions[*].TransactionID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetUserWalletTransactionDetails If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetUserWalletTransactionDetails}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${beneUserTransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CreateUserWallet If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_CreateUserWallet}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;CreateUserWallet&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;GBP&quot;,&#xd;
            &quot;WalletName&quot;: &quot;Load Test User Wallet - ${randomValue}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/CreateUserWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UpdateUserWallet If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_UpdateUserWallet}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update User Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UpdateUserWallet&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${beneUserWalletId}&quot;,&#xd;
            &quot;WalletName&quot;: &quot;Load Test User Wallet Update - ${randomValue}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/UpdateUserWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetUserWalletTransactionsByRemitter If Controller" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetUserWalletTransactionsByRemitter}&quot;==&quot;Yes&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallet Transactions By Remitter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactionsByRemitter&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;RemitterAccountNo&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetUserWalletTransactionsByRemitter</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Funds" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="TransferFund If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_TransferFund}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodId&quot;: &quot;XTR94502&quot;,&#xd;
                &quot;ProgramId&quot;: &quot;5034&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Load Test&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;USD&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;: [&#xd;
                    {&#xd;
                        &quot;IssuerTransactionId&quot;: &quot;456897&quot;,&#xd;
                        &quot;PaymentAmount&quot;: &quot;${randomAmount}&quot;,&#xd;
                        &quot;PartnerAccountNumber&quot;: &quot;PAT2190554&quot;,&#xd;
                        &quot;RecipientUserId&quot;: &quot;${beneUserId}&quot;,&#xd;
                        &quot;UserLinkedBankID&quot;: &quot;${beneUserTransferBankId}&quot;,&#xd;
                        &quot;UserPrepaidVisaEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
                        &quot;UserGiftCardEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
                        &quot;sku&quot;: &quot;U935268&quot;,&#xd;
                        &quot;DealRegId&quot;: &quot;&quot;,&#xd;
                        &quot;Comment&quot;: &quot;Load Test Comment&quot;,&#xd;
                        &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;BeneficiaryCheckName&quot;: &quot;Test Check&quot;,&#xd;
                        &quot;BeneficiaryCheckCity&quot;: &quot;Florida&quot;,&#xd;
                        &quot;BeneficiaryCheckState&quot;: &quot;WA&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss1&quot;: &quot;Addr1&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss2&quot;: &quot;&quot;,&#xd;
                        &quot;BeneficiaryCheckPostalCode&quot;: &quot;789879&quot;,&#xd;
                        &quot;BeneficiaryCheckMemo&quot;: &quot;Test memo&quot;,&#xd;
                        &quot;BeneficiaryCheckReference&quot;: &quot;Load Test Bank reference&quot;,&#xd;
                        &quot;CardToken&quot;: &quot;${beneUserRapidCardId}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TransferFund Beneficiary Details" enabled="true">
                <stringProp name="filename">${beneFileName}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">beneUserId</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Log File Creation" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyyMMddHHmm&quot; );
String datetime = formatter.format( new java.util.Date() ); 

filePath = FileServer.getFileServer().getBaseDir().replace(&quot;\\&quot;, &quot;/&quot;);

fileName = filePath + &quot;/LogFile/TransferFund_&quot;+datetime+&quot;.txt&quot;;

vars.put(&quot;fileName&quot;, fileName);

File myObj = new File(fileName);
myObj.createNewFile();</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random Int Generator" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

amount = RandomStringUtils.randomNumeric(2);

if(amount.equals(&quot;0&quot;) || amount.equals(&quot;00&quot;)) {
            amount = &quot;10&quot;;
}

vars.put(&quot;randomAmount&quot;, amount);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
                <stringProp name="maximumValue">15</stringProp>
                <stringProp name="minimumValue">5</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomAmount</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RecipientUserId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RecipientUserId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].RecipientUserId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get TransactionID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TransactionID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].PaymentTransactionId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Amount" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TransactionAmount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].Amount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Log Process" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
FileWriter myWriter = new FileWriter(&quot;${fileName}&quot;, true);
myWriter.write(&quot;${issuerAccountNumber}    -    ${beneUserId}    -    ${randomAmount}    -    ${RecipientUserId}    -    ${TransactionID}    -    ${TransactionAmount}&quot;);
myWriter.write(&quot;\n&quot;);
myWriter.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UserWithdrawFund If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_UserWithdrawFund}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Withdraw Fund" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94503&quot;,&#xd;
            &quot;OTP&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${beneUserRapidCardId}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${beneUserTransferBankId}&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/UserWithdrawFund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="TransferFundtoCompany If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_TransferFundtoCompany}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to Company" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">    {&#xd;
        &quot;TransferFundToCompany&quot;: {&#xd;
            &quot;request&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94504&quot;,&#xd;
                &quot;WalletId&quot;: &quot;${issuerWalletId}&quot;,&#xd;
                &quot;ProgramId&quot;: &quot;&quot;,&#xd;
                &quot;Currency&quot;: &quot;USD&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;IssuerTransactionId&quot;: &quot;456789&quot;,&#xd;
                &quot;Amount&quot;: &quot;${randomAmount}&quot;,&#xd;
                &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
                &quot;BeneficiaryWalletID&quot;: &quot;${beneCompanyWalletId}&quot;,&#xd;
                &quot;BeneficiaryCheckAddresss1&quot;: &quot;Addr1&quot;,&#xd;
                &quot;BeneficiaryCheckAddresss2&quot;: &quot;Addr2&quot;,&#xd;
                &quot;BeneficiaryCheckCity&quot;: &quot;Florida&quot;,&#xd;
                &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                &quot;BeneficiaryCheckMemo&quot;: &quot;Test&quot;,&#xd;
                &quot;BeneficiaryCheckName&quot;: &quot;Test&quot;,&#xd;
                &quot;BeneficiaryCheckPostalCode&quot;: &quot;77788&quot;,&#xd;
                &quot;BeneficiaryCheckReference&quot;: &quot;Test&quot;,&#xd;
                &quot;BeneficiaryCheckState&quot;: &quot;WA&quot;,&#xd;
                &quot;BeneficiaryLinkedBankId&quot;: &quot;${beneCompanyTransferBankId}&quot;,&#xd;
                &quot;CardToken&quot;: &quot;${beneCompanyRapidCardId}&quot;,&#xd;
                &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
            }&#xd;
        }&#xd;
    }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundtoCompany</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
                <stringProp name="maximumValue">15</stringProp>
                <stringProp name="minimumValue">5</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomAmount</stringProp>
              </RandomVariableConfig>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="BeneficiaryCompanyWithdrawFund If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_BeneficiaryCompanyWithdrawFund}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Beneficiary Company Withdraw Fund" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${beneCompanyWalletId}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${beneCompanyTransferBankId}&quot;,&#xd;
            &quot;OTP&quot;: &quot;545352&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;: &quot;${beneCompanyRapidCardId}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="TransferFundUsertoCompanyUsingCC If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_TransferFundUsertoCompanyUsingCC}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund User to Company Using CC" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundUserToCompanyUsingCC&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;PaymentDetails&quot;: {&#xd;
                &quot;Amount&quot;: &quot;10&quot;,&#xd;
                &quot;CompanyAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;CompanyWalletId&quot;: &quot;${issuerWalletId}&quot;,&#xd;
                &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
                &quot;UserWalletID&quot;: &quot;${beneUserWalletId}&quot;,&#xd;
                &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
            },&#xd;
            &quot;PayerInformation&quot;: {&#xd;
                &quot;FirstName&quot;: &quot;Hari	&quot;,&#xd;
                &quot;LastName&quot;: &quot;Test&quot;&#xd;
            },&#xd;
            &quot;PayerBillingAddress&quot;: {&#xd;
                &quot;AddressLine1&quot;: &quot;Addr1&quot;,&#xd;
                &quot;City&quot;: &quot;Test&quot;,&#xd;
                &quot;State&quot;: &quot;Test&quot;,&#xd;
                &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;897896&quot;&#xd;
            },&#xd;
            &quot;CreditCardDetails&quot;: {&#xd;
                &quot;ExpireMonth&quot;: &quot;3&quot;,&#xd;
                &quot;ExpireYear&quot;: &quot;2027&quot;,&#xd;
                &quot;CreditCardNumber&quot;: &quot;4111111111111111&quot;,&#xd;
                &quot;CreditCardType&quot;: &quot;Visa Card&quot;,&#xd;
                &quot;CVV&quot;: &quot;456&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundUsertoCompanyUsingCC</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="TransferFundWallettoWallet If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_TransferFundWallettoWallet}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund Wallet to Wallet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundWalletToWallet&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;ToAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;ToWalletID&quot;: &quot;${beneCompanyWalletId}&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;OTP&quot;: &quot;413576&quot;,&#xd;
            &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundWallettoWallet</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="TransferFundDynamicAccountCreateUser If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_TransferFundDynamicAccountCreateUser}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund Dynamic Account Create User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToDynamicAccountUser&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;RecipientEmail&quot;: &quot;apiloadtestdynamic${randomValue}@mailinator123.com&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Amount&quot;: &quot;1&quot;,&#xd;
            &quot;RecipientFirstName&quot;: &quot;Hari&quot;,&#xd;
            &quot;RecipientLastName&quot;: &quot;Loadtest${randomValue}&quot;,&#xd;
            &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundDynamicAccountCreateUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
                <stringProp name="maximumValue">15</stringProp>
                <stringProp name="minimumValue">5</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomAmount</stringProp>
              </RandomVariableConfig>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetDigitalGiftCards If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetDigitalGiftCards}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Digital Gift Cards" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetGiftCards&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/GiftCard/GetDigitalGiftCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetGiftCardDetails If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetGiftCardDetails}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Gift Card Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetGiftCards&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U683701&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/GiftCard/GetGiftCardDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetPrepaidCards If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetPrepaidCards}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Prepaid Cards" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetPrepaidCards&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/GiftCard/GetPrepaidCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetPrepaidCardDetails If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetPrepaidCardDetails}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Prepaid Card Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetPrepaidCards&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U623885&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/GiftCard/GetPrepaidCardDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetConnectedCompanyFundRequest If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetConnectedCompanyFundRequest}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Connected Company Fund Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetConnectedCompanyFundRequestDetails&quot;: {&#xd;
        &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
        &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
        &quot;PaymentType&quot;: &quot;ALL&quot;,&#xd;
        &quot;FromDate&quot;: &quot;12/31/2021&quot;,&#xd;
        &quot;ToDate&quot;: &quot;12/31/2023&quot;,&#xd;
        &quot;Pagination&quot;: {&#xd;
            &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
            &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/GetConnectedCompanyFundRequest</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCompanyFees If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCompanyFees}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Fees" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyFees&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;CurrencyCode&quot;: &quot;USD&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Fund/GetCompanyFees</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Banks" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetLinkedBankAccounts If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetLinkedBankAccounts}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${beneCompanyId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/GetLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetACHDebitLinkedBankAccounts If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetACHDebitLinkedBankAccounts}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH Debit Linked Bank Accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${beneCompanyId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SearchBankbyBIC If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_SearchBankbyBIC}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Bankby BIC" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SearchBankByBIC&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;US&quot;,&#xd;
            &quot;SWIFTBIC&quot;: &quot;BOFAUS3NXXX&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/SearchBankbyBIC</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SearchBankByNationalID If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_SearchBankByNationalID}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Bank By National ID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SearchBankByNationalID&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;VI&quot;,&#xd;
            &quot;NationalID&quot;: &quot;021606674&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/SearchBankByNationalID</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ValidateIBAN If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_ValidateIBAN}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate IBAN" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ValidateIBAN&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;GB&quot;,&#xd;
            &quot;IBAN&quot;: &quot;GB82BUKB20045080977292&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/ValidateIBAN</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetBankWithdrawTypes If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetBankWithdrawTypes}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Bank Withdraw Types" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ValidateIBAN&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;GB&quot;,&#xd;
            &quot;IBAN&quot;: &quot;GB82BUKB20045080977292&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/GetBankWithdrawTypes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetBankValidationRules If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetBankValidationRules}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Bank Validation Rules" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetBankValidationRules&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;CountryISO2&quot;: &quot;IN&quot;,&#xd;
            &quot;BeneficiaryCountryISO2&quot;: &quot;US&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;WithdrawType&quot;: &quot;HV&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/GetBankValidationRules</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LinkBankBeneficiary If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_LinkBankBeneficiary}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;LinkBankBeneficiary&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;Beneficiary&quot;: {&#xd;
                &quot;BeneficiaryDetails&quot;: {&#xd;
                    &quot;BeneficiaryInformation&quot;: {&#xd;
                        &quot;ContactName&quot;: &quot;Load Test ${randomValue)&quot;,&#xd;
                        &quot;PhoneNumber&quot;: &quot;456789456&quot;,&#xd;
                        &quot;AddressLine1&quot;: &quot;Addr1&quot;,&#xd;
                        &quot;City&quot;: &quot;Belmont&quot;,&#xd;
                        &quot;Region&quot;: &quot;California&quot;,&#xd;
                        &quot;PostalCode&quot;: &quot;90001&quot;,&#xd;
                        &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;AddressLine2&quot;: &quot;&quot;&#xd;
                    }&#xd;
                },&#xd;
                &quot;BankDetails&quot;: {&#xd;
                    &quot;BeneficiaryBankInformation&quot;: {&#xd;
                        &quot;InstitutionName&quot;: &quot;Bank of America Corporation&quot;,&#xd;
                        &quot;EntityID&quot;:&quot;0&quot;,&#xd;
                        &quot;Currency&quot;: &quot;USD&quot;,&#xd;
                        &quot;SWIFTBIC&quot;: &quot;BOFAUS3NXXX&quot;,&#xd;
                        &quot;AccountNumber&quot;: &quot;44332211&quot;,&#xd;
                        &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
                        &quot;RoutingNumber&quot;: &quot;011000138&quot;,&#xd;
                        &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;WithdrawType&quot;: &quot;&quot;,&#xd;
                        &quot;RemittanceLine3&quot;: &quot;&quot;,&#xd;
                        &quot;RemittanceLine4&quot;: &quot;&quot;,&#xd;
                        &quot;RegulatoryFields&quot;: []&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/LinkBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">bankId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">LinkBankBeneficiaryResponse.LinkBankBeneficiaryResult.BeneficiaryId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LinkACHDebitBankBeneficiary If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_LinkACHDebitBankBeneficiary}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link ACH Debit Bank Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;LinkACHDebitBankBeneficiary&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;Beneficiary&quot;: {&#xd;
                &quot;BeneficiaryDetails&quot;: {&#xd;
                    &quot;BeneficiaryInformation&quot;: {&#xd;
                        &quot;ContactName&quot;: &quot;Load Test ${randomValue}&quot;,&#xd;
                        &quot;PhoneNumber&quot;: &quot;987445632&quot;,&#xd;
                        &quot;AddressLine1&quot;: &quot;Test Addr1&quot;,&#xd;
                        &quot;City&quot;: &quot;WA&quot;,&#xd;
                        &quot;Region&quot;: &quot;LA&quot;,&#xd;
                        &quot;PostalCode&quot;: &quot;465465&quot;,&#xd;
                        &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;AddressLine2&quot;: &quot;&quot;&#xd;
                    }&#xd;
                },&#xd;
                &quot;BankDetails&quot;: {&#xd;
                    &quot;BeneficiaryBankInformation&quot;: {&#xd;
                        &quot;EntityID&quot;:&quot;3538&quot;,&#xd;
                        &quot;InstitutionName&quot;: &quot;Bank of America Corporation&quot;,&#xd;
                        &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
                        &quot;Currency&quot;: &quot;USD&quot;,&#xd;
                        &quot;SWIFTBIC&quot;: &quot;BOFAUS3NXXX&quot;,&#xd;
                        &quot;AccountNumber&quot;: &quot;44332211&quot;,&#xd;
                        &quot;RoutingNumber&quot;: &quot;011000138&quot;,&#xd;
                        &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;RegulatoryFields&quot;: []&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ReleaseACHDebitMicrodeposit If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_ReleaseACHDebitMicrodeposit}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Release ACH Debit Micro Deposit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;BeneficiaryBankID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VerifyACHDebitMicrodeposit If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_VerifyACHDebitMicrodeposit}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify ACH Debit Micro Deposit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;BeneficiaryBankID&quot;: &quot;&quot;,&#xd;
            &quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
            &quot;Amount_2&quot;: &quot;0.15&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DeleteBankBeneficiary If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_DeleteBankBeneficiary}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Bank Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;DeleteBankBeneficiary&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;BeneficiaryBankID&quot;: &quot;${bankId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Bank/DeleteBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cards" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetLinkedCards If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetLinkedCards}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Cards" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;userid&quot;: &quot;${beneCompanyId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Card/GetLinkedCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LinkCard If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_LinkCard}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;LinkCard&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;linkcardtype&quot;: &quot;transfer&quot;,&#xd;
            &quot;EntityID&quot;:&quot;0&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;FirstName&quot;: &quot;Hari&quot;,&#xd;
                &quot;LastName&quot;: &quot;Transfer&quot;,&#xd;
                &quot;AddressLine1&quot;: &quot;Addr1&quot;,&#xd;
                &quot;City&quot;: &quot;Florida&quot;,&#xd;
                &quot;CountryCode2&quot;: &quot;US&quot;,&#xd;
                &quot;State&quot;: &quot;WA&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;89546&quot;,&#xd;
                &quot;NameOnCard&quot;: &quot;Hari Transfer&quot;,&#xd;
                &quot;CardType&quot;: &quot;Visa Card&quot;,&#xd;
                &quot;CardNo&quot;: &quot;4111111111111111&quot;,&#xd;
                &quot;ExpMonth&quot;: &quot;6&quot;,&#xd;
                &quot;ExpYear&quot;: &quot;2025&quot;,&#xd;
                &quot;cvv&quot;: &quot;123&quot;,&#xd;
                &quot;AddressLine2&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Card/LinkCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">cardToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">LinkCardResponse.LinkCardResult.CardToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DeleteCard If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_DeleteCard}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Card" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;DeleteCard&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${cardToken}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Card/DeleteCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary Company" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetBeneficiaries If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetBeneficiaries}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Beneficiaries" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetBeneficiaries&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/GetBeneficiaries</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CreateBeneficiary If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CreateBeneficiary}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CreateBeneficiary&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryCompanyName&quot;: &quot;LoadTestAPIComp${randomCompValue}&quot;,&#xd;
            &quot;WebAddress&quot;: &quot;www.xtrm.com&quot;,&#xd;
            &quot;BeneficiaryCompanyAdminDetails&quot;: {&#xd;
                &quot;AdminEmail&quot;: &quot;LoadTestAPIComp${randomCompValue}@mailinator.com&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;AdminFirstName&quot;: &quot;Hari&quot;,&#xd;
                &quot;AdminLastName&quot;: &quot;LoadTest${randomCompValue}&quot;,&#xd;
                &quot;AdminMobileNumber&quot;: &quot;20506950&quot;,&#xd;
                &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;City&quot;: &quot;Florida&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;465897&quot;,&#xd;
                &quot;Region&quot;: &quot;WA&quot;&#xd;
            },&#xd;
            &quot;SalesProgramDetails&quot;: {&#xd;
                &quot;PartnerAccountManager&quot;: &quot;&quot;,&#xd;
                &quot;SalesforcePartnerID&quot;: &quot;&quot;,&#xd;
                &quot;OtherPartnerID&quot;: &quot;&quot;,&#xd;
                &quot;Region&quot;: &quot;&quot;,&#xd;
                &quot;PartnerLevel&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/CreateBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomCompValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">beneId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">CreateBeneficiaryResponse.CreateBeneficiaryResult.BeneficiaryID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UpdateBeneficiary If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_UpdateBeneficiary}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;UpdateBeneficiary&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryID&quot;: &quot;SPN2394275&quot;,&#xd;
            &quot;BeneficiaryCompanyName&quot;: &quot;testcomp1200923&quot;,&#xd;
            &quot;WebAddress&quot;: &quot;www.xyz.com&quot;,&#xd;
            &quot;BeneficiaryCompanyAdminDetails&quot;: {&#xd;
                &quot;AdminFirstName&quot;: &quot;Hari&quot;,&#xd;
                &quot;AdminLastName&quot;: &quot;Test${randomValue}&quot;,&#xd;
                &quot;City&quot;: &quot;&quot;,&#xd;
                &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;Region&quot;: &quot;&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;&quot;&#xd;
            },&#xd;
            &quot;SalesProgramDetails&quot;: {&#xd;
                &quot;PartnerAccountManager&quot;: &quot;&quot;,&#xd;
                &quot;SalesforcePartnerID&quot;: &quot;&quot;,&#xd;
                &quot;OtherPartnerID&quot;: &quot;&quot;,&#xd;
                &quot;Region&quot;: &quot;&quot;,&#xd;
                &quot;PartnerLevel&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/UpdateBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CheckBeneficiaryExist If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CheckBeneficiaryExist}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Beneficiary Exist" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CheckBeneficiaryExist&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CompanyName&quot;: &quot;Hari&quot;,&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/CheckBeneficiaryExist</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetAdvancedContactCompanyType If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetAdvancedContactCompanyType}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Company Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CompanyType&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CountryISO2&quot;: &quot;US&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetAdvancedContactCompanyType</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetNaics If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetNaics}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Naics" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetNaics</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetAdvancedContactJobTitles If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetAdvancedContactJobTitles}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Job Titles" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetAdvancedContactJobTitles</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetIdentificationType If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetIdentificationType}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Identification Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetIdentificationType</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetAdvancedContactCountry If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetAdvancedContactCountry}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Country" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetAdvancedContactCountry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetAdvancedContactState If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetAdvancedContactState}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact State" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedContactState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CountryCode&quot;: &quot;US&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetAdvancedContactState</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CompanyAdvancedProfile If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CompanyAdvancedProfile}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Advanced Profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfile&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
        	  &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Payments_Type&quot;: &quot;USA Only&quot;,&#xd;
            &quot;AuthorizedContactInformation&quot;: {&#xd;
                &quot;Address_Line_1&quot;: &quot;The CommericalCo Home Office&quot;,&#xd;
                &quot;Business_Phone&quot;: 998877665544,&#xd;
                &quot;Citizenship&quot;: &quot;US&quot;,&#xd;
                &quot;City&quot;: &quot;Coimbra&quot;,&#xd;
                &quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
                &quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
                &quot;Email_Address&quot;: &quot;loadBeneTestCompany1@mailinator.com&quot;,&#xd;
                &quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
                &quot;Job_Title&quot;: &quot;CEO&quot;,&#xd;
                &quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
                &quot;Postal_Code&quot;: 11223344,&#xd;
                &quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
            },&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;BusinessEntityInformation&quot;: {&#xd;
                &quot;Address_Line_1&quot;: &quot;The CommericalCo Home Office&quot;,&#xd;
                &quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
                &quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
                &quot;City&quot;: &quot;Coimbra&quot;,&#xd;
                &quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
                &quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
                &quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
                &quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
                &quot;Countries_Receiving_From&quot;: &quot;Portugal&quot;,&#xd;
                &quot;Countries_Sending_To&quot;: &quot;United States of America&quot;,&#xd;
                &quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
                &quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
                &quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
                &quot;Postal_Code&quot;: 11223344,&#xd;
                &quot;Purpose_Of_Transactions&quot;: &quot;Vendor Payments&quot;,&#xd;
                &quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
                &quot;Region_Of_Incorporation_Code2&quot;: &quot;Centro&quot;,&#xd;
                &quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
                &quot;Expected_Currencies&quot; : &quot;USD&quot;,&#xd;
                &quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
            },&#xd;
            &quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
            &quot;OwnerInformation&quot;: {&#xd;
                &quot;Ticker_Symbol&quot;: &quot;R&quot;,&#xd;
                &quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
                &quot;Owners&quot;: [&#xd;
                    {&#xd;
                        &quot;Address_Line_1&quot;: &quot;The CommericalCo Home Office&quot;,&#xd;
                        &quot;City&quot;: &quot;Coimbra&quot;,&#xd;
                        &quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
                        &quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
                        &quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
                        &quot;Middle_Name&quot;: &quot;Middle Name&quot;,&#xd;
                        &quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
                        &quot;Citizenship&quot;: &quot;Portugal&quot;,&#xd;
                        &quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
                        &quot;Percentage_Owned&quot;: 25,&#xd;
                        &quot;Postal_Code&quot;: 11223344,&#xd;
                        &quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CompanyAdvancedProfileStatus If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CompanyAdvancedProfileStatus}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Advanced Profile Status" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileStatus&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/CompanyAdvancedProfileStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCompanyAdvancedProfileDetails If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCompanyAdvancedProfileDetails}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Advanced Profile Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileDetails&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Register/GetCompanyAdvancedProfileDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetEntities If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetEntities}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Entities" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetEntities&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneCompanyId}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: 1,&#xd;
                &quot;RecordsToTake&quot;: 10&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/GetEntities</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Programs" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetPrograms If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetPrograms}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programs" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetPrograms&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Programs/GetPrograms</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ProgramCategory If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_ProgramCategory}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Category" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetProgramCategory&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Programs/ProgramCategory</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">categoryID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">GetProgramCategoryResponse.ProgramCategoryResult.ProgramCategory.ProgramCategoryDetails[*].CategoryID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ProgramType If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_ProgramType}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetProgramCategory&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;CategoryID&quot;: &quot;${categoryID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Programs/ProgramType</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">typeId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">GetProgramTypeResponse.ProgramTypeResult.ProgramType.ProgramTypeDetail[*].SubCategoryID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">6</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CreateProgram If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_CreateProgram}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Program" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CreateProgram&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;TransactionCategoryID&quot;: &quot;${categoryID}&quot;,&#xd;
            &quot;TransactionSubCategoryID&quot;: &quot;${typeId}&quot;,&#xd;
            &quot;ClaimAmount&quot;: &quot;10&quot;,&#xd;
            &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
            &quot;IsClaim&quot;: true,&#xd;
            &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Programs/CreateProgram</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">programId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">CreateProgramsResponse.CreateProgramsResult.ProgramID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UpdateProgram If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_UpdateProgram}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;UpdateProgram&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;TransactionCategoryID&quot;: &quot;${categoryID}&quot;,&#xd;
            &quot;TransactionSubCategoryID&quot;: &quot;${typeId}&quot;,&#xd;
            &quot;ClaimAmount&quot;: &quot;11&quot;,&#xd;
            &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
            &quot;IsClaim&quot;: true,&#xd;
            &quot;ProgramID&quot;: &quot;${programId}&quot;,&#xd;
            &quot;description&quot;: &quot;Load Test Program Updated&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Programs/UpdateProgram</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OTP" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetOTPAuthorizedVendor If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetOTPAuthorizedVendor}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get OTP Authorized Vendor" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetOTPAuthorizedVendor&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${beneUserId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/OTP/GetOTPAuthorizedVendor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ValidateOTPAuthorizeVendor If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_ValidateOTPAuthorizeVendor}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate OTP Authorize Vendor" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ValidateOTPAuthorizeVendor&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;OneTimePassword&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/OTP/ValidateOTPAuthorizeVendor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetConnectedStatus If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetConnectedStatus}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Connected Status" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetConnectedStatus&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/OTP/GetConnectedStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Report" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="TransferTaxInformation If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_TransferTaxInformation}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Tax Information" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferTaxInformation&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot; : &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot; : &quot;PAT2190554&quot;,&#xd;
            &quot;TaxYearStartMonth&quot; : &quot;1&quot;,&#xd;
            &quot;TaxYear&quot; : &quot;2022&quot;,&#xd;
            &quot;EmailBody&quot; : &quot;Load Test email&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/Report/TransferTaxInformation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="General" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetCountry If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetCountry}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Country" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/General/GetCountry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">countryId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">GetCountryResponse.GetCountryResult.Country[*].CountryID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetState If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${condition_GetState}&quot;==&quot;Yes&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get State" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot; : &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;CountryID&quot; : &quot;${countryId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/API/v4/General/GetState</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Token value" enabled="true">
          <stringProp name="filename">${basePath}/DataSet/Token.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">token</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Many to Many" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">50</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token Generation" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
                <stringProp name="Argument.value">password</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">${clientId}</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
                <stringProp name="Argument.value">${clientSecret}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/oAuth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

filePath = FileServer.getFileServer().getBaseDir().replace(&quot;\\&quot;, &quot;/&quot;);

def path = filePath+&quot;/DataSet/&quot;;
def csvFile = new File (path + &quot;TokenM2M.csv&quot;);

csvFile.append(${token});
csvFile.append(&quot;\n&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

def path = FileServer.getFileServer().getBaseDir()+&quot;/DataSet/&quot;;
def csvFile = new File (path + &apos;TokenM2M.csv&apos;);
//log.info(&quot;token valuev-${token}&quot;)

csvFile.append(&quot;${token}&quot;);
csvFile.append(&quot;\n&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
f = new FileOutputStream(&quot;E:/Automation/XAPI_Load_Test/DataSet/TokenM2M.csv&quot;,true);
p = new PrintStream(f);
this.interpreter.setOut(p);
p.println(clientId+&quot;,&quot;+access_token);
//p.close();
f.close();</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodId&quot;: &quot;XTR94502&quot;,&#xd;
                &quot;ProgramId&quot;: &quot;5034&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Load Test&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;USD&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;: [&#xd;
                    {&#xd;
                        &quot;IssuerTransactionId&quot;: &quot;456897&quot;,&#xd;
                        &quot;PaymentAmount&quot;: &quot;${randomAmount}&quot;,&#xd;
                        &quot;PartnerAccountNumber&quot;: &quot;PAT2190554&quot;,&#xd;
                        &quot;RecipientUserId&quot;: &quot;${beneUserId}&quot;,&#xd;
                        &quot;UserLinkedBankID&quot;: &quot;${beneUserTransferBankId}&quot;,&#xd;
                        &quot;UserPrepaidVisaEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
                        &quot;UserGiftCardEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
                        &quot;sku&quot;: &quot;U935268&quot;,&#xd;
                        &quot;DealRegId&quot;: &quot;&quot;,&#xd;
                        &quot;Comment&quot;: &quot;Load Test Comment&quot;,&#xd;
                        &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;BeneficiaryCheckName&quot;: &quot;Test Check&quot;,&#xd;
                        &quot;BeneficiaryCheckCity&quot;: &quot;Florida&quot;,&#xd;
                        &quot;BeneficiaryCheckState&quot;: &quot;WA&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss1&quot;: &quot;Addr1&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss2&quot;: &quot;&quot;,&#xd;
                        &quot;BeneficiaryCheckPostalCode&quot;: &quot;789879&quot;,&#xd;
                        &quot;BeneficiaryCheckMemo&quot;: &quot;Test memo&quot;,&#xd;
                        &quot;BeneficiaryCheckReference&quot;: &quot;Load Test Bank reference&quot;,&#xd;
                        &quot;CardToken&quot;: &quot;${beneUserRapidCardId}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFund</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TransferFund Beneficiary Details" enabled="true">
              <stringProp name="filename">${basePath}/DataSet/TransferFund-ManyToMany-Dev.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">issuerAccountNumber,issuerWalletId,beneUserId,amount</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Token value" enabled="true">
              <stringProp name="filename">${basePath}/DataSet/TokenM2M.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">token</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Log File Creation" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyyMMddHHmm&quot; );  
String datetime = formatter.format( new java.util.Date() ); 

filePath = FileServer.getFileServer().getBaseDir().replace(&quot;\\&quot;, &quot;/&quot;);

fileName = filePath + &quot;/LogFile/TransferFund_&quot;+datetime+&quot;.csv&quot;;

vars.put(&quot;fileName&quot;, fileName);

File myObj = new File(fileName);
myObj.createNewFile();</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random Int Generator" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

amount = RandomStringUtils.randomNumeric(2);

if(amount.equals(&quot;0&quot;) || amount.equals(&quot;00&quot;)) {
            amount = &quot;10&quot;;
}

vars.put(&quot;randomAmount&quot;, amount);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
              <stringProp name="maximumValue">15</stringProp>
              <stringProp name="minimumValue">5</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">true</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">randomAmount</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RecipientUserId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RecipientUserId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].RecipientUserId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get TransactionID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TransactionID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].PaymentTransactionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TransactionAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].Amount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Fee" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Fee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].Fee</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Total Amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TotalAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].TotalAmount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Log Process" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String result = &quot;Not Matched&quot;;
if(${randomAmount}==${TransactionAmount}) {
	result = &quot;Matched&quot;;
}

FileWriter myWriter = new FileWriter(&quot;${fileName}&quot;, true);
myWriter.write(&quot;${issuerAccountNumber},${randomAmount},${RecipientUserId},TransferFundResponse,${TransactionID},${TransactionAmount},${Fee},${TotalAmount},&quot;+result);
myWriter.write(&quot;\n&quot;);
myWriter.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Wallet Transaction Details" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionID}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetCompanyWalletTransactionDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DetailsAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetCompanyTransactionDetailsResponse.GetCompanyTransactionDetailsResult.Field[0][11].Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Fee" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DetailsFee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetCompanyTransactionDetailsResponse.GetCompanyTransactionDetailsResult.Field[0][12].Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Total Amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DetailsTotalAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetCompanyTransactionDetailsResponse.GetCompanyTransactionDetailsResult.Field[0][13].Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Log File Creation" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyyMMddHHmm&quot; );  
String datetime = formatter.format( new java.util.Date() ); 

filePath = FileServer.getFileServer().getBaseDir().replace(&quot;\\&quot;, &quot;/&quot;);

fileName = filePath + &quot;/LogFile/TransferFund_CompanyTxn_&quot;+datetime+&quot;.csv&quot;;

vars.put(&quot;fileName&quot;, fileName);

File myObj = new File(fileName);
myObj.createNewFile();</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Log Process" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
FileWriter myWriter = new FileWriter(&quot;${fileName}&quot;, true);
myWriter.write(&quot;${issuerAccountNumber},${RecipientUserId},${DetailsAmount},${DetailsFee},${DetailsTotalAmount}&quot;);
myWriter.write(&quot;\n&quot;);
myWriter.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallet Transactions" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetUserWalletTransactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get First Transaction ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">beneUserTransactionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetUserWalletTransactionsResponse.GetUserWalletTransactionsResult.Transactions[*].TransactionID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Wallet Transaction Details" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${beneUserTransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${beneUserId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/API/v4/Wallet/GetUserWalletTransactionDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">UserDetailsAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetUserTransactionDetailsResponse.GetUserTransactionDetailsResult.Field[0][5].Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Fee" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">UserDetailsFee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetUserTransactionDetailsResponse.GetUserTransactionDetailsResult.Field[0][6].Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Total Amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">UserDetailsTotalAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">GetUserTransactionDetailsResponse.GetUserTransactionDetailsResult.Field[0][7].Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Log File Creation" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyyMMddHHmm&quot; );  
String datetime = formatter.format( new java.util.Date() ); 

filePath = FileServer.getFileServer().getBaseDir().replace(&quot;\\&quot;, &quot;/&quot;);

fileName = filePath + &quot;/LogFile/TransferFund_UserTxn_&quot;+datetime+&quot;.csv&quot;;

vars.put(&quot;fileName&quot;, fileName);

File myObj = new File(fileName);
myObj.createNewFile();</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Log Process" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
String userDetailsAmount = vars.get(&quot;UserDetailsAmount&quot;).toString();
userDetailsAmount = userDetailsAmount.replace(&quot;USD&quot;, &quot;&quot;);
userDetailsAmount = userDetailsAmount.trim().replace(&quot;.00&quot;, &quot;&quot;);
String randomAmount = vars.get(&quot;randomAmount&quot;).toString();

String result = &quot;Not Matched&quot;;
if(${randomAmount}==${TransactionAmount} &amp;&amp; userDetailsAmount.equals(randomAmount)) {
	result = &quot;Matched&quot;;
}

FileWriter myWriter = new FileWriter(&quot;${fileName}&quot;, true);
myWriter.write(&quot;${issuerAccountNumber},${randomAmount},${RecipientUserId},${TransactionID},${TransactionAmount},${Fee},${TotalAmount},${beneUserTransactionId},&quot;+userDetailsAmount+&quot;,&quot;+result);
myWriter.write(&quot;\n&quot;);
myWriter.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SendAPI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SimpleSend" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send API - SimpleSend" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;senderProfileID&quot;: &quot;${senderProfileID}&quot;,&#xd;
    &quot;senderWalletID&quot;: &quot;${senderWalletID}&quot;,&#xd;
    &quot;senderCurrencyID&quot;: 1,&#xd;
    &quot;receiverProfileID&quot;: &quot;${receiverProfileID}&quot;,&#xd;
    &quot;receiverWalletID&quot;: &quot;${receiverWalletID}&quot;,&#xd;
    &quot;programID&quot;: 0,&#xd;
    &quot;campaignSessionID&quot;: &quot;${__time(yyyy/MM/dd HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
    &quot;claimID&quot;: 0,&#xd;
    &quot;description&quot;: &quot;Load test description 2&quot;,&#xd;
    &quot;amount&quot;: &quot;${randomAmount}&quot;,&#xd;
    &quot;totalFees&quot;: 2,&#xd;
    &quot;percentFees&quot;: 3,&#xd;
    &quot;flatFees&quot;: 1,&#xd;
    &quot;senderPays&quot;: true,&#xd;
    &quot;partnerProfileID&quot;: &quot;&quot;,&#xd;
    &quot;model&quot;: &quot;&quot;,&#xd;
    &quot;numberOfItems&quot;: &quot;&quot;,&#xd;
    &quot;comment&quot;: &quot;Load test comment 2&quot;,&#xd;
    &quot;saleDate&quot;: &quot;&quot;,&#xd;
    &quot;serialNumber&quot;: &quot;&quot;,&#xd;
    &quot;budgetCode&quot;: &quot;&quot;,&#xd;
    &quot;dealRegID&quot;: &quot;&quot;,&#xd;
    &quot;fundSourceTransactionID&quot;: 0,&#xd;
    &quot;paymentTypeID&quot;: 2,&#xd;
    &quot;paymentMethodID&quot;: 2&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURLSendAPI}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/SimpleSend</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;
String randomValue = RandomStringUtils.randomAlphanumeric(5);
randomCampaignSessionID = &quot;SS_Campaign_load_&quot;+randomValue+&quot;_20231124000000&quot;;
vars.put(&quot;randomValue&quot;, randomCampaignSessionID);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random amount" enabled="true">
              <stringProp name="maximumValue">15</stringProp>
              <stringProp name="minimumValue">5</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">true</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">randomAmount</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Account details " enabled="true">
              <stringProp name="filename">${sendAPISimpleSendFileName}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">senderProfileID,senderWalletID,receiverProfileID,receiverWalletID</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Send Individual Batch Payments" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SimpleSendBatch - InitiatePayment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;senderProfileID&quot;: &quot;${senderProfileID}&quot;,&#xd;
  &quot;senderWalletID&quot;: &quot;${senderWalletID}&quot;,&#xd;
  &quot;senderCurrencyID&quot;: 1,&#xd;
  &quot;programID&quot;: 0,&#xd;
  &quot;submissionTypeID&quot;: 0,&#xd;
  &quot;connectSubmissionFileID&quot;: 0,&#xd;
  &quot;campaignSessionID&quot;: &quot;${__time(yyyy/MM/dd HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
  &quot;description&quot;: &quot;Load test description 2&quot;,&#xd;
  &quot;paymentTypeID&quot;: 2,&#xd;
  &quot;paymentMethodID&quot;: 2,&#xd;
  &quot;transactionDetails&quot;: [&#xd;
    {&#xd;
      &quot;rowID&quot;: 0,&#xd;
      &quot;receiverProfileID&quot;: &quot;${receiverProfileID}&quot;,&#xd;
      &quot;receiverWalletID&quot;: &quot;${receiverWalletID}&quot;,&#xd;
      &quot;claimID&quot;: 0,&#xd;
      &quot;amount&quot;: &quot;${randomAmount}&quot;,&#xd;
      &quot;fee&quot;: 3,&#xd;
      &quot;partnerProfileID&quot;: &quot;&quot;,&#xd;
      &quot;sku&quot;: &quot;&quot;,&#xd;
      &quot;model&quot;: &quot;&quot;,&#xd;
      &quot;numberOfItems&quot;: &quot;&quot;,&#xd;
      &quot;comment&quot;: &quot;Load test comment 2&quot;,&#xd;
      &quot;saleDate&quot;: &quot;&quot;,&#xd;
      &quot;serialNumber&quot;: &quot;&quot;,&#xd;
      &quot;budgetCode&quot;: &quot;&quot;,&#xd;
      &quot;dealRegID&quot;: &quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURLSendAPI}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/SimpleSendBatch/InitiatePayments</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random amount" enabled="true">
              <stringProp name="maximumValue">15</stringProp>
              <stringProp name="minimumValue">5</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">true</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">randomAmount</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get AwardCampaignDetailsID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">awardCampaignDetailsID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">result.awardCampaignDetailsID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Account details " enabled="true">
              <stringProp name="filename">${sendAPIIndividaulBatchFileName}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">senderProfileID,senderWalletID,receiverProfileID,receiverWalletID</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SimpleSendBatch - ProcessIndividualPayments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;senderProfileID&quot;: &quot;${senderProfileID}&quot;,&#xd;
  &quot;senderWalletID&quot;: &quot;${senderWalletID}&quot;,&#xd;
  &quot;awardCampaignDetailsID&quot;: &quot;${awardCampaignDetailsID}&quot;,&#xd;
  &quot;flatFees&quot;: 1,&#xd;
  &quot;percentFees&quot;: 2,&#xd;
  &quot;senderPays&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURLSendAPI}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/SimpleSendBatch/ProcessIndividualPayments</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Send Company Batch Payments" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SimpleSendBatch - InitiatePayment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;senderProfileID&quot;: &quot;${senderProfileID}&quot;,&#xd;
  &quot;senderWalletID&quot;: &quot;${senderWalletID}&quot;,&#xd;
  &quot;senderCurrencyID&quot;: 1,&#xd;
  &quot;programID&quot;: 0,&#xd;
  &quot;submissionTypeID&quot;: 0,&#xd;
  &quot;connectSubmissionFileID&quot;: 0,&#xd;
  &quot;campaignSessionID&quot;: &quot;${__time(yyyy/MM/dd HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
  &quot;description&quot;: &quot;Load test description 2&quot;,&#xd;
  &quot;paymentTypeID&quot;: 2,&#xd;
  &quot;paymentMethodID&quot;: 2,&#xd;
  &quot;transactionDetails&quot;: [&#xd;
    {&#xd;
      &quot;rowID&quot;: 0,&#xd;
      &quot;receiverProfileID&quot;: &quot;${receiverProfileID}&quot;,&#xd;
      &quot;receiverWalletID&quot;: &quot;${receiverWalletID}&quot;,&#xd;
      &quot;claimID&quot;: 0,&#xd;
      &quot;amount&quot;: &quot;${randomAmount}&quot;,&#xd;
      &quot;fee&quot;: 2,&#xd;
      &quot;partnerProfileID&quot;: &quot;&quot;,&#xd;
      &quot;sku&quot;: &quot;&quot;,&#xd;
      &quot;model&quot;: &quot;&quot;,&#xd;
      &quot;numberOfItems&quot;: &quot;&quot;,&#xd;
      &quot;comment&quot;: &quot;Load test comment 2&quot;,&#xd;
      &quot;saleDate&quot;: &quot;&quot;,&#xd;
      &quot;serialNumber&quot;: &quot;&quot;,&#xd;
      &quot;budgetCode&quot;: &quot;&quot;,&#xd;
      &quot;dealRegID&quot;: &quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURLSendAPI}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/SimpleSendBatch/InitiatePayments</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
              <stringProp name="maximumValue">15</stringProp>
              <stringProp name="minimumValue">5</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">true</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">randomAmount</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get AwardCampaignDetailsID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">awardCampaignDetailsID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">result.awardCampaignDetailsID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Account details " enabled="true">
              <stringProp name="filename">${sendAPICompanyBatchFileName}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">senderProfileID,senderWalletID,receiverProfileID,receiverWalletID</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SimpleSendBatch - ProcessCompanyPayments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;senderProfileID&quot;: &quot;${senderProfileID}&quot;,&#xd;
  &quot;senderWalletID&quot;: &quot;${senderWalletID}&quot;,&#xd;
  &quot;awardCampaignDetailsID&quot;: &quot;${awardCampaignDetailsID}&quot;,&#xd;
  &quot;flatFees&quot;: 1,&#xd;
  &quot;percentFees&quot;: 2,&#xd;
  &quot;senderPays&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURLSendAPI}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/SimpleSendBatch/ProcessCompanyPayments</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Trans fund dynamic user creation HTTP Header Manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer B4COGT8c7NWN68/hvPAeVBVCDq+cKlwLkBwm5AKWejg7/WlNAY1tXscxqUeszg+OBTpQawb6TEE40SgGdR+XvQpvJWvcHjC3w3x3I5/hZtMtgzOTbBPmqoXmX21uHztRQZChrRZN3rrA9to6G1d3cTICPNp1lDMI8UMepGlM7tODxis/gH/xNT41uBA=</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Trans fund dynamic user creation" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund Dynamic Account Create User" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToDynamicAccountUser&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN23146793&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;SPN23146793&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;122485&quot;,&#xd;
            &quot;RecipientEmail&quot;: &quot;apiloadtestdynamic${randomValue}@mailinator123.com&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Amount&quot;: &quot;1&quot;,&#xd;
            &quot;RecipientFirstName&quot;: &quot;Hari&quot;,&#xd;
            &quot;RecipientLastName&quot;: &quot;Loadtest${randomValue}&quot;,&#xd;
            &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundDynamicAccountCreateUser</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
            <stringProp name="maximumValue">15</stringProp>
            <stringProp name="minimumValue">5</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">randomAmount</stringProp>
          </RandomVariableConfig>
          <hashTree/>
        </hashTree>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Individual API load Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer MdEU+ue+G/5acdNXg111w39/SPERmLxs0VDig7xAJjS5EH3xZzhFuy/AAnBspj92J9SBqh/U9g6sB/sGdShIXtTRCHgAgPZyv1XvyQL73GDlbD6FEW+MRN+SJWPz+eP8DETK/MDkihrm6HOq1F9cGopDa3zT1ZOfpRrhlAUv5e+NFKSqoXAUmu4Bq70=</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Individual API Load Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund Dynamic Account Create User" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToDynamicAccountUser&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
            &quot;RecipientEmail&quot;: &quot;apiloadtestdynamic${randomValue}@mailinator123.com&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;Amount&quot;: &quot;1&quot;,&#xd;
            &quot;RecipientFirstName&quot;: &quot;Hari&quot;,&#xd;
            &quot;RecipientLastName&quot;: &quot;Loadtest${randomValue}&quot;,&#xd;
            &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundDynamicAccountCreateUser</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
            <stringProp name="maximumValue">15</stringProp>
            <stringProp name="minimumValue">5</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">randomAmount</stringProp>
          </RandomVariableConfig>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Beneficiary" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;CreateBeneficiary&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryCompanyName&quot;: &quot;LoadTestAPIComp${randomCompValue}&quot;,&#xd;
            &quot;WebAddress&quot;: &quot;www.xtrm.com&quot;,&#xd;
            &quot;BeneficiaryCompanyAdminDetails&quot;: {&#xd;
                &quot;AdminEmail&quot;: &quot;LoadTestAPIComp${randomCompValue}@mail123.com&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;AdminFirstName&quot;: &quot;Hari&quot;,&#xd;
                &quot;AdminLastName&quot;: &quot;LoadTest${randomCompValue}&quot;,&#xd;
                &quot;AdminMobileNumber&quot;: &quot;20506950&quot;,&#xd;
                &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;City&quot;: &quot;Florida&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;465897&quot;,&#xd;
                &quot;Region&quot;: &quot;WA&quot;&#xd;
            },&#xd;
            &quot;SalesProgramDetails&quot;: {&#xd;
                &quot;PartnerAccountManager&quot;: &quot;&quot;,&#xd;
                &quot;SalesforcePartnerID&quot;: &quot;&quot;,&#xd;
                &quot;OtherPartnerID&quot;: &quot;&quot;,&#xd;
                &quot;Region&quot;: &quot;&quot;,&#xd;
                &quot;PartnerLevel&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/API/v4/Beneficiary/CreateBeneficiary</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random String Generator" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

vars.put(&quot;randomCompValue&quot;, RandomStringUtils.randomAlphanumeric(5));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">beneId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">CreateBeneficiaryResponse.CreateBeneficiaryResult.BeneficiaryID</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodId&quot;: &quot;XTR94502&quot;,&#xd;
                &quot;ProgramId&quot;: &quot;5034&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${issuerWalletId}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Load Test&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;USD&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;: [&#xd;
                    {&#xd;
                        &quot;IssuerTransactionId&quot;: &quot;456897&quot;,&#xd;
                        &quot;PaymentAmount&quot;: &quot;${randomAmount}&quot;,&#xd;
                        &quot;PartnerAccountNumber&quot;: &quot;PAT2190554&quot;,&#xd;
                        &quot;RecipientUserId&quot;: &quot;${beneUserId}&quot;,&#xd;
                        &quot;UserLinkedBankID&quot;: &quot;${beneUserTransferBankId}&quot;,&#xd;
                        &quot;UserPrepaidVisaEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
                        &quot;UserGiftCardEmailID&quot;: &quot;haritestuser1@mailinator.com&quot;,&#xd;
                        &quot;sku&quot;: &quot;U935268&quot;,&#xd;
                        &quot;DealRegId&quot;: &quot;&quot;,&#xd;
                        &quot;Comment&quot;: &quot;Load Test Comment&quot;,&#xd;
                        &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                        &quot;BeneficiaryCheckName&quot;: &quot;Test Check&quot;,&#xd;
                        &quot;BeneficiaryCheckCity&quot;: &quot;Florida&quot;,&#xd;
                        &quot;BeneficiaryCheckState&quot;: &quot;WA&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss1&quot;: &quot;Addr1&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss2&quot;: &quot;&quot;,&#xd;
                        &quot;BeneficiaryCheckPostalCode&quot;: &quot;789879&quot;,&#xd;
                        &quot;BeneficiaryCheckMemo&quot;: &quot;Test memo&quot;,&#xd;
                        &quot;BeneficiaryCheckReference&quot;: &quot;Load Test Bank reference&quot;,&#xd;
                        &quot;CardToken&quot;: &quot;${beneUserRapidCardId}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFund</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TransferFund Beneficiary Details" enabled="true">
            <stringProp name="filename">${beneFileName}</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">beneUserId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Log File Creation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyyMMddHHmm&quot; );
String datetime = formatter.format( new java.util.Date() ); 

filePath = FileServer.getFileServer().getBaseDir().replace(&quot;\\&quot;, &quot;/&quot;);

fileName = filePath + &quot;/LogFile/TransferFund_&quot;+datetime+&quot;.txt&quot;;

vars.put(&quot;fileName&quot;, fileName);

File myObj = new File(fileName);
myObj.createNewFile();</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Random Int Generator" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

amount = RandomStringUtils.randomNumeric(2);

if(amount.equals(&quot;0&quot;) || amount.equals(&quot;00&quot;)) {
            amount = &quot;10&quot;;
}

vars.put(&quot;randomAmount&quot;, amount);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
            <stringProp name="maximumValue">15</stringProp>
            <stringProp name="minimumValue">5</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">randomAmount</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RecipientUserId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">RecipientUserId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].RecipientUserId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get TransactionID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">TransactionID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].PaymentTransactionId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Amount" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">TransactionAmount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">TransferFundResponse.TransferFundResult.TransactionDetail[0].Amount</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Log Process" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">
FileWriter myWriter = new FileWriter(&quot;${fileName}&quot;, true);
myWriter.write(&quot;${issuerAccountNumber}    -    ${beneUserId}    -    ${randomAmount}    -    ${RecipientUserId}    -    ${TransactionID}    -    ${TransactionAmount}&quot;);
myWriter.write(&quot;\n&quot;);
myWriter.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to Company" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">    {&#xd;
        &quot;TransferFundToCompany&quot;: {&#xd;
            &quot;request&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94504&quot;,&#xd;
                &quot;WalletId&quot;: &quot;${issuerWalletId}&quot;,&#xd;
                &quot;ProgramId&quot;: &quot;&quot;,&#xd;
                &quot;Currency&quot;: &quot;USD&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;false&quot;,&#xd;
                &quot;IssuerTransactionId&quot;: &quot;456789&quot;,&#xd;
                &quot;Amount&quot;: &quot;${randomAmount}&quot;,&#xd;
                &quot;BeneficiaryAccountNumber&quot;: &quot;${beneCompanyId}&quot;,&#xd;
                &quot;BeneficiaryWalletID&quot;: &quot;${beneCompanyWalletId}&quot;,&#xd;
                &quot;BeneficiaryCheckAddresss1&quot;: &quot;Addr1&quot;,&#xd;
                &quot;BeneficiaryCheckAddresss2&quot;: &quot;Addr2&quot;,&#xd;
                &quot;BeneficiaryCheckCity&quot;: &quot;Florida&quot;,&#xd;
                &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                &quot;BeneficiaryCheckMemo&quot;: &quot;Test&quot;,&#xd;
                &quot;BeneficiaryCheckName&quot;: &quot;Test&quot;,&#xd;
                &quot;BeneficiaryCheckPostalCode&quot;: &quot;77788&quot;,&#xd;
                &quot;BeneficiaryCheckReference&quot;: &quot;Test&quot;,&#xd;
                &quot;BeneficiaryCheckState&quot;: &quot;WA&quot;,&#xd;
                &quot;BeneficiaryLinkedBankId&quot;: &quot;${beneCompanyTransferBankId}&quot;,&#xd;
                &quot;CardToken&quot;: &quot;${beneCompanyRapidCardId}&quot;,&#xd;
                &quot;description&quot;: &quot;Load Test Description&quot;&#xd;
            }&#xd;
        }&#xd;
    }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/API/v4/Fund/TransferFundtoCompany</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Integer" enabled="true">
            <stringProp name="maximumValue">15</stringProp>
            <stringProp name="minimumValue">5</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">randomAmount</stringProp>
          </RandomVariableConfig>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="49586">200</stringProp>
        </collectionProp>
        <stringProp name="Assertion.custom_message"></stringProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">false</boolProp>
        <intProp name="Assertion.test_type">8</intProp>
      </ResponseAssertion>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
          </value>
        </objProp>
        <stringProp name="filename">${basePath}/AggregateReport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
