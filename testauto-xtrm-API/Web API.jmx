<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Web API" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <stringProp name="TestPlan.comments">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir())}</stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.user_define_classpath">D:\Clone\WebAPI_old\testauto-xtrm-API\WebAPI.jar</stringProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseDir" elementType="Argument">
            <stringProp name="Argument.name">baseDir</stringProp>
            <stringProp name="Argument.value">E:\Automation\testauto-xtrm-API</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">/U+IMFA+yGKmGYT1f0vdmuqmyHsgKgO+kVNOdBI4omBb0BfyvRFnOlLJImcLa9irbV+2bxI6YY3fPjXm5HhX1kte423GfVm+xlp+ARHKijwaYzrchvwymEYRSutf/oPiOzyzgE1keexwaxKXsF2JvvwcFQB7qFTUeXWyygiqbRAzsfxyVwyBsnBJDJI=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseFilesPath" elementType="Argument">
            <stringProp name="Argument.name">responseFilesPath</stringProp>
            <stringProp name="Argument.value">E:\Automation\testauto-xtrm-API\Results_files</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseFile" elementType="Argument">
            <stringProp name="Argument.name">responseFile</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager_dev" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${token}</stringProp>
          </elementProp>
          <elementProp name="Postman-Token" elementType="Header">
            <stringProp name="Header.name">Postman-Token</stringProp>
            <stringProp name="Header.value">865ca7a2-3196-40a5-b2a2-a7a522642386</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">PostmanRuntime/7.28.4</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="US-variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BeneficiaryCompanyLinkedBankId" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyLinkedBankId</stringProp>
            <stringProp name="Argument.value">fb8bd35a6d4d46d18a5142ba9af43f73</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
            <stringProp name="Argument.value">85304</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardToken" elementType="Argument">
            <stringProp name="Argument.name">CardToken</stringProp>
            <stringProp name="Argument.value">1F5E209CF3DE4CD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardTokenCompany" elementType="Argument">
            <stringProp name="Argument.name">CardTokenCompany</stringProp>
            <stringProp name="Argument.value">7290AEE485B9462</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="companywallet" elementType="Argument">
            <stringProp name="Argument.name">companywallet</stringProp>
            <stringProp name="Argument.value">TestCompanyWallet7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Country" elementType="Argument">
            <stringProp name="Argument.name">Country</stringProp>
            <stringProp name="Argument.value">US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Currency" elementType="Argument">
            <stringProp name="Argument.name">Currency</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicFirstName" elementType="Argument">
            <stringProp name="Argument.name">DynamicFirstName</stringProp>
            <stringProp name="Argument.value">CheckDyn1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicLastName" elementType="Argument">
            <stringProp name="Argument.name">DynamicLastName</stringProp>
            <stringProp name="Argument.value">test27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="errorMessage" elementType="Argument">
            <stringProp name="Argument.name">errorMessage</stringProp>
            <stringProp name="Argument.value">Rapid card fetched</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerPaymentCurrency" elementType="Argument">
            <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerProgramID" elementType="Argument">
            <stringProp name="Argument.name">IssuerProgramID</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerWalletID" elementType="Argument">
            <stringProp name="Argument.name">IssuerWalletID</stringProp>
            <stringProp name="Argument.value">86288</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankID" elementType="Argument">
            <stringProp name="Argument.name">linkbankID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankIDACH" elementType="Argument">
            <stringProp name="Argument.name">linkbankIDACH</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newcompany" elementType="Argument">
            <stringProp name="Argument.name">newcompany</stringProp>
            <stringProp name="Argument.value">nebe2n7@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newuser" elementType="Argument">
            <stringProp name="Argument.name">newuser</stringProp>
            <stringProp name="Argument.value">TestUser1api114@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_ccn" elementType="Argument">
            <stringProp name="Argument.name">nlv_ccn</stringProp>
            <stringProp name="Argument.value">8.88878E+15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_cvv" elementType="Argument">
            <stringProp name="Argument.name">nlv_cvv</stringProp>
            <stringProp name="Argument.value">111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramId" elementType="Argument">
            <stringProp name="Argument.name">ProgramId</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Rapidcardtoken" elementType="Argument">
            <stringProp name="Argument.name">Rapidcardtoken</stringProp>
            <stringProp name="Argument.value">685AF91EBA2A443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecipientEmail" elementType="Argument">
            <stringProp name="Argument.name">RecipientEmail</stringProp>
            <stringProp name="Argument.value">dynuser72@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SKU" elementType="Argument">
            <stringProp name="Argument.name">SKU</stringProp>
            <stringProp name="Argument.value">U768149</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">U935268</stringProp>
          </elementProp>
          <elementProp name="TransactionId" elementType="Argument">
            <stringProp name="Argument.name">TransactionId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">https://xapidev.xtrm.com/API/v4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLinkedId" elementType="Argument">
            <stringProp name="Argument.name">userLinkedId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPAT" elementType="Argument">
            <stringProp name="Argument.name">userPAT</stringProp>
            <stringProp name="Argument.value">PAT22139023</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallet" elementType="Argument">
            <stringProp name="Argument.name">userwallet</stringProp>
            <stringProp name="Argument.value">TestCreatewalletAI7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserWalletID" elementType="Argument">
            <stringProp name="Argument.name">UserWalletID</stringProp>
            <stringProp name="Argument.value">83084</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WalletCurrency" elementType="Argument">
            <stringProp name="Argument.name">WalletCurrency</stringProp>
            <stringProp name="Argument.value">NZD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="walletname" elementType="Argument">
            <stringProp name="Argument.name">walletname</stringProp>
            <stringProp name="Argument.value">TestBenCompanyWallet7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_account" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_account</stringProp>
            <stringProp name="Argument.value">SPN1987678</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_wallet_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_wallet_id</stringProp>
            <stringProp name="Argument.value">111203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_authorization_endpoint" elementType="Argument">
            <stringProp name="Argument.name">xtrm_authorization_endpoint</stringProp>
            <stringProp name="Argument.value">https://xapidev.xtrm.com/v4/oAuth/token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_company" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_company</stringProp>
            <stringProp name="Argument.value">SPN1986817</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_personal" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
            <stringProp name="Argument.value">PAT1986818</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_id</stringProp>
            <stringProp name="Argument.value">1910107_API_User</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_secret" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_secret</stringProp>
            <stringProp name="Argument.value">L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_refresh_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_refresh_token</stringProp>
            <stringProp name="Argument.value">a738ae6ffebc4d2a9004c9c24499a1a5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_test_transaction_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_test_transaction_id</stringProp>
            <stringProp name="Argument.value">69203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_token</stringProp>
            <stringProp name="Argument.value">KUkku8xy2nEKUXE/wcuOSyOwpRZ4/lnAkqTuo4PBXsi1Qjkslb...</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basepath_sandbox" elementType="Argument">
            <stringProp name="Argument.name">basepath_sandbox</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs_sandbox</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basepath" elementType="Argument">
            <stringProp name="Argument.name">basepath</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AssertionDir" elementType="Argument">
            <stringProp name="Argument.name">AssertionDir</stringProp>
            <stringProp name="Argument.value">${baseDir}\Assertions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scriptpath" elementType="Argument">
            <stringProp name="Argument.name">scriptpath</stringProp>
            <stringProp name="Argument.value">${baseDir}\script.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLinkedIdUSD" elementType="Argument">
            <stringProp name="Argument.name">userLinkedIdUSD</stringProp>
            <stringProp name="Argument.value">9043acf0cd154668a0fc96e91636d1e1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartUTC" elementType="Argument">
            <stringProp name="Argument.name">StartUTC</stringProp>
            <stringProp name="Argument.value">06/06/22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndUTC" elementType="Argument">
            <stringProp name="Argument.name">EndUTC</stringProp>
            <stringProp name="Argument.value">06/28/22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Error_User Defined Variables_dev" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BeneficiaryWallets" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryWallets</stringProp>
            <stringProp name="Argument.value">${basepath}\BeneficiaryWallets.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CompanyWallets" elementType="Argument">
            <stringProp name="Argument.name">CompanyWallets</stringProp>
            <stringProp name="Argument.value">${basepath}\CompanyWallets.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="companywithdraw" elementType="Argument">
            <stringProp name="Argument.name">companywithdraw</stringProp>
            <stringProp name="Argument.value">${basepath}\Beneficiary company withdraw funds.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createuser" elementType="Argument">
            <stringProp name="Argument.name">createuser</stringProp>
            <stringProp name="Argument.value">${basepath}\CreateUser.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Linkbank" elementType="Argument">
            <stringProp name="Argument.name">Linkbank</stringProp>
            <stringProp name="Argument.value">${basepath}\Linkbank.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LinkbankACH" elementType="Argument">
            <stringProp name="Argument.name">LinkbankACH</stringProp>
            <stringProp name="Argument.value">${basepath}\LinkbankACH.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkcard" elementType="Argument">
            <stringProp name="Argument.name">linkcard</stringProp>
            <stringProp name="Argument.value">${basepath}\Linkcard.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="program" elementType="Argument">
            <stringProp name="Argument.name">program</stringProp>
            <stringProp name="Argument.value">${basepath}\Programs.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="reportPath" elementType="Argument">
            <stringProp name="Argument.name">reportPath</stringProp>
            <stringProp name="Argument.value">${basepath}\resport.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tax" elementType="Argument">
            <stringProp name="Argument.name">tax</stringProp>
            <stringProp name="Argument.value">${basepath}\taxinformation.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transferfund" elementType="Argument">
            <stringProp name="Argument.name">transferfund</stringProp>
            <stringProp name="Argument.value">${basepath}\Transfer funds.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transferfundpositive" elementType="Argument">
            <stringProp name="Argument.name">transferfundpositive</stringProp>
            <stringProp name="Argument.value">${basepath}\Transfer funds_positive.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TransferFundtoCompany" elementType="Argument">
            <stringProp name="Argument.name">TransferFundtoCompany</stringProp>
            <stringProp name="Argument.value">${basepath}\Tranfer Fund to Company.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateUser" elementType="Argument">
            <stringProp name="Argument.name">UpdateUser</stringProp>
            <stringProp name="Argument.value">${basepath}\UpdateUser.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwithdraw" elementType="Argument">
            <stringProp name="Argument.name">userwithdraw</stringProp>
            <stringProp name="Argument.value">${basepath}\User Withdraw Fund.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Wallets" elementType="Argument">
            <stringProp name="Argument.name">Wallets</stringProp>
            <stringProp name="Argument.value">${basepath}\UserWallets.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchBankByNationalID" elementType="Argument">
            <stringProp name="Argument.name">SearchBankByNationalID</stringProp>
            <stringProp name="Argument.value">${basepath}\SearchBankByNationalID.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchBankbyBIC" elementType="Argument">
            <stringProp name="Argument.name">SearchBankbyBIC</stringProp>
            <stringProp name="Argument.value">${basepath}\SearchBankbyBIC.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ValidateIBAN" elementType="Argument">
            <stringProp name="Argument.name">ValidateIBAN</stringProp>
            <stringProp name="Argument.value">${basepath}\ValidateIBAN.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="states" elementType="Argument">
            <stringProp name="Argument.name">states</stringProp>
            <stringProp name="Argument.value">${basepath}\States.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallet" elementType="Argument">
            <stringProp name="Argument.name">userwallet</stringProp>
            <stringProp name="Argument.value">${basepath}\userwallettransaction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="erroruserwallet" elementType="Argument">
            <stringProp name="Argument.name">erroruserwallet</stringProp>
            <stringProp name="Argument.value">${basepath}\erroruserwallettransaction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetExchangeRate" elementType="Argument">
            <stringProp name="Argument.name">GetExchangeRate</stringProp>
            <stringProp name="Argument.value">${basepath}\Getexchangerate.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Advprofile" elementType="Argument">
            <stringProp name="Argument.name">Advprofile</stringProp>
            <stringProp name="Argument.value">${basepath}\Advprofile.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fund" elementType="Argument">
            <stringProp name="Argument.name">fund</stringProp>
            <stringProp name="Argument.value">${basepath}\fund.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallettest" elementType="Argument">
            <stringProp name="Argument.name">userwallettest</stringProp>
            <stringProp name="Argument.value">${basepath}\userwallettransactionfilters.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filterinput" elementType="Argument">
            <stringProp name="Argument.name">filterinput</stringProp>
            <stringProp name="Argument.value">${basepath}\filterinput.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallettest" elementType="Argument">
            <stringProp name="Argument.name">userwallettest</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs\userwallettransaction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="mfh" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BeneficiaryCompanyLinkedBankId" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyLinkedBankId</stringProp>
            <stringProp name="Argument.value">fb8bd35a6d4d46d18a5142ba9af43f73</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
            <stringProp name="Argument.value">88542</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="companywallet" elementType="Argument">
            <stringProp name="Argument.name">companywallet</stringProp>
            <stringProp name="Argument.value">TestCompanyWallet7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Country" elementType="Argument">
            <stringProp name="Argument.name">Country</stringProp>
            <stringProp name="Argument.value">US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Currency" elementType="Argument">
            <stringProp name="Argument.name">Currency</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicFirstName" elementType="Argument">
            <stringProp name="Argument.name">DynamicFirstName</stringProp>
            <stringProp name="Argument.value">CheckDyn1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicLastName" elementType="Argument">
            <stringProp name="Argument.name">DynamicLastName</stringProp>
            <stringProp name="Argument.value">test27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="errorMessage" elementType="Argument">
            <stringProp name="Argument.name">errorMessage</stringProp>
            <stringProp name="Argument.value">Rapid card fetched</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerPaymentCurrency" elementType="Argument">
            <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerProgramID" elementType="Argument">
            <stringProp name="Argument.name">IssuerProgramID</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerWalletID" elementType="Argument">
            <stringProp name="Argument.name">IssuerWalletID</stringProp>
            <stringProp name="Argument.value">86224</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankID" elementType="Argument">
            <stringProp name="Argument.name">linkbankID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankIDACH" elementType="Argument">
            <stringProp name="Argument.name">linkbankIDACH</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newcompany" elementType="Argument">
            <stringProp name="Argument.name">newcompany</stringProp>
            <stringProp name="Argument.value">mfhconn@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newuser" elementType="Argument">
            <stringProp name="Argument.name">newuser</stringProp>
            <stringProp name="Argument.value">mfhconnuser@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_ccn" elementType="Argument">
            <stringProp name="Argument.name">nlv_ccn</stringProp>
            <stringProp name="Argument.value">8.88878E+15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_cvv" elementType="Argument">
            <stringProp name="Argument.name">nlv_cvv</stringProp>
            <stringProp name="Argument.value">111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramId" elementType="Argument">
            <stringProp name="Argument.name">ProgramId</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Rapidcardtoken" elementType="Argument">
            <stringProp name="Argument.name">Rapidcardtoken</stringProp>
            <stringProp name="Argument.value">685AF91EBA2A443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecipientEmail" elementType="Argument">
            <stringProp name="Argument.name">RecipientEmail</stringProp>
            <stringProp name="Argument.value">mfhdynuser@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SKU" elementType="Argument">
            <stringProp name="Argument.name">SKU</stringProp>
            <stringProp name="Argument.value">U768149</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">U935268</stringProp>
          </elementProp>
          <elementProp name="TransactionId" elementType="Argument">
            <stringProp name="Argument.name">TransactionId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">http://xapidev.xtrm.com/API/v4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLinkedId" elementType="Argument">
            <stringProp name="Argument.name">userLinkedId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPAT" elementType="Argument">
            <stringProp name="Argument.name">userPAT</stringProp>
            <stringProp name="Argument.value">PAT22139023</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallet" elementType="Argument">
            <stringProp name="Argument.name">userwallet</stringProp>
            <stringProp name="Argument.value">TestCreatewalletAI7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserWalletID" elementType="Argument">
            <stringProp name="Argument.name">UserWalletID</stringProp>
            <stringProp name="Argument.value">83084</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WalletCurrency" elementType="Argument">
            <stringProp name="Argument.name">WalletCurrency</stringProp>
            <stringProp name="Argument.value">NZD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="walletname" elementType="Argument">
            <stringProp name="Argument.name">walletname</stringProp>
            <stringProp name="Argument.value">TestBenCompanyWallet7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_account" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_account</stringProp>
            <stringProp name="Argument.value">SPN2190501</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_wallet_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_wallet_id</stringProp>
            <stringProp name="Argument.value">86224</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_authorization_endpoint" elementType="Argument">
            <stringProp name="Argument.name">xtrm_authorization_endpoint</stringProp>
            <stringProp name="Argument.value">https://xapidev.xtrm.com/v4/oAuth/token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_company" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_company</stringProp>
            <stringProp name="Argument.value">SPN2293212</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_personal" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
            <stringProp name="Argument.value">PAT1986818</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_test_transaction_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_test_transaction_id</stringProp>
            <stringProp name="Argument.value">69203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basepath_sandbox" elementType="Argument">
            <stringProp name="Argument.name">basepath_sandbox</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs_sandbox</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basepath" elementType="Argument">
            <stringProp name="Argument.name">basepath</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AssertionDir" elementType="Argument">
            <stringProp name="Argument.name">AssertionDir</stringProp>
            <stringProp name="Argument.value">${baseDir}\Assertions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scriptpath" elementType="Argument">
            <stringProp name="Argument.name">scriptpath</stringProp>
            <stringProp name="Argument.value">${baseDir}\script.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLinkedIdUSD" elementType="Argument">
            <stringProp name="Argument.name">userLinkedIdUSD</stringProp>
            <stringProp name="Argument.value">9043acf0cd154668a0fc96e91636d1e1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartUTC" elementType="Argument">
            <stringProp name="Argument.name">StartUTC</stringProp>
            <stringProp name="Argument.value">06/06/22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndUTC" elementType="Argument">
            <stringProp name="Argument.name">EndUTC</stringProp>
            <stringProp name="Argument.value">06/28/22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="CB" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">http://xapidev.xtrm.com/API/v4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_authorization_endpoint" elementType="Argument">
            <stringProp name="Argument.name">xtrm_authorization_endpoint</stringProp>
            <stringProp name="Argument.value">https://xapidev.xtrm.com/v4/oAuth/token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_secret" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_secret</stringProp>
            <stringProp name="Argument.value">L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_refresh_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_refresh_token</stringProp>
            <stringProp name="Argument.value">a738ae6ffebc4d2a9004c9c24499a1a5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_token</stringProp>
            <stringProp name="Argument.value">KUkku8xy2nEKUXE/wcuOSyOwpRZ4/lnAkqTuo4PBXsi1Qjkslb...</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Non US-variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BeneficiaryCompanyLinkedBankId" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyLinkedBankId</stringProp>
            <stringProp name="Argument.value">b18432ef2b6349d286ab25397e975f87</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
            <stringProp name="Argument.value">84893</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardToken" elementType="Argument">
            <stringProp name="Argument.name">CardToken</stringProp>
            <stringProp name="Argument.value">1F5E209CF3DE4CD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardTokenCompany" elementType="Argument">
            <stringProp name="Argument.name">CardTokenCompany</stringProp>
            <stringProp name="Argument.value">7290AEE485B9462</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="companywallet" elementType="Argument">
            <stringProp name="Argument.name">companywallet</stringProp>
            <stringProp name="Argument.value">TestCompanyWallet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Country" elementType="Argument">
            <stringProp name="Argument.name">Country</stringProp>
            <stringProp name="Argument.value">nonUS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Currency" elementType="Argument">
            <stringProp name="Argument.name">Currency</stringProp>
            <stringProp name="Argument.value">GBP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicFirstName" elementType="Argument">
            <stringProp name="Argument.name">DynamicFirstName</stringProp>
            <stringProp name="Argument.value">CheckDyn</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicLastName" elementType="Argument">
            <stringProp name="Argument.name">DynamicLastName</stringProp>
            <stringProp name="Argument.value">test1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="errorMessage" elementType="Argument">
            <stringProp name="Argument.name">errorMessage</stringProp>
            <stringProp name="Argument.value">Rapid card fetched</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerPaymentCurrency" elementType="Argument">
            <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
            <stringProp name="Argument.value">GBP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerProgramID" elementType="Argument">
            <stringProp name="Argument.name">IssuerProgramID</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerWalletID" elementType="Argument">
            <stringProp name="Argument.name">IssuerWalletID</stringProp>
            <stringProp name="Argument.value">84366</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankID" elementType="Argument">
            <stringProp name="Argument.name">linkbankID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankIDACH" elementType="Argument">
            <stringProp name="Argument.name">linkbankIDACH</stringProp>
            <stringProp name="Argument.value">5fd4e9d05a12401ea39add438f0f6d9e</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newuser" elementType="Argument">
            <stringProp name="Argument.name">newuser</stringProp>
            <stringProp name="Argument.value">TestUser1api111@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_ccn" elementType="Argument">
            <stringProp name="Argument.name">nlv_ccn</stringProp>
            <stringProp name="Argument.value">8.88878E+15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_cvv" elementType="Argument">
            <stringProp name="Argument.name">nlv_cvv</stringProp>
            <stringProp name="Argument.value">111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramId" elementType="Argument">
            <stringProp name="Argument.name">ProgramId</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Rapidcardtoken" elementType="Argument">
            <stringProp name="Argument.name">Rapidcardtoken</stringProp>
            <stringProp name="Argument.value">685AF91EBA2A443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecipientEmail" elementType="Argument">
            <stringProp name="Argument.name">RecipientEmail</stringProp>
            <stringProp name="Argument.value">dynuser1@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SKU" elementType="Argument">
            <stringProp name="Argument.name">SKU</stringProp>
            <stringProp name="Argument.value">U173016</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TransactionId" elementType="Argument">
            <stringProp name="Argument.name">TransactionId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">https://xapidev.xtrm.com/API/v4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLinkedId" elementType="Argument">
            <stringProp name="Argument.name">userLinkedId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPAT" elementType="Argument">
            <stringProp name="Argument.name">userPAT</stringProp>
            <stringProp name="Argument.value">PAT22139023</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallet" elementType="Argument">
            <stringProp name="Argument.name">userwallet</stringProp>
            <stringProp name="Argument.value">TestCreatewalletAI2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserWalletID" elementType="Argument">
            <stringProp name="Argument.name">UserWalletID</stringProp>
            <stringProp name="Argument.value">84028</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="walletname" elementType="Argument">
            <stringProp name="Argument.name">walletname</stringProp>
            <stringProp name="Argument.value">TestBenCompanyWallet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_account" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_account</stringProp>
            <stringProp name="Argument.value">SPN1987678</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_wallet_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_wallet_id</stringProp>
            <stringProp name="Argument.value">111203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_authorization_endpoint" elementType="Argument">
            <stringProp name="Argument.name">xtrm_authorization_endpoint</stringProp>
            <stringProp name="Argument.value">https://xapidev.xtrm.com/oAuth/token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_company" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_company</stringProp>
            <stringProp name="Argument.value">SPN1986817</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_personal" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
            <stringProp name="Argument.value">PAT1986818</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_id</stringProp>
            <stringProp name="Argument.value">1910107_API_User</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_secret" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_secret</stringProp>
            <stringProp name="Argument.value">L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_refresh_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_refresh_token</stringProp>
            <stringProp name="Argument.value">a738ae6ffebc4d2a9004c9c24499a1a5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_test_transaction_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_test_transaction_id</stringProp>
            <stringProp name="Argument.value">69203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_token</stringProp>
            <stringProp name="Argument.value">KUkku8xy2nEKUXE/wcuOSyOwpRZ4/lnAkqTuo4PBXsi1Qjkslb...</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="US-variables- sandbox" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BeneficiaryCompanyLinkedBankId" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyLinkedBankId</stringProp>
            <stringProp name="Argument.value">f74d3b2566e142b4b577bb2cbc3a4101</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
            <stringProp name="Argument.value">112654</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardToken" elementType="Argument">
            <stringProp name="Argument.name">CardToken</stringProp>
            <stringProp name="Argument.value">1F5E209CF3DE4CD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardTokenCompany" elementType="Argument">
            <stringProp name="Argument.name">CardTokenCompany</stringProp>
            <stringProp name="Argument.value">7290AEE485B9462</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="companywallet" elementType="Argument">
            <stringProp name="Argument.name">companywallet</stringProp>
            <stringProp name="Argument.value">TestCompanyWallet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Country" elementType="Argument">
            <stringProp name="Argument.name">Country</stringProp>
            <stringProp name="Argument.value">US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Currency" elementType="Argument">
            <stringProp name="Argument.name">Currency</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicFirstName" elementType="Argument">
            <stringProp name="Argument.name">DynamicFirstName</stringProp>
            <stringProp name="Argument.value">CheckDyn</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DynamicLastName" elementType="Argument">
            <stringProp name="Argument.name">DynamicLastName</stringProp>
            <stringProp name="Argument.value">test2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="errorMessage" elementType="Argument">
            <stringProp name="Argument.name">errorMessage</stringProp>
            <stringProp name="Argument.value">Rapid card fetched</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerPaymentCurrency" elementType="Argument">
            <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerProgramID" elementType="Argument">
            <stringProp name="Argument.name">IssuerProgramID</stringProp>
            <stringProp name="Argument.value">4871</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuerWalletID" elementType="Argument">
            <stringProp name="Argument.name">IssuerWalletID</stringProp>
            <stringProp name="Argument.value">107884</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankID" elementType="Argument">
            <stringProp name="Argument.name">linkbankID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkbankIDACH" elementType="Argument">
            <stringProp name="Argument.name">linkbankIDACH</stringProp>
            <stringProp name="Argument.value">5fd4e9d05a12401ea39add438f0f6d9e</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newcompany" elementType="Argument">
            <stringProp name="Argument.name">newcompany</stringProp>
            <stringProp name="Argument.value">testbencomp77@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newuser" elementType="Argument">
            <stringProp name="Argument.name">newuser</stringProp>
            <stringProp name="Argument.value">testbenuser77@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_ccn" elementType="Argument">
            <stringProp name="Argument.name">nlv_ccn</stringProp>
            <stringProp name="Argument.value">8.88878E+15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nlv_cvv" elementType="Argument">
            <stringProp name="Argument.name">nlv_cvv</stringProp>
            <stringProp name="Argument.value">111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramId" elementType="Argument">
            <stringProp name="Argument.name">ProgramId</stringProp>
            <stringProp name="Argument.value">2314</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Rapidcardtoken" elementType="Argument">
            <stringProp name="Argument.name">Rapidcardtoken</stringProp>
            <stringProp name="Argument.value">685AF91EBA2A443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecipientEmail" elementType="Argument">
            <stringProp name="Argument.name">RecipientEmail</stringProp>
            <stringProp name="Argument.value">dynuser2@mailinator.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SKU" elementType="Argument">
            <stringProp name="Argument.name">SKU</stringProp>
            <stringProp name="Argument.value">U935268</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TransactionId" elementType="Argument">
            <stringProp name="Argument.name">TransactionId</stringProp>
            <stringProp name="Argument.value">082cb3d94f9e4559b377feb774686a04</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">http://xapisandbox.xtrm.com/API/v4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLinkedId" elementType="Argument">
            <stringProp name="Argument.name">userLinkedId</stringProp>
            <stringProp name="Argument.value">b875fbfd5985401eac47eb7e4f2522f2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">b875fbfd5985401eac47eb7e4f2522f2</stringProp>
          </elementProp>
          <elementProp name="userPAT" elementType="Argument">
            <stringProp name="Argument.name">userPAT</stringProp>
            <stringProp name="Argument.value">PAT22139023</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallet" elementType="Argument">
            <stringProp name="Argument.name">userwallet</stringProp>
            <stringProp name="Argument.value">TestCreatewalletAI2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserWalletID" elementType="Argument">
            <stringProp name="Argument.name">UserWalletID</stringProp>
            <stringProp name="Argument.value">83084</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WalletCurrency" elementType="Argument">
            <stringProp name="Argument.name">WalletCurrency</stringProp>
            <stringProp name="Argument.value">NZD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="walletname" elementType="Argument">
            <stringProp name="Argument.name">walletname</stringProp>
            <stringProp name="Argument.value">TestBenCompanyWallet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_account" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_account</stringProp>
            <stringProp name="Argument.value">SPN19134662</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_api_wallet_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_api_wallet_id</stringProp>
            <stringProp name="Argument.value">111203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_authorization_endpoint" elementType="Argument">
            <stringProp name="Argument.name">xtrm_authorization_endpoint</stringProp>
            <stringProp name="Argument.value">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_company" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_company</stringProp>
            <stringProp name="Argument.value">SPN19134657</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_ben_personal" elementType="Argument">
            <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
            <stringProp name="Argument.value">PAT21138887</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_id</stringProp>
            <stringProp name="Argument.value">1910107_API_User</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_client_secret" elementType="Argument">
            <stringProp name="Argument.name">xtrm_client_secret</stringProp>
            <stringProp name="Argument.value">L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_refresh_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_refresh_token</stringProp>
            <stringProp name="Argument.value">a738ae6ffebc4d2a9004c9c24499a1a5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_test_transaction_id" elementType="Argument">
            <stringProp name="Argument.name">xtrm_test_transaction_id</stringProp>
            <stringProp name="Argument.value">69203</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xtrm_token" elementType="Argument">
            <stringProp name="Argument.name">xtrm_token</stringProp>
            <stringProp name="Argument.value">KUkku8xy2nEKUXE/wcuOSyOwpRZ4/lnAkqTuo4PBXsi1Qjkslb...</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basepath_sandbox" elementType="Argument">
            <stringProp name="Argument.name">basepath_sandbox</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs_sandbox</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basepath" elementType="Argument">
            <stringProp name="Argument.name">basepath</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AssertionDir" elementType="Argument">
            <stringProp name="Argument.name">AssertionDir</stringProp>
            <stringProp name="Argument.value">${baseDir}\Assertions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scriptpath" elementType="Argument">
            <stringProp name="Argument.name">scriptpath</stringProp>
            <stringProp name="Argument.value">${baseDir}\script.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartUTC" elementType="Argument">
            <stringProp name="Argument.name">StartUTC</stringProp>
            <stringProp name="Argument.value">06/06/22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndUTC" elementType="Argument">
            <stringProp name="Argument.name">EndUTC</stringProp>
            <stringProp name="Argument.value">06/28/22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Error_User Defined Variables_Sandbox" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BeneficiaryWallets" elementType="Argument">
            <stringProp name="Argument.name">BeneficiaryWallets</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\BeneficiaryWallets.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CompanyWallets" elementType="Argument">
            <stringProp name="Argument.name">CompanyWallets</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\CompanyWallets.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CompanyWalletscount" elementType="Argument">
            <stringProp name="Argument.name">CompanyWalletscount</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="companywithdraw" elementType="Argument">
            <stringProp name="Argument.name">companywithdraw</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Beneficiary company withdraw funds.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="count_transfer company" elementType="Argument">
            <stringProp name="Argument.name">count_transfer company</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="count_transferuser" elementType="Argument">
            <stringProp name="Argument.name">count_transferuser</stringProp>
            <stringProp name="Argument.value">24</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countbenwithdraw" elementType="Argument">
            <stringProp name="Argument.name">countbenwithdraw</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countlinkcard" elementType="Argument">
            <stringProp name="Argument.name">countlinkcard</stringProp>
            <stringProp name="Argument.value">21</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counttax" elementType="Argument">
            <stringProp name="Argument.name">counttax</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countuserwithdraw" elementType="Argument">
            <stringProp name="Argument.name">countuserwithdraw</stringProp>
            <stringProp name="Argument.value">13</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createuser" elementType="Argument">
            <stringProp name="Argument.name">createuser</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\CreateUser.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createusercount" elementType="Argument">
            <stringProp name="Argument.name">createusercount</stringProp>
            <stringProp name="Argument.value">19</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Linkbank" elementType="Argument">
            <stringProp name="Argument.name">Linkbank</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Linkbank.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LinkbankACH" elementType="Argument">
            <stringProp name="Argument.name">LinkbankACH</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\LinkbankACH.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LinkbankACHcount" elementType="Argument">
            <stringProp name="Argument.name">LinkbankACHcount</stringProp>
            <stringProp name="Argument.value">13</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Linkbankcount" elementType="Argument">
            <stringProp name="Argument.name">Linkbankcount</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linkcard" elementType="Argument">
            <stringProp name="Argument.name">linkcard</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Linkcard.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="program" elementType="Argument">
            <stringProp name="Argument.name">program</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Programs.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Programscount" elementType="Argument">
            <stringProp name="Argument.name">Programscount</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="reportPath" elementType="Argument">
            <stringProp name="Argument.name">reportPath</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\resport.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tax" elementType="Argument">
            <stringProp name="Argument.name">tax</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\taxinformation.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transferfund" elementType="Argument">
            <stringProp name="Argument.name">transferfund</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Transfer funds.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TransferFundtoCompany" elementType="Argument">
            <stringProp name="Argument.name">TransferFundtoCompany</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Tranfer Fund to Company.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateUser" elementType="Argument">
            <stringProp name="Argument.name">UpdateUser</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\UpdateUser.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateUsercount" elementType="Argument">
            <stringProp name="Argument.name">UpdateUsercount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">https://xapisandbox.xtrm.com/API/v4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwithdraw" elementType="Argument">
            <stringProp name="Argument.name">userwithdraw</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\User Withdraw Fund.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Wallets" elementType="Argument">
            <stringProp name="Argument.name">Wallets</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\UserWallets.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Walletscount" elementType="Argument">
            <stringProp name="Argument.name">Walletscount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ValidateIBAN" elementType="Argument">
            <stringProp name="Argument.name">ValidateIBAN</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\ValidateIBAN.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="states" elementType="Argument">
            <stringProp name="Argument.name">states</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\States.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetExchangeRate" elementType="Argument">
            <stringProp name="Argument.name">GetExchangeRate</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Getexchangerate.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Advprofile" elementType="Argument">
            <stringProp name="Argument.name">Advprofile</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\Advprofile.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fund" elementType="Argument">
            <stringProp name="Argument.name">fund</stringProp>
            <stringProp name="Argument.value">${basepath_sandbox}\fund.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ValidateIBANCount" elementType="Argument">
            <stringProp name="Argument.name">ValidateIBANCount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchBankByNationalIDCount" elementType="Argument">
            <stringProp name="Argument.name">SearchBankByNationalIDCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchBankbyBICCount" elementType="Argument">
            <stringProp name="Argument.name">SearchBankbyBICCount</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchBankByNationalID" elementType="Argument">
            <stringProp name="Argument.name">SearchBankByNationalID</stringProp>
            <stringProp name="Argument.value">${basepath}\SearchBankByNationalID.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchBankbyBIC" elementType="Argument">
            <stringProp name="Argument.name">SearchBankbyBIC</stringProp>
            <stringProp name="Argument.value">${basepath}\SearchBankbyBIC.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="count_userwallet" elementType="Argument">
            <stringProp name="Argument.name">count_userwallet</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="erroruserwallet" elementType="Argument">
            <stringProp name="Argument.name">erroruserwallet</stringProp>
            <stringProp name="Argument.value">${basepath}\erroruserwallettransaction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userwallettest" elementType="Argument">
            <stringProp name="Argument.name">userwallettest</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs\userwallettransaction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filterinput" elementType="Argument">
            <stringProp name="Argument.name">filterinput</stringProp>
            <stringProp name="Argument.value">${baseDir}\API_inputs\filterinput.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Valid cases" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SetNbReq" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.xtrm.webapi.CommonFunctions;

vars.put(&quot;count_transfer company&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;TransferFundtoCompany&quot;))));
vars.put(&quot;count_transferuser&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;transferfund&quot;))));
vars.put(&quot;countbenwithdraw&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;companywithdraw&quot;))));
vars.put(&quot;countlinkcard&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;linkcard&quot;))));
vars.put(&quot;counttax&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;tax&quot;))));
vars.put(&quot;countuserwithdraw&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;userwithdraw&quot;))));
vars.put(&quot;createusercount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;createuser&quot;))));
vars.put(&quot;LinkbankACHcount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;LinkbankACH&quot;))));
vars.put(&quot;Linkbankcount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;Linkbank&quot;))));
vars.put(&quot;Programscount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;program&quot;))));
vars.put(&quot;UpdateUsercount test&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;UpdateUser&quot;))));
vars.put(&quot;Walletscount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;Wallets&quot;))));
vars.put(&quot;SearchBankByNationalIDCount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;SearchBankByNationalID&quot;))));
vars.put(&quot;SearchBankbyBICCount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;SearchBankbyBIC&quot;))));
vars.put(&quot;ValidateIBANCount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;ValidateIBAN&quot;))));
vars.put(&quot;count_States&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;states&quot;))));
vars.put(&quot;count_userwallet&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;erroruserwallet&quot;))));
vars.put(&quot;countexchangerate&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;GetExchangeRate&quot;))));
vars.put(&quot;countAdvprofile&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;Advprofile&quot;))));
vars.put(&quot;countfund&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;fund&quot;))));
vars.put(&quot;CompanyWalletscount&quot;,String.valueOf(CommonFunctions.countLinesInFile(vars.get(&quot;CompanyWallets&quot;))));

</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-sandbox" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=password&amp;client_id=1930872_API_User&amp;client_secret=8vSeWK1Ypz2H3NJBQM9lhDg5J2N7DkwOn3j0xhIpM3M=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">grant_type=password&amp;client_id=1930872_API_User&amp;client_secret=8vSeWK1Ypz2H3NJBQM9lhDg5J2N7DkwOn3j0xhIpM3M=</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
    System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="mfh" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-SPN1987678" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Positive Cases" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary User" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;createUser&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot; : &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;legalFirstName&quot;: &quot;mfhconnuser&quot;,&#xd;
            &quot;legalLastName&quot;: &quot;api1&quot;,&#xd;
            &quot;emailAddress&quot;: &quot;${newuser}&quot;,&#xd;
            &quot;emailNotification&quot; :&quot;true&quot;,&#xd;
            &quot;mobilePhone&quot;: &quot;8056&quot;,&#xd;
            &quot;taxId&quot;: &quot;1&quot;,&#xd;
            &quot;dateOfBirth&quot;: {&#xd;
                &quot;day&quot;: &quot;13&quot;,&#xd;
                &quot;month&quot;: &quot;8&quot;,&#xd;
                &quot;year&quot;: &quot;1982&quot;&#xd;
            },&#xd;
            &quot;address&quot;: {&#xd;
                &quot;addressLine1&quot;: &quot;Testaddress1&quot;,&#xd;
                &quot;addressLine2&quot;: &quot;Testaddress2&quot;,&#xd;
                &quot;aptSuitNum&quot;: &quot;4/52&quot;,&#xd;
                &quot;city&quot;: &quot;Chennai&quot;,&#xd;
                &quot;country&quot;: &quot;India&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;IN&quot;,&#xd;
                &quot;postalCode&quot;: &quot;600089&quot;,&#xd;
                &quot;region&quot;: &quot;Tamil Nadu&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CreateUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userPAT</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;UserID&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update User" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;updateUser&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot; : &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userId&quot;:&quot;${userPAT}&quot;,&#xd;
            &quot;legalFirstName&quot;: &quot;mfhconnuser1&quot;,&#xd;
            &quot;legalLastName&quot;: &quot;add1_edit&quot;,&#xd;
            &quot;mobilePhone&quot;: &quot;8056&quot;,&#xd;
            &quot;taxId&quot;: &quot;1&quot;,&#xd;
            &quot;dateOfBirth&quot;: {&#xd;
                &quot;day&quot;: &quot;13&quot;,&#xd;
                &quot;month&quot;: &quot;8&quot;,&#xd;
                &quot;year&quot;: &quot;1982&quot;&#xd;
            },&#xd;
            &quot;address&quot;: {&#xd;
                &quot;addressLine1&quot;: &quot;Testaddress1_edited&quot;,&#xd;
                &quot;addressLine2&quot;: &quot;Testaddress2_edited&quot;,&#xd;
                &quot;aptSuitNum&quot;: &quot;4/52&quot;,&#xd;
                &quot;city&quot;: &quot;Chennai&quot;,&#xd;
                &quot;country&quot;: &quot;India&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;IN&quot;,&#xd;
                &quot;postalCode&quot;: &quot;600089&quot;,&#xd;
                &quot;region&quot;: &quot;Tamil Nadu&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/UpdateUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Personal Beneficiaries" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;getPersonalBeneficiaries&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;pagination&quot;: {&#xd;
        &quot;recordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;recordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/GetPersonalBeneficiaries</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check User Exist" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;checkUserExist&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;email&quot;:&quot;mfhconnuser1@mailinator.com&quot;&#xd;
      //${newuser}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/CheckUserExist</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">AccountIdentityLevel</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;AccountIdentityLevel&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Basic&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String actuvalidentity=vars.get(&quot;AccountIdentityLevel&quot;);
 // response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
 //System.out.println(actuvalidentity);
 	    
   if(actuvalidentity.equals(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected AccountIdentityLevel not matched&quot;;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary Company" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Identification Type" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetIdentificationType</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Type" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;CompanyType&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactCompanyType</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get NAICS" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetNaics</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get  Beneficiaries" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetBeneficiaries&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/GetBeneficiaries</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Beneficiary Company" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CreateBeneficiary&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BeneficiaryCompanyName&quot;: &quot;mfhconn&quot;,&#xd;
            &quot;WebAddress&quot;: &quot;xtrm.com&quot;,&#xd;
            &quot;BeneficiaryCompanyAdminDetails&quot;: {&#xd;
                &quot;AdminEmail&quot;: &quot;${newcompany}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;AdminFirstName&quot;: &quot;2&quot;,&#xd;
                &quot;AdminLastName&quot;: &quot;s&quot;,&#xd;
                &quot;AdminMobileNumber&quot;: &quot;12345679&quot;,&#xd;
                &quot;City&quot;: &quot;Florida&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;Region&quot;: &quot;Kansas&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;123456&quot;&#xd;
            },&#xd;
            &quot;SalesProgramDetails&quot;: {&#xd;
                &quot;PartnerAccountManager&quot;: &quot;&quot;,&#xd;
                &quot;SalesforcePartnerID&quot;: &quot;&quot;,&#xd;
                &quot;OtherPartnerID&quot;: &quot;&quot;,&#xd;
                &quot;Region&quot;: &quot;&quot;,&#xd;
                &quot;PartnerLevel&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/CreateBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryID&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Beneficiary Company" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;UpdateBeneficiary&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BeneficiaryID&quot;:&quot;SPN22140644&quot;,&#xd;
            //${BeneficiaryID}&quot;,&#xd;
            &quot;BeneficiaryCompanyName&quot;: &quot;mfhconn edit&quot;,&#xd;
            &quot;WebAddress&quot;: &quot;xtrm.com&quot;,&#xd;
            &quot;BeneficiaryCompanyAdminDetails&quot;: {&#xd;
                &quot;AdminEmail&quot;: &quot;${newcompany}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;AdminFirstName&quot;: &quot;xi&quot;,&#xd;
                &quot;AdminLastName&quot;: &quot;Sua&quot;,&#xd;
                &quot;AdminMobileNumber&quot;: &quot;12345679&quot;,&#xd;
                &quot;City&quot;: &quot;Florida&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;US&quot;,&#xd;
                &quot;Region&quot;: &quot;WA&quot;,&#xd;
                &quot;PostalCode&quot;: &quot;123456&quot;&#xd;
            },&#xd;
            &quot;SalesProgramDetails&quot;: {&#xd;
                &quot;PartnerAccountManager&quot;: &quot;&quot;,&#xd;
                &quot;SalesforcePartnerID&quot;: &quot;&quot;,&#xd;
                &quot;OtherPartnerID&quot;: &quot;&quot;,&#xd;
                &quot;Region&quot;: &quot;&quot;,&#xd;
                &quot;PartnerLevel&quot;: &quot;&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/UpdateBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Beneficiary Exist" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CheckBeneficiaryExist&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;CompanyName&quot;: &quot;mfhconn edit&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/CheckBeneficiaryExist</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Gift Cards" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get digital gift cards (by currency)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetGiftCards&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/GiftCard/GetDigitalGiftCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get digital gift card details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GetGiftCards&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;SKU&quot;: &quot;${SKU}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/GiftCard/GetGiftCardDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Prepaid Gift Cards" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GetPrepaidCards&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;Currency&quot;: &quot;USD&quot; ,&#xd;
         &quot;Pagination&quot;: {&#xd;
            &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
            &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
          }&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/GiftCard/GetPrepaidCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Prepaid Gift Cards Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GetPrepaidCards&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;SKU&quot;: &quot;U677579&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/GiftCard/GetPrepaidCardDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Connected Fund Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GetConnectedFundRequestDetails&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;BeneficiaryAccountNumber&quot;: &quot;SPN22139190&quot;,&#xd;
      &quot;PaymentType&quot;: &quot;ALL&quot;,&#xd;
      &quot;FromDate&quot;: &quot;08/1/2021&quot;,&#xd;
      &quot;ToDate&quot;: &quot;02/1/2022&quot;,&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/GetConnectedCompanyFundRequest</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Methods" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Payment Methods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Payment/GetPaymentMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Beneficiary Company Payment Methods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Payment/GetBeneficiaryCompanyPaymentMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch User Payment Methods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Payment/GetUserPaymentMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Wallets" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ACH Debit" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1122334455&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1122334455&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;Amount&quot;: &quot;20&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryIdACH}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete a beneficiary’s linked bank ACH" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;DeleteBankBeneficiary&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryIdACH}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/DeleteBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch User Wallet Transactions by Remitter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactionsByRemitter&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;RemitterAccountNo&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionsByRemitter</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;Amount&quot;: &quot;20&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryIdACH}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund User Wallet Using Credit Card" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;FundUserWalletUsingCreditCardRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;PaymentDetails&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;AccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
        &quot;Amount&quot;: &quot;100&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;UserWalletID&quot;: &quot;${UserWalletID}&quot;&#xd;
      },&#xd;
      &quot;PayerInformation&quot;: {&#xd;
        &quot;FirstName&quot;: &quot;TestFundUser&quot;,&#xd;
        &quot;LastName&quot;: &quot;Wallet1&quot;&#xd;
      },&#xd;
      &quot;PayerBillingAddress&quot;:{&#xd;
       &quot;Address1&quot;:&quot;Address input&quot;,&#xd;
       &quot;City&quot;:&quot;Kansas&quot;,&#xd;
       &quot;State&quot;:&quot;Kansas&quot;,&#xd;
       &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
       &quot;PostalCode&quot;:&quot;900001&quot;&#xd;
      },&#xd;
      &quot;CreditCardDetails&quot;:{&#xd;
       &quot;ExpireMonth&quot;:&quot;08&quot;,&#xd;
       &quot;ExpireYear&quot;:&quot;2023&quot;,&#xd;
       &quot;CreditCardNumber&quot;:&quot;9401102999999998&quot;,&#xd;
       &quot;CreditCardType&quot;:&quot;Visa Card&quot;,&#xd;
       &quot;CVV&quot;:&quot;123&quot;&#xd;
      }&#xd;
       &#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/FundUserWalletUsingCreditCard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Company Wallet Using Credit Card" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;FundCompanyWalletUsingCreditCardRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;PaymentDetails&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
												&#xd;
        &quot;Amount&quot;: &quot;10&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;&#xd;
      },&#xd;
      &quot;PayerInformation&quot;: {&#xd;
        &quot;FirstName&quot;: &quot;TestFundUser&quot;,&#xd;
        &quot;LastName&quot;: &quot;Wallet1&quot;&#xd;
      },&#xd;
      &quot;PayerBillingAddress&quot;:{&#xd;
       &quot;Address1&quot;:&quot;Address input&quot;,&#xd;
       &quot;City&quot;:&quot;Kansas&quot;,&#xd;
       &quot;State&quot;:&quot;Kansas&quot;,&#xd;
       &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
       &quot;PostalCode&quot;:&quot;900001&quot;&#xd;
      },&#xd;
      &quot;CreditCardDetails&quot;:{&#xd;
       &quot;ExpireMonth&quot;:&quot;08&quot;,&#xd;
       &quot;ExpireYear&quot;:&quot;2023&quot;,&#xd;
       &quot;CreditCardNumber&quot;:&quot;9401102999999998&quot;,&#xd;
       &quot;CreditCardType&quot;:&quot;Visa Card&quot;,&#xd;
       &quot;CVV&quot;:&quot;123&quot;&#xd;
      }&#xd;
       &#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/FundCompanyWalletUsingCreditCard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create &amp; update user wallet " enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateUserWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
        &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
        &quot;WalletName&quot;: &quot;${userwallet}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${WalletCurrency}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateUserWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">WalletIDUser</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;WalletID&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update User Wallet" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;UpdateUserWallet&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${WalletIDUser}&quot;,&#xd;
        &quot;WalletName&quot;: &quot;${userwallet}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/UpdateUserWallet</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create &amp; update Company wallet " enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Company Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateCompanyWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
    	&quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
    	&quot;WalletName&quot;: &quot;${companywallet}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;Standard&quot;,&#xd;
        &quot;AllowAccessAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">WalletIDCompany</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;WalletID&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Company Wallet" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;UpdateCompanyWallet&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${WalletIDCompany}&quot;,&#xd;
        &quot;WalletName&quot;: &quot;${companywallet}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/updatecompanywallet</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create &amp; update Beneficiary wallet " enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Company Wallet Accrual" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateCompanyWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
    	&quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
    	&quot;WalletName&quot;: &quot;TestCompanyWallet&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;Accrual&quot;,&#xd;
        &quot;AllowAccessAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Beneficiary Company Wallet Accrual" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateBeneficiaryCompanyWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
    	&quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
        &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    	&quot;WalletName&quot;: &quot;TestBenCompanyWallet&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;Accrual&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateBeneficiaryCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Beneficiary Company Wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateBeneficiaryCompanyWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
    	&quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
        &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    	&quot;WalletName&quot;: &quot;${walletname}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;Standard&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateBeneficiaryCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Beneficiary Company Wallet" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;UpdateBeneficiaryCompanyWallet&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
         &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
        &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    	&quot;WalletName&quot;: &quot;${walletname}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;Standard&quot;,&#xd;
        &quot;WalletID&quot;:&quot;86431&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/updateBeneficiarycompanywallet</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch User Wallet Balance" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletBalance&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
           &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletBalance</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Company Wallets" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanywallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWallets</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Beneficiary Wallets" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;GetBeneficiaryWallets&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_personal}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetBeneficiaryWallets</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch User Wallets" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWallets</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="User wallet transactions" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="userwallet" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${userwallettest}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,StartUTC,EndUTC,TransactionType,SearchParam</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserWallet transactions_${case}" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;${TransactionType}&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;${SearchParam}&quot;&#xd;
       },&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserWallet transactions_${case}_withoutfilter" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Company wallet transactions" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company wallet" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${userwallettest}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,StartUTC,EndUTC,TransactionType,SearchParam,experror</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyWalletTransactions_${case}" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;${TransactionType}&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;${SearchParam}&quot;&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyWalletTransactions_${case}_withoutfilter" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
           &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Fund(Company to User)" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Common end points" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Payment Methods" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Payment/GetUserPaymentMethods</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programs" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetPrograms&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }   &#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Programs/GetPrograms</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Company Wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanywallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWallets&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user wallet transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch the balance of a user’s wallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletBalance&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletBalance</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,            &#xd;
              &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userLinkedId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to User by Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Test Bank transfer Standard&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[{&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;11&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;sirisha1@mailinator.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;${userLinkedId}&quot;,&#xd;
                   &quot;UserPrepaidVisaEmailID&quot;: &quot;sirisha1@mailinator.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction -Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Bank transfer Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Direct to bank Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details -Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;ACH&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
    String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
 	    
   if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should &quot;+exptext+&quot; But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Digital gift card" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using Digital gift card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94505&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Test Digital gift card&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;10&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;${SKU}&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;afexuser1@mailinator.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;afexuser1@mailinator.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;Digital gift card&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
		  response=response.replace(&quot;\&quot;,\&quot;&quot;, &quot;%&quot;);
	String[] splitParameters = response.split(&quot;%&quot;);	
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">PaymentTransactionId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;PaymentTransactionId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction -Digital gift card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Digital Gift Card&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for digital gift card Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - Digital gift card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Digital Gift Card&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should&quot;+exptext+&quot;But received&quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - DGC" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${PaymentTransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String parameters = prev.getResponseDataAsString();
String exptext=&quot;Direct to Digital Gift Card&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;

//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
				  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
    	 if(!bankcode.equals(expcode))
       {
    
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
    }
	 }
      
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Prepaid Virtual Debit Card" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using Prepaid Virtual Debit Card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94503&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Test Prepaid virtual debit card 9.30AM&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;10&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;afexuser1@mailinator.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	  response=response.replace(&quot;\&quot;,\&quot;&quot;, &quot;%&quot;);
	String[] splitParameters = response.split(&quot;%&quot;);	
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">PaymentTransactionId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;PaymentTransactionId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction - Prepaid Virtual Debit Card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Prepaid virtual debit card 9.30AM&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Prepaid virtual debit card Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - Prepaid Virtual Debit Card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String exptext=&quot;Prepaid Virtual Visa or Mastercard&quot;;
String parameters =prev.getResponseDataAsString();
	
	//Checks for response should not contain null values		
	parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
	
	response = response.substring(response.lastIndexOf(&quot;[[&quot;), response.indexOf(&quot;]]&quot;)).replace(&quot;[[&quot;, &quot;&quot;);
 //System.out.println(response);
	 response=response.replace(&quot;\&quot;,\&quot;&quot;, &quot;%&quot;);
		String[] splitParameters = response.split(&quot;%&quot;);	
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		// System.out.println(j+ result);
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  
  //checks based on transfer type
   // System.out.println(response);
  	 String transfertype=response.substring(response.indexOf(&quot;Transfer Type%Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;},{\&quot;Name\&quot;:\&quot;Transaction&quot;)).replace(&quot;Transfer Type%Value\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//.replace(&quot;Transaction Type&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,Value:&quot;, &quot;&quot;)
  	if(!transfertype.contains(exptext) )
  		{
  	  	
  		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
  	}
    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  
      </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - PVC" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${PaymentTransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String parameters = prev.getResponseDataAsString();
String exptext=&quot;Direct to Digital Gift Card&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
 	    

//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
			 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(!transfertype.contains(exptext) )
		{
			 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer AnyPay Individual" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using AnyPay Individual" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94502&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Transfer AnyPay Individual&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;1&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Testcheck&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Checkref&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Florida&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Transfer AnyPay Individual&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;US&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction AnyPay Individual" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Transfer AnyPay Individual&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Individual Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details AnyPay Individual" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Credit&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;Transaction Status&quot;)).replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should &quot;+exptext+&quot; But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">&quot;${Country}&quot;==&quot;US&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer RBT" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">Rapidcardtoken</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts specific to RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Test transfer fund to user rapid pay&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;0.11&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;UK&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;${Rapidcardtoken}&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">PaymentTransactionId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;PaymentTransactionId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction -  RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test transfer fund to user rapid pay&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for RBT Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Bank Transfer - Rapid&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should&quot;+exptext+&quot;But received&quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${PaymentTransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String parameters = prev.getResponseDataAsString();
String exptext=&quot;Bank Transfer - Rapid&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;

//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
    	 if(!bankcode.equals(expcode))
       {
    
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
    }
	 }
      
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
	        }</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Bank Check" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts - Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">userLinkedId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using Bank Check - other than USD" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;84366&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Transfer using check&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;GBP&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;22&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Testcheck&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Checkref&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Florida&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Transfer using check&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;US&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;${userLinkedId}&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                  <stringProp name="TestPlan.comments">${IssuerPaymentCurrency}  ${IssuerWalletID}</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	  response=response.replace(&quot;\&quot;,\&quot;&quot;, &quot;%&quot;);
	String[] splitParameters = response.split(&quot;%&quot;);	
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">PaymentTransactionId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;PaymentTransactionId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Transfer using check&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;5&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Testcheck&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Checkref&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;CA&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Transfer using check&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;US&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;${userLinkedId}&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                  <stringProp name="TestPlan.comments">${IssuerPaymentCurrency}  ${IssuerWalletID}</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	  response=response.replace(&quot;\&quot;,\&quot;&quot;, &quot;%&quot;);
	String[] splitParameters = response.split(&quot;%&quot;);	
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">PaymentTransactionId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;PaymentTransactionId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction - Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
           /*  &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;04/18/2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;04/19/2022&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Transfer&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },*/&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                  <stringProp name="TestPlan.comments">${xtrm_ben_personal}</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to cheque&quot;;
//Fund transfer to cheque&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for cheque Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Check&quot;;
String sErrLog = &quot;&quot;;
String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;Check&quot;;
	
	//Checks for response should not contain null values		
	parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
	
	response = response.substring(response.lastIndexOf(&quot;[[&quot;), response.indexOf(&quot;]]&quot;)).replace(&quot;[[&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;\&quot;},&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		// System.out.println(j+ result);
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  
      


</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details  - Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${PaymentTransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String parameters = prev.getResponseDataAsString();
String exptext=&quot;Check Direct&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;

//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
    	 if(!bankcode.equals(expcode))
       {
    
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
    }
	 }
      
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
	        }</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ref tests" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard- Payment status check" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">userLinkedId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts specific to Standard with payment check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Test Bank transfer Standard&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[{&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;11&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;88f6f02c326d4678badb1ff1851321bf&quot;,&#xd;
                    //${userLinkedId}&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction -Standard with Payment status check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Bank transfer Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Direct to bank Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details -Standard with Payment status check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;WIRE&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expstatus=&quot;Verified&quot;;


        String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
        String transactionStatus=response.substring(response.indexOf(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;),
        		response.indexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
       if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode) &amp;&amp; transactionStatus.contains(expstatus))  {
    	 	 
    	 	    	
    	 	    
     
    	 	    }
    	 	    else
    	 	    {
    	 	transactionId=&quot;&quot;;
		Failure= true ;
    		sErrLog=&quot;Expected Transfertype/Bank code/Transaction status not matched&quot;;
  		FailureMessage = sErrLog;
    	 	  
    	 	    
    	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Standard with payment staus" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Bank transfer Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Standard with payment staus" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="For company" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;

		 
		  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		    String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
		     String PaymentStatus=response.substring(response.indexOf(&quot;Payment Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;), 
		    		 response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment&quot;)).replace(&quot;Payment Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);

		 	    System.out.println(PaymentStatus);
		   if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode)&amp;&amp; PaymentStatus.contains(expPaymentStatus))  {
			 	 
			 	    	
			 	    
		 
			 	    }
			 	    else
			 	    {
			 	    transactionId=&quot;&quot;;
			 	    	Failure= true ;
				sErrLog=&quot;Expected Transfer type/Bank code/Transaction status not matched&quot;;
			FailureMessage = sErrLog;
			 	  
			 	    
			 	    }
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard - Checkbook" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">userLinkedId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts - checkbook" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Checkbook API Test&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[{&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;11&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Checkbook test&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;${userLinkedIdUSD}&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction - checkbook" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Checkbook API Test&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Direct to bank Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - checkbook" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;WIRE&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expstatus=&quot;IN_PROCESS&quot;;


        String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
        String transactionStatus=response.substring(response.indexOf(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;),
        		response.indexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
       if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode) &amp;&amp; transactionStatus.contains(expstatus))  {
    	 	 
    	 	    	
    	 	    
     
    	 	    }
    	 	    else
    	 	    {
    	 	transactionId=&quot;&quot;;
		Failure= true ;
    		sErrLog=&quot;Expected Transfertype/Bank code/Transaction status not matched&quot;;
  		FailureMessage = sErrLog;
    	 	  
    	 	    
    	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - checkbook" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Checkbook API Test&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - checkbook" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="For company" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
	     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}

	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard - Corpay" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">userLinkedId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Test Bank transfer Standard by corpay&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[{&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;7&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Checkbook test&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;4ee1c3ccb86041c9acd9994764d616e9&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction  - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Bank transfer Standard by corpay&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Direct to bank Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;WIRE&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;KKBK0003539&quot;;
String expstatus=&quot;Verified&quot;;


        String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
        String transactionStatus=response.substring(response.indexOf(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;),
        		response.indexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
       if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode) &amp;&amp; transactionStatus.contains(expstatus))  {
    	 	 
    	 	    	
    	 	    
     
    	 	    }
    	 	    else
    	 	    {
    	 	transactionId=&quot;&quot;;
		Failure= true ;
    		sErrLog=&quot;Expected Transfertype/Bank code/Transaction status not matched&quot;;
  		FailureMessage = sErrLog;
    	 	  
    	 	    
    	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Bank transfer Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="For company" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;KKBK0003539&quot;;
String expPaymentStatus=&quot;Verified&quot;;

		 
		  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		    String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
		     String PaymentStatus=response.substring(response.indexOf(&quot;Payment Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;), 
		    		 response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment&quot;)).replace(&quot;Payment Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);

		 	    System.out.println(PaymentStatus);
		   if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode)&amp;&amp; PaymentStatus.contains(expPaymentStatus))  {
			 	 
			 	    	
			 	    
		 
			 	    }
			 	    else
			 	    {
			 	    transactionId=&quot;&quot;;
			 	    	Failure= true ;
				sErrLog=&quot;Expected Transfer type/Bank code/Transaction status not matched&quot;;
			FailureMessage = sErrLog;
			 	  
			 	    
			 	    }
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer AnyPay Individual" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using AnyPay Individual-pay3" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94502&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;pay2&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;2&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;PAT2190558&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;PAT2190558&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Testcheck&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Checkref&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Florida&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Transfer AnyPay Individual pay3&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;US&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction AnyPay Individual" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Transfer AnyPay Individual&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Individual Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details AnyPay Individual" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Credit&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;Transaction Status&quot;)).replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should &quot;+exptext+&quot; But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer AnyPay Individual" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;userLinkedId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts using AnyPay Individual -pay2" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94502&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;PAY3&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;USD&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[ {&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;3&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;PAT2190529&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;PAT2190529&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Testcheck&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Checkref&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Florida&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Transfer AnyPay Individual pay2&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;US&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction AnyPay Individual" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Transfer AnyPay Individual&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Individual Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details AnyPay Individual" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Credit&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;Transaction Status&quot;)).replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should &quot;+exptext+&quot; But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Fund to Company" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Common end points" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Payment Methods" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Payment/GetPaymentMethods</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Beneficiary Wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;GetBeneficiaryWallets&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetBeneficiaryWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Rapidcardtoken</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer funds to company 1 input" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;0.21&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;982353390933219d9&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;corporatecompany2@mailinator.com&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${Rapidcardtoken}&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using RBT&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${Country}&quot;==&quot;US&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer RBT" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card for company account" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;transfer&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;TestCard1&quot;,&#xd;
                &quot;lastname&quot;: &quot;webapi&quot;,&#xd;
                &quot;addressline1&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;addressline2&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;city&quot;:&quot;Belmont&quot;,&#xd;
                &quot;state&quot;:&quot;California&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;US&quot;,&#xd;
                &quot;postalcode&quot;:&quot;99191&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;TestAddcard1&quot;,&#xd;
                &quot;cardtype&quot;:&quot;Visa Card&quot;,&#xd;
                &quot;cardno&quot;:&quot;9401221999999996&quot;,&#xd;
                &quot;expmonth&quot;:&quot;02&quot;,&#xd;
                &quot;expyear&quot;:&quot;2025&quot;,&#xd;
                &quot;cvv&quot;:&quot;123&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">Rapidcardtoken</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company using RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;0.11&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;:&quot;&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;1672D3144AAD4B9&quot;,&#xd;
            //${Rapidcardtoken}&#xd;
            &quot;description&quot;: &quot;test transfer to company using RBT&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;RBT&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using RBT&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Company Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Bank Transfer - Rapid&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1= &quot;&quot;;
String parameters = prev.getResponseDataAsString();
//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
			 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(!transfertype.contains(exptext) )
		{
			 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Bank Check" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company using Bank check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: true,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;22.33&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;TestCheck&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;Checkcase1_Company&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;On behalf of company&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;CA&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Check&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Bank Check&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 response=response.replace(&quot;\&quot;,\&quot;&quot;, &quot;%&quot;);
			String[] splitParameters = response.split(&quot;%&quot;);	
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Check&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for cheque Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Bank Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Check Direct&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1=&quot;&quot;;
String parameters = prev.getResponseDataAsString();
 	    

//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
			 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(!transfertype.contains(exptext) )
		{
			 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,            &#xd;
              &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Beneficiary Wallets" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;GetBeneficiaryWallets&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetBeneficiaryWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company using Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;2&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;test&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            //${BeneficiaryCompanyLinkedBankId}&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Standard&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
                <stringProp name="TestPlan.comments">${BeneficiaryCompanyLinkedBankId}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Standard&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String parameters = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;

//Checks for response should not contain null values		 	    
			 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.contains(&quot;Name\&quot;:\&quot;Comment&quot;))
					  {
					  sErrLog1+=sErrLog1;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
				  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
    	 if(!bankcode.equals(expcode))
       {
    
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
    }
	 }
      
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
    {
    	Failure= true ;
   	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
   	 FailureMessage = sErrLog1 ;
   	 System.out.println(FailureMessage);
    }
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer AnyPay Company" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to wallet using AnyPay Company" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94504&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;1.11&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;:&quot;&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${Rapidcardtoken}&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using wallet payment issue&quot; &#xd;
        }&#xd;
    }&#xd;
   &#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Wallet&quot;;
String sErrLog = &quot;&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - AnyPay Company" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using wallet&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Company Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - AnyPay Company" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Wallet&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String sErrLog1 = &quot;&quot;;
		String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ref test" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard - Corpay" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company  - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;2.23&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;test transfer to company using Standard corpay&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;7301bf6a4d2d4fde9916b98d46d14b36&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Standard corpay&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Standard&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard corpay&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - corpay" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;200450&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard - Checkbook" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company - Checkbook" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;15.23&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;test transfer to company using Standard&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;13921341a03f4ffaab009a37d63c8b37&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Standard&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Standard&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions- Checkbook" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Checkbook" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Standard - Payment Status check" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company using Standard with payment staus" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;20&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Standard&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Standard&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Standard with payment staus" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Standard with payment staus" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Fund Dynamic Account Create User" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund Dynamic Account Create User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToDynamicAccountUser&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;RecipientFirstName&quot;: &quot;${DynamicFirstName}&quot;,&#xd;
            &quot;RecipientLastName&quot;: &quot;${DynamicLastName}&quot;,&#xd;
            &quot;RecipientEmail&quot;: &quot;${RecipientEmail}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;3&quot;,&#xd;
            &quot;Description&quot;: &quot;account creation and transfer&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundDynamicAccountCreateUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions -  Dynamic Account Create User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;account creation and transfer&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details -  Dynamic Account Create User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Wallet&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
 	    

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should&quot;+exptext+&quot;But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Banks" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Link ACH/Wire" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ACH company" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit - US" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Contact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
           /* &quot;WithdrawType&quot;:&quot;&quot;,   */       &#xd;
              &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            //  &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777777&quot;,&#xd;
        &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit -Non US" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;CORPORATE COMPANY 2&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Hertfordshire&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BOF XTRM Client 1&quot;,&#xd;
            &quot;City&quot;:&quot;Toronto&quot;,&#xd;
            &quot;Region&quot;:&quot;Hertfordshire&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;UK-232112&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;GB&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;BARCLAYS BANK UK PLC&quot;,&#xd;
           /* &quot;WithdrawType&quot;:&quot;&quot;,  */        &#xd;
              &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;GBP&quot;,&#xd;
         //     &quot;SWIFTBIC&quot;:&quot;121000248&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;80977292&quot;,&#xd;
           // &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;GB&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete a beneficiary’s linked bank ACH" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;DeleteBankBeneficiary&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryIdACH}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/DeleteBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1122334455&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;UserID&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                  <stringProp name="TestPlan.comments">552caa39d0364d5e9f2672154a6159b8</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;UserID&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.07&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Wire" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary -RoutingNumber" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
          /*  &quot;WithdrawType&quot;:&quot;LV&quot;,    */      &#xd;
              &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
           // &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary-Non US - SWIFTBIC" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
	     &quot;ContactName&quot;:&quot;Bene contact&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;bene address&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;bene address&quot;,&#xd;
            &quot;City&quot;:&quot;Chennai&quot;,&#xd;
            &quot;Region&quot;:&quot;Tamil nadu&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;600089&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;IN&quot;&#xd;
					}&#xd;
				},&#xd;
				&quot;BankDetails&quot;: {&#xd;
					&quot;BeneficiaryBankInformation&quot;: {&#xd;
					&quot;InstitutionName&quot;: &quot;BARCLAYS BANK UK PLC&quot;,&#xd;
						&quot;SWIFTBIC&quot;: &quot;200450&quot;,&#xd;
						&quot;CountryISO2&quot;: &quot;GB&quot;,&#xd;
						 &quot;RoutingNumber&quot;:&quot;200450&quot;,&#xd;
						&quot;AccountNumber&quot;: &quot;80977292&quot;,&#xd;
						&quot;Currency&quot;: &quot;GBP&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary-Non US - SWIFTBIC" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
	&quot;PostalCode&quot;: &quot;48125&quot;,&#xd;
						&quot;AddressLine1&quot;: &quot;VIA CA&apos; BIANCA, 6&quot;,&#xd;
						&quot;AddressLine2&quot;: &quot;&quot;,&#xd;
						&quot;ContactName&quot;: &quot;BORREGGINE GIAMPAOLO&quot;,&#xd;
						&quot;City&quot;: &quot;RAVENNA&quot;,&#xd;
						&quot;CountryISO2&quot;: &quot;IT&quot;,&#xd;
						&quot;PhoneNumber&quot;: &quot;3406721847&quot;,&#xd;
						&quot;Region&quot;: &quot;ITALIA/RAVENNA/EMILIA ROMAGNA&quot;&#xd;
					}&#xd;
				},&#xd;
				&quot;BankDetails&quot;: {&#xd;
					&quot;BeneficiaryBankInformation&quot;: {&#xd;
					&quot;InstitutionName&quot;: &quot;BNL&quot;,&#xd;
						&quot;SWIFTBIC&quot;: &quot;BNLIITRR&quot;,&#xd;
						&quot;CountryISO2&quot;: &quot;IT&quot;,&#xd;
						 &quot;RoutingNumber&quot;:&quot;&quot;,&#xd;
						&quot;AccountNumber&quot;: &quot;IT53U0100513100000000003019&quot;,&#xd;
						&quot;Currency&quot;: &quot;EUR&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get a beneficiary’s linked bank accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete a beneficiary’s linked bank" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;DeleteBankBeneficiary&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;&#xd;
            &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/DeleteBankBeneficiary</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get bank withdraw types" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetBankWithdrawTypes&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CountryISO2&quot;: &quot;US&quot;,&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetBankWithdrawTypes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search banks within a country" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SearchBank&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankName&quot;: &quot;Veracode&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;US&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/SearchBank</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchBankByNationalID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SearchBankByNationalID&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankName&quot;: &quot;&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;US&quot;,&#xd;
            &quot;City&quot;: &quot;&quot;,&#xd;
            &quot;NationalID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol)</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/SearchBankByNationalID</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="251164327">&quot;Success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchBankbyBIC" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SearchBankByBIC&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankName&quot;: &quot;&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;IN&quot;,&#xd;
            &quot;City&quot;: &quot;&quot;,&#xd;
            &quot;SWIFTBIC&quot;: &quot;kota&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/SearchBankbyBIC</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2088191500">RecordsToTake&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ValidateIBAN" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ValidateIBAN&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;GB&quot;,&#xd;
            &quot;IBAN&quot;: &quot;GB82BUKB20045080977292&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ValidateIBAN</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="467453014">&quot;IsValid&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Programs" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Programs" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetPrograms&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: 1,&#xd;
                &quot;RecordsToTake&quot;: 10&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Programs/GetPrograms</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Category" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetProgramCategory&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: 1,&#xd;
                &quot;RecordsToTake&quot;: 10&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Programs/ProgramCategory</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetProgramType&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;CategoryID&quot;: &quot;7&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;:1 ,&#xd;
                &quot;RecordsToTake&quot;: 20&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Programs/ProgramType</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create program" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;CreateProgram&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Description&quot;:&quot;TestCreationProgram&quot;,&#xd;
            &quot;TransactionCategoryID&quot;:&quot;1&quot;,&#xd;
            &quot;TransactionSubCategoryID&quot;:&quot;16&quot;,&#xd;
            &quot;IsClaim&quot;:false,&#xd;
            &quot;ClaimAmount&quot;:&quot;&quot;,&#xd;
            &quot;CurrencyCode&quot;:&quot;${IssuerPaymentCurrency}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Programs/CreateProgram</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;UpdateProgram&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;ProgramID&quot;:&quot;5005&quot;,&#xd;
            &quot;Description&quot;:&quot;TestCreationProgram_Updated&quot;,&#xd;
            &quot;TransactionCategoryID&quot;:&quot;1&quot;,&#xd;
            &quot;TransactionSubCategoryID&quot;:&quot;16&quot;,&#xd;
            &quot;IsClaim&quot;:false,&#xd;
            &quot;ClaimAmount&quot;:&quot;&quot;,&#xd;
            &quot;CurrencyCode&quot;:&quot;${IssuerPaymentCurrency}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Programs/UpdateProgram</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tax Information" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Personal Beneficiaries Copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;getPersonalBeneficiaries&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;pagination&quot;: {&#xd;
        &quot;recordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;recordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Beneficiary/GetPersonalBeneficiaries</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send beneficiary tax information to registered email" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferTaxInformation&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;TaxYearStartMonth&quot;: &quot;12&quot;,&#xd;
            &quot;TaxYear&quot;: &quot;2021&quot;,&#xd;
            &quot;EmailBody&quot;: &quot;email check for dev test&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Report/TransferTaxInformation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Exchange Rate" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exchange Rate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetExchangeRate&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;ToCurrency&quot;: &quot;INR&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Payment/GetExchangeRate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="General" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Countries" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/General/GetCountry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String  actuvalmessage=&quot;&quot;;
	   actuvalmessage = response.substring(response.indexOf(&quot;\&quot;Country\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;\&quot;GetCountryResponse\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);

if(actuvalmessage.contains(&quot;null&quot;)){

  Failure= true ;
	
	sErrLog=&quot;Response contains null in its parameter values&quot;;
	FailureMessage = sErrLog;

}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="States" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot; : &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;CountryID&quot; : &quot;1&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/General/GetState</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String  actuvalmessage=&quot;&quot;;
	   actuvalmessage = response.substring(response.indexOf(&quot;\&quot;State\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;\&quot;State\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);

if(actuvalmessage.contains(&quot;null&quot;)){

  Failure= true ;
	
	sErrLog=&quot;Response contains null in its parameter values&quot;;
	FailureMessage = sErrLog;

}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Advanced Profile" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact State" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedContactState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CountryCode&quot;: &quot;US&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactState</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvContactStatePattern.txt,,${AssertionDir}\AdvContactStateExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Country" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactCountry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Job Titles" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactJobTitles</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvContactJobPattern.txt,,${AssertionDir}\AdvContactJobExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Advanced Profile_IsPublicallyTraded_Yes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office Edited&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm123.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan edit&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director edit&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe edit&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN16119710&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office edited&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;C Corporation&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;Yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;IN&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;IN&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreplytest@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan edit&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner edit&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough edit&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;99999&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;XYZ123456&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Advanced Profile_IsPublicallyTraded_No" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;US&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN16119710&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987957&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adv profile-sbox" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;US&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;sbitest@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN22140790&quot;,&#xd;
			//SPN22140795-usd/corpay&#xd;
			//SPN22140794&quot;,-Inter&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;US&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;COO&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;FL&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;US&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;COO&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;FL&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN22140794&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;international&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Profile Status" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileStatus&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;SPN22140790&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfileStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Profile Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileDetails&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;SPN22140790&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetCompanyAdvancedProfileDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Card" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;transfer&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;TestCard1&quot;,&#xd;
                &quot;lastname&quot;: &quot;webapi&quot;,&#xd;
                &quot;addressline1&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;addressline2&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;city&quot;:&quot;Belmont&quot;,&#xd;
                &quot;state&quot;:&quot;California&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;US&quot;,&#xd;
                &quot;postalcode&quot;:&quot;99191&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;TestAddcard1&quot;,&#xd;
                &quot;cardtype&quot;:&quot;Visa Card&quot;,&#xd;
                &quot;cardno&quot;:&quot;9401111999999999&quot;,&#xd;
                &quot;expmonth&quot;:&quot;02&quot;,&#xd;
                &quot;expyear&quot;:&quot;2030&quot;,&#xd;
                &quot;cvv&quot;:&quot;123&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CardToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for user account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;DeleteCard&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardToken}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/DeleteCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card for user account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;transfer&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;TestCard1&quot;,&#xd;
                &quot;lastname&quot;: &quot;webapi&quot;,&#xd;
                &quot;addressline1&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;addressline2&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;city&quot;:&quot;Belmont&quot;,&#xd;
                &quot;state&quot;:&quot;California&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;US&quot;,&#xd;
                &quot;postalcode&quot;:&quot;99191&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;TestAddcard1&quot;,&#xd;
                &quot;cardtype&quot;:&quot;Visa Card&quot;,&#xd;
                &quot;cardno&quot;:&quot;9401111999999999&quot;,&#xd;
                &quot;expmonth&quot;:&quot;02&quot;,&#xd;
                &quot;expyear&quot;:&quot;2022&quot;,&#xd;
                &quot;cvv&quot;:&quot;123&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CardTokenUser</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card for company" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;transfer&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;TestCard1&quot;,&#xd;
                &quot;lastname&quot;: &quot;webapi&quot;,&#xd;
                &quot;addressline1&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;addressline2&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;city&quot;:&quot;Belmont&quot;,&#xd;
                &quot;state&quot;:&quot;California&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;US&quot;,&#xd;
                &quot;postalcode&quot;:&quot;99191&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;TestAddcard1&quot;,&#xd;
                &quot;cardtype&quot;:&quot;Visa Card&quot;,&#xd;
                &quot;cardno&quot;:&quot;9401111999999999&quot;,&#xd;
                &quot;expmonth&quot;:&quot;02&quot;,&#xd;
                &quot;expyear&quot;:&quot;2022&quot;,&#xd;
                &quot;cvv&quot;:&quot;123&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Card for user account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;DeleteCard&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardTokenUser}&quot;		&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/DeleteCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Rapidcardtoken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund_with existing card_USD" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundCompanyWalletUsingCreditCardRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;PaymentDetails&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;Amount&quot;: &quot;7.55&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;&#xd;
      },&#xd;
      &quot;PayerInformation&quot;: {&#xd;
        &quot;FirstName&quot;: &quot;Testpay1&quot;,&#xd;
        &quot;LastName&quot;: &quot;check&quot;&#xd;
      },&#xd;
      &quot;PayerBillingAddress&quot;:{&#xd;
       &quot;AddressLine1&quot;:&quot;Address 1&quot;,&#xd;
       &quot;City&quot;:&quot;Kansas&quot;,&#xd;
       &quot;State&quot;:&quot;Kansas&quot;,&#xd;
       &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
       &quot;PostalCode&quot;:&quot;90001&quot;&#xd;
      },&#xd;
      &quot;CreditCardDetails&quot;:{&#xd;
       &quot;CardToken&quot;:&quot;${Rapidcardtoken}&quot;,&#xd;
       &quot;ExpireMonth&quot;:&quot;03&quot;,&#xd;
       &quot;ExpireYear&quot;:&quot;2023&quot;,&#xd;
       &quot;CreditCardNumber&quot;:&quot;1234567891213123&quot;,&#xd;
       &quot;CreditCardType&quot;:&quot;Visa Card&quot;,&#xd;
       &quot;CVV&quot;:&quot;7789&quot;&#xd;
      }&#xd;
       &#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundCompanyWalletUsingCreditCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Fund" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Credit&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Fund" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Credit or Debit Card&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
 	    

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should &quot;+exptext+&quot; But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mass Funding" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="User to Aggregate Company" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">7</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">${filterinput}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">case,input</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">;</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${case}_user filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
           &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;06-14-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;06-14-2022&quot;&#xd;
         &#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;${input}&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Credit TxnID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CTxnID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Credit Transaction Details" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${CTxnID}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
        String expMethod = &quot;XTRM Admin (XADM2190539)&quot;;
        String expType = &quot;Manual&quot;;
        String sErrLog = &quot;&quot;;


		String transferType = response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;))
				.replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		String transferMethod = response.substring(response.indexOf(&quot;From\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;To&quot;))
				.replace(&quot;From\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

		if ((transferMethod.contains(expMethod)) &amp;&amp; (transferType.contains(expType))) {
			response.contains(&quot;Credit or Debit Reference&quot;);
		} else {
			sErrLog = &quot;Expected response parameter missing&quot;;
		}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Company to Aggregate Company" enabled="false">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">7</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">${filterinput}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">case,input</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">;</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${case}_company filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;06-12-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;06-14-2022&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;${input}&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Credit TxnID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">TxnID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Mass funding" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TxnID}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="User to Aggregate Company" enabled="false">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
           &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;06-14-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;06-14-2022&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Sent&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TxnID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">TxnID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TxnID}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
        String expMethod = &quot;AnyPay&quot;;
        String expType = &quot;Credit&quot;;
        String sErrLog = &quot;&quot;;


        String transferMethod = response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;))
				.replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		String transferType = response.substring(response.indexOf(&quot;Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;Status&quot;))
				.replace(&quot;Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

		if ((transferMethod.contains(expMethod)) &amp;&amp; (transferType.contains(expType))) {
			response.contains(&quot;Credit or Debit Reference&quot;);
			response.contains(&quot;Description&quot;);
		} else {
			sErrLog = &quot;Expected response parameter missing&quot;;
		}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transactions(Credit)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
           &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;06-14-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;06-14-2022&quot;&#xd;
         &#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Received&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Credit TxnID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CTxnID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Credit Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${CTxnID}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
        String expMethod = &quot;XTRM Admin (XADM2190539)&quot;;
        String expType = &quot;Manual&quot;;
        String sErrLog = &quot;&quot;;


		String transferType = response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;))
				.replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		String transferMethod = response.substring(response.indexOf(&quot;From\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;To&quot;))
				.replace(&quot;From\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

		if ((transferMethod.contains(expMethod)) &amp;&amp; (transferType.contains(expType))) {
			response.contains(&quot;Credit or Debit Reference&quot;);
		} else {
			sErrLog = &quot;Expected response parameter missing&quot;;
		}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transactions(Debit)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;06-14-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;06-14-2022&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Sent&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Debit TxnID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DTxnID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Debit Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${DTxnID}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
        String expMethod = &quot;Wallet&quot;;
        String expType = &quot;Debit&quot;;
        String sErrLog = &quot;&quot;;


		String transferType = response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;))
				.replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String transferMethod = response.substring(response.indexOf(&quot;Description\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;Amount&quot;))
				.replace(&quot;Description\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

		if ((transferMethod.contains(expMethod)) &amp;&amp; (transferType.contains(expType))) {
			response.contains(&quot;Credit or Debit Reference&quot;);
		} else {
			sErrLog = &quot;Expected response parameter missing&quot;;
		}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Company to Aggregate Company" enabled="false">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Mass funding" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;01-25-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;04-01-2022&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Credits&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TxnID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">TxnID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Mass funding" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TxnID}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
        String expMethod = &quot;AnyPay&quot;;
        String expType = &quot;Credit&quot;;
        String sErrLog = &quot;&quot;;


        String transferMethod = response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;))
				.replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		String transferType = response.substring(response.indexOf(&quot;Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;},{\&quot;Name\&quot;:\&quot;Status&quot;))
				.replace(&quot;Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

		if ((transferMethod.contains(expMethod)) &amp;&amp; (transferType.contains(expType))) {
			response.contains(&quot;Credit or Debit Reference&quot;);
			response.contains(&quot;Description&quot;);
		} else {
			sErrLog = &quot;Expected response parameter missing&quot;;
		}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transactions(Credit)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
           &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;06-14-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;06-14-2022&quot;&#xd;
         &#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Received&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Credit TxnID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CTxnID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - Mass funding" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;01-25-2022&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;04-01-2022&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;Received&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;&quot;&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;1&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TxnID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">TxnID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;TransactionID&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Wallet transactions all positive case" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company wallet filter options" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="All records" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;TransactionType&quot;: &quot;Transfer&quot;,&#xd;
       &#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="All filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;All&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
    &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;Transfer&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2026542873">Credit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Received filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;Received&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="65905868">Debit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sent filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
   &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;Sent&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2026542873">Credit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Currency Exchange filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
   &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;Currency Exchange&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2026542873">Credit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pending filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
   &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;Pending&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="65905868">Debit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Funded filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;Filters&quot; :&#xd;
       { &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
        &quot;TransactionType&quot;: &quot;Funded&quot;,&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="65905868">Debit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User wallet filter options" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="All records" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;TransactionType&quot;: &quot;All&quot; ,&#xd;
    &#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="All filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;All&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;Transfer&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2026542873">Credit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Received filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;Received&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="65905868">Debit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sent filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;Sent&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2026542873">Credit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Currency Exchange filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;Currency Exchange&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2026542873">Credit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pending filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;Pending&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="65905868">Debit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Funded filter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
            &quot;TransactionType&quot;: &quot;Funded&quot; &#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="65905868">Debit</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Check" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">3</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Error cases" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beneficiary User" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create User" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${createusercount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${createuser}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,legalFirstName,legalLastName,emailAddress,emailNotification,mobilePhone,taxId,day,month,year,addressLine1,addressLine2,aptSuitNum,city,country,countryISO2,postalCode,region,experror</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_CreateUser" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createUser&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot; : &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;legalFirstName&quot;: &quot;${legalFirstName}&quot;,&#xd;
            &quot;legalLastName&quot;: &quot;${legalLastName}&quot;,&#xd;
            &quot;emailAddress&quot;: &quot;${emailAddress}&quot;,&#xd;
            &quot;emailNotification&quot; :&quot;${emailNotification}&quot;,&#xd;
            &quot;mobilePhone&quot;: &quot;${mobilePhone}&quot;,&#xd;
            &quot;taxId&quot;: &quot;${taxId}&quot;,&#xd;
            &quot;dateOfBirth&quot;: {&#xd;
                &quot;day&quot;: &quot;${day}&quot;,&#xd;
                &quot;month&quot;: &quot;${month}&quot;,&#xd;
                &quot;year&quot;: &quot;${year}&quot;&#xd;
            },&#xd;
            &quot;address&quot;: {&#xd;
                &quot;addressLine1&quot;: &quot;${addressLine1}&quot;,&#xd;
                &quot;addressLine2&quot;: &quot;${addressLine2}&quot;,&#xd;
                &quot;aptSuitNum&quot;: &quot;${aptSuitNum}&quot;,&#xd;
                &quot;city&quot;: &quot;${city}&quot;,&#xd;
                &quot;country&quot;: &quot;${country}&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;${countryISO2}&quot;,&#xd;
                &quot;postalCode&quot;: &quot;${postalCode}&quot;,&#xd;
                &quot;region&quot;: &quot;${region}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${xtrm_api_endpoint}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Register/CreateUser</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;).replace(&quot;.&quot;, &quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
 //   System.out.println(casename + &quot;$&quot; +actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Update User" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${UpdateUsercount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${UpdateUser}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,legalFirstName,legalLastName,emailAddress,emailNotification,mobilePhone,taxId,day,month,year,addressLine1,addressLine2,aptSuitNum,city,country,countryISO2,postalCode,region,experror</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_UpdateUser" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;updateUser&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot; : &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;userId&quot;:&quot;PAT1986818&quot;,&#xd;
            &quot;legalFirstName&quot;: &quot;${legalFirstName}&quot;,&#xd;
            &quot;legalLastName&quot;: &quot;${legalLastName}&quot;,&#xd;
            &quot;emailAddress&quot;: &quot;${emailAddress}&quot;,&#xd;
            &quot;emailNotification&quot; :&quot;${emailNotification}&quot;,&#xd;
            &quot;mobilePhone&quot;: &quot;${mobilePhone}&quot;,&#xd;
            &quot;taxId&quot;: &quot;${taxId}&quot;,&#xd;
            &quot;dateOfBirth&quot;: {&#xd;
                &quot;day&quot;: &quot;${day}&quot;,&#xd;
                &quot;month&quot;: &quot;${month}&quot;,&#xd;
                &quot;year&quot;: &quot;${year}&quot;&#xd;
            },&#xd;
            &quot;address&quot;: {&#xd;
                &quot;addressLine1&quot;: &quot;${addressLine1}&quot;,&#xd;
                &quot;addressLine2&quot;: &quot;${addressLine2}&quot;,&#xd;
                &quot;aptSuitNum&quot;: &quot;${aptSuitNum}&quot;,&#xd;
                &quot;city&quot;: &quot;${city}&quot;,&#xd;
                &quot;country&quot;: &quot;${country}&quot;,&#xd;
                &quot;countryISO2&quot;: &quot;${countryISO2}&quot;,&#xd;
                &quot;postalCode&quot;: &quot;${postalCode}&quot;,&#xd;
                &quot;region&quot;: &quot;${region}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${xtrm_api_endpoint}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Register/UpdateUser</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;.&quot;, &quot;&quot;);

  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Funds" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Transfer fund company to user" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${count_transferuser}</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer fund" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${transferfund}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,IssuerAccountNumber,PaymentType,PaymentMethodID,ProgramID,WalletID,PaymentDescription,PaymentCurrency,EmailNotification,IssuerTransactionId,PaymentAmount,PartnerAccountNumber,RecipientUserID,BeneficiaryCheckAddresss1,BeneficiaryCheckAddresss2,BeneficiaryCheckCity,BeneficiaryCheckCountryCodeISO2,BeneficiaryCheckMemo,BeneficiaryCheckName,BeneficiaryCheckPostalCode,BeneficiaryCheckReference,BeneficiaryCheckState,CardToken,Comment,DealRegId,SKU,UserGiftCardEmailID,UserLinkedBankID,UserPrepaidVisaEmailID,experror</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_ToUser" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${IssuerAccountNumber}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;${PaymentType}&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;${PaymentMethodID}&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${ProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${WalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;${PaymentDescription}&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${PaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;${EmailNotification}&quot;,&#xd;
                &quot;TransactionDetails&quot;: [&#xd;
                    {&#xd;
                        &quot;IssuerTransactionId&quot;: &quot;${IssuerTransactionId}&quot;,&#xd;
                        &quot;PaymentAmount&quot;: &quot;${PaymentAmount}&quot;,&#xd;
                        &quot;PartnerAccountNumber&quot;: &quot;${PartnerAccountNumber}&quot;,&#xd;
                        &quot;RecipientUserId&quot;: &quot;${RecipientUserID}&quot;,&#xd;
                        &quot;UserLinkedBankID&quot;: &quot;${UserLinkedBankID}&quot;,&#xd;
                       &quot;UserPrepaidVisaEmailID&quot;: &quot;${UserPrepaidVisaEmailID}&quot;,&#xd;
                        &quot;UserGiftCardEmailID&quot;: &quot;${UserGiftCardEmailID}&quot;,&#xd;
                        &quot;sku&quot;: &quot;${SKU}&quot;,&#xd;
                        &quot;DealRegId&quot;: &quot;${DealRegId}&quot;,&#xd;
                        &quot;Comment&quot;: &quot;${Comment}&quot;,&#xd;
                        &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;${BeneficiaryCheckCountryCodeISO2}&quot;,&#xd;
                        &quot;BeneficiaryCheckName&quot;: &quot;${BeneficiaryCheckName}&quot;,&#xd;
                        &quot;BeneficiaryCheckCity&quot;: &quot;${BeneficiaryCheckCity}&quot;,&#xd;
                        &quot;BeneficiaryCheckState&quot;: &quot;${BeneficiaryCheckState}&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss1&quot;: &quot;${BeneficiaryCheckAddresss1}&quot;,&#xd;
                        &quot;BeneficiaryCheckAddresss2&quot;: &quot;${BeneficiaryCheckAddresss2}&quot;,&#xd;
                        &quot;BeneficiaryCheckPostalCode&quot;: &quot;${BeneficiaryCheckPostalCode}&quot;,&#xd;
                        &quot;BeneficiaryCheckMemo&quot;: &quot;${BeneficiaryCheckMemo}&quot;,&#xd;
                        &quot;BeneficiaryCheckReference&quot;: &quot;${BeneficiaryCheckReference}&quot;,&#xd;
                        &quot;CardToken&quot;: &quot;${CardToken}&quot;&#xd;
                    }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
   // System.out.println(casename + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Transfer fund company to company" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${count_transfer company}</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer fund to company" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${TransferFundtoCompany}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,issuerAccountNumber,PaymentType,PaymentMethodId,ProgramId,WalletID,Description,Currency,Amount,EmailNotification,IssuerTransactionId,BeneficiaryAccountNumber,BeneficiaryWalletID,BeneficiaryLinkedBankID,BeneficiaryPayPalEmailID,BeneficiaryCheckCountryCodeISO2,BeneficiaryCheckName,BeneficiaryCheckCity,BeneficiaryCheckState,BeneficiaryCheckAddresss1,BeneficiaryCheckAddresss2,BeneficiaryCheckPostalCode,BeneficiaryCheckMemo,BeneficiaryCheckReference,CardToken,experror</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_ToCompany" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;TransferFundtoCompany&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
			&quot;PaymentType&quot;: &quot;${PaymentType}&quot;,&#xd;
			&quot;PaymentMethodId&quot;: &quot;${PaymentMethodId}&quot;,&#xd;
			&quot;ProgramId&quot;: &quot;${ProgramId}&quot;,&#xd;
			&quot;WalletID&quot;: &quot;${WalletID}&quot;,&#xd;
			&quot;Description&quot;: &quot;${Description}&quot;,&#xd;
			&quot;Currency&quot;: &quot;${Currency}&quot;,&#xd;
			&quot;Amount&quot;: &quot;${Amount}&quot;,&#xd;
			&quot;EmailNotification&quot;: &quot;${EmailNotification}&quot;,&#xd;
			&quot;IssuerTransactionId&quot;: &quot;${IssuerTransactionId}&quot;,&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;${BeneficiaryAccountNumber}&quot;,&#xd;
			&quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryWalletID}&quot;,&#xd;
			&quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryLinkedBankID}&quot;,&#xd;
			&quot;BeneficiaryPayPalEmailID&quot;: &quot;${BeneficiaryPayPalEmailID}&quot;,&#xd;
			&quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;${BeneficiaryCheckCountryCodeISO2}&quot;,&#xd;
			&quot;BeneficiaryCheckName&quot;: &quot;${BeneficiaryCheckName}&quot;,&#xd;
			&quot;BeneficiaryCheckCity&quot;: &quot;${BeneficiaryCheckCity}&quot;,&#xd;
			&quot;BeneficiaryCheckState&quot;: &quot;${BeneficiaryCheckState}&quot;,&#xd;
			&quot;BeneficiaryCheckAddresss1&quot;: &quot;${BeneficiaryCheckAddresss1}&quot;,&#xd;
			&quot;BeneficiaryCheckAddresss2&quot;: &quot;${BeneficiaryCheckAddresss2}&quot;,&#xd;
			&quot;BeneficiaryCheckPostalCode&quot;: &quot;${BeneficiaryCheckPostalCode}&quot;,&#xd;
			&quot;BeneficiaryCheckMemo&quot;: &quot;${BeneficiaryCheckMemo}&quot;,&#xd;
			&quot;BeneficiaryCheckReference&quot;: &quot;${BeneficiaryCheckReference}&quot;,&#xd;
			&quot;CardToken&quot;: &quot;${CardToken}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundtoCompany</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
   // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Userwithdraw" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${countuserwithdraw}</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User withdraw fund" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${userwithdraw}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,IssuerAccountNumber,UserID,Amount,Currency,PaymentMethodID,OTP,SKU,SendTransferCodetoEmail,SendTransferCodetoMobile,UserGiftCardEmailID,UserLinkedBankID,UserPayPalEmailID,UserPrepaidVisaEmailID,CardToken,experror</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_userwithdraw" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${IssuerAccountNumber}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${UserID} &quot;,&#xd;
            &quot;Amount&quot;: &quot;${Amount}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${Currency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;${PaymentMethodID}&quot;,&#xd;
            &quot;OTP&quot;: &quot;797385&quot;,&#xd;
            &quot;SKU&quot;: &quot;${SKU}&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;${SendTransferCodetoEmail}&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;${SendTransferCodetoMobile}&quot;,&#xd;
			&quot;UserGiftCardEmailID&quot;: &quot;${UserGiftCardEmailID}&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${UserLinkedBankID}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;${UserPayPalEmailID}&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;${UserPrepaidVisaEmailID}&quot;,&#xd;
             &quot;CardToken&quot;: &quot;${CardToken}&quot;,&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Beneficiary company withdraw funds" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${countbenwithdraw}</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company  withdraw fund" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${companywithdraw}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,IssuerAccountNumber,Currency,Amount,PaymentMethodID,BeneficiaryAccountNumber,BeneficiaryWalletID,BeneficiaryLinkedBankID,OTP,SendTransferCodetoEmail,SendTransferCodetoMobile,BeneficiaryCardToken,experror </stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_companywithdraw" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${IssuerAccountNumber}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${Currency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;${Amount}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;${PaymentMethodID}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${BeneficiaryAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryLinkedBankID}&quot;,&#xd;
            &quot;OTP&quot;: &quot;${OTP}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;: &quot;${BeneficiaryCardToken}&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;${SendTransferCodetoEmail}&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;${SendTransferCodetoMobile}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Bank" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LinkBank" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${Linkbankcount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${Linkbank}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,UserID,BeneficiaryName,PhoneNumber,BankAddress1,BankAddress2,BeneficiaryCity,BeneficiaryRegion,BeneficiaryPostalCode,CountryCode,BankName,Currency,BankSWIFTBIC,BankAccountNumber,BankRoutingCode,BankCountryCode,WithdrawType,Remittance Line3,Remittance Line4,experror </stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_Linkbank" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${issuerAccountNumber}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${UserID}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;${BeneficiaryName}&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;${PhoneNumber}&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;${BankAddress1}&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;${BankAddress2}&quot;,&#xd;
            &quot;City&quot;:&quot;${BeneficiaryCity}&quot;,&#xd;
            &quot;Region&quot;:&quot;${BeneficiaryRegion}&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;${BeneficiaryPostalCode}&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;${CountryCode}&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;${BankName}&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;${WithdrawType}&quot;,&#xd;
            &quot;Currency&quot;:&quot;${Currency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;${BankSWIFTBIC}&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;${BankAccountNumber}&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;${BankRoutingCode}&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;${BankCountryCode}&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;${Remittance Line3}&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;${Remittance Line4}&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LinkbankACH" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${LinkbankACHcount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${LinkbankACH}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,UserID,ContactName,PhoneNumber,AddressLine1,AddressLine2,City,Region,PostalCode,CountryISO2,InstitutionName,Currency,SWIFTBIC,AccountNumber,RoutingNumber,bankCountryISO2,RemittanceLine3,RemittanceLine4,experror </stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_LinkbankACH" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${issuerAccountNumber}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${UserID}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;${ContactName}&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;${PhoneNumber}&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;${AddressLine1}&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;${AddressLine2}&quot;,&#xd;
            &quot;City&quot;:&quot;${City}&quot;,&#xd;
            &quot;Region&quot;:&quot;${Region}&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;${PostalCode}&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;${CountryISO2}&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;${InstitutionName}&quot;,&#xd;
            &quot;Currency&quot;:&quot;${Currency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;${SWIFTBIC}&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;${AccountNumber}&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;${RoutingNumber}&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;${bankCountryISO2}&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;${RemittanceLine3}&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;${RemittanceLine4}&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="ValidateIBAN" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${ValidateIBANCount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">${ValidateIBAN}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">BankCountryISO2,IBAN,ExpError</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">;</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ValidateIBAN" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;ValidateIBAN&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;${BankCountryISO2}&quot;,&#xd;
            &quot;IBAN&quot;: &quot;${IBAN}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/ValidateIBAN</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;ExpError&quot;);
String sErrLog = &quot;&quot;;


String actualerror = response.substring(response.indexOf(&quot;Errors\&quot;:&quot;), response.lastIndexOf(&quot;,\&quot;Success\&quot;&quot;)).replace(&quot;Errors\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
String validStatus = response.substring(response.indexOf(&quot;IsValid\&quot;:&quot;), response.lastIndexOf(&quot;,\&quot;SWIFTBIC\&quot;&quot;)).replace(&quot;IsValid\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
if(actualerror.equals(expmessage)) {
	prev.setSuccessful(true);
	prev.setResponseCodeOK();
	prev.setResponseMessageOK();
} else {
	Failure= true;
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
} 
if(validStatus.equals(&quot;true&quot;)) {
	Failure= true;
	sErrLog=&quot;Expected Isvalid : False, but received Isvalid : &quot; +validStatus;
	FailureMessage = sErrLog;
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="SearchBankByNationalID" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${SearchBankByNationalIDCount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">${SearchBankByNationalID}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">case,BankName,BankCountryISO2,City,NationalID,ExpError </stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">;</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchBankByNationalID_${case}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;SearchBankByNationalID&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankName&quot;: &quot;${BankName}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;${BankCountryISO2}&quot;,&#xd;
            &quot;City&quot;: &quot;${City}&quot;,&#xd;
            &quot;NationalID&quot;: &quot;${NationalID}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol)</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/SearchBankByNationalID</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;ExpError&quot;);
String sErrLog = &quot;&quot;;


String actualerror = response.substring(response.indexOf(&quot;Errors\&quot;:&quot;), response.lastIndexOf(&quot;,\&quot;Success\&quot;&quot;)).replace(&quot;Errors\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
if(actualerror.equals(expmessage)) {
	prev.setSuccessful(true);
	prev.setResponseCodeOK();
	prev.setResponseMessageOK();
} else {
	Failure= true;
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="SearchBankbyBIC" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${SearchBankbyBICCount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">${SearchBankbyBIC}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">case,BankName,BankCountryISO2,City,SWIFTBIC,RecordsToSkip,RecordsToTake,ExpError </stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">;</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchBankbyBIC_${case}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;SearchBankByBIC&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;BankName&quot;: &quot;${BankName}&quot;,&#xd;
            &quot;BankCountryISO2&quot;: &quot;${BankCountryISO2}&quot;,&#xd;
            &quot;City&quot;: &quot;${City}&quot;,&#xd;
            &quot;SWIFTBIC&quot;: &quot;${SWIFTBIC}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;${RecordsToSkip}&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;${RecordsToTake}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/SearchBankbyBIC</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;ExpError&quot;);
String sErrLog = &quot;&quot;;


String actualerror = response.substring(response.indexOf(&quot;Errors\&quot;:&quot;), response.lastIndexOf(&quot;,\&quot;Success\&quot;&quot;)).replace(&quot;Errors\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
if(actualerror.equals(expmessage)) {
	prev.setSuccessful(true);
	prev.setResponseCodeOK();
	prev.setResponseMessageOK();
} else {
	Failure= true;
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cards" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Linkcard" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${countlinkcard}</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Linkcard" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${linkcard}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,issueraccountnumber,userid,linkcardtype,firstname,lastname,addressline1,addressline2,city,state,countrycode2,postalcode,nameoncard,cardtype,cardno,expmonth,expyear,cvv,experror </stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_card" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${issueraccountnumber}&quot;,&#xd;
        &quot;userid&quot;: &quot;${userid}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;${linkcardtype}&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;${firstname}&quot;,&#xd;
                &quot;lastname&quot;: &quot;${lastname}&quot;,&#xd;
                &quot;addressline1&quot;:&quot;${addressline1}&quot;,&#xd;
                &quot;addressline2&quot;:&quot;${addressline2}&quot;,&#xd;
                &quot;city&quot;:&quot;${city}&quot;,&#xd;
                &quot;state&quot;:&quot;${state}&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;${countrycode2}&quot;,&#xd;
                &quot;postalcode&quot;:&quot;${postalcode}&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;${nameoncard}&quot;,&#xd;
                &quot;cardtype&quot;:&quot;${cardtype}&quot;,&#xd;
                &quot;cardno&quot;:&quot;${cardno}&quot;,&#xd;
                &quot;expmonth&quot;:&quot;${expmonth}&quot;,&#xd;
                &quot;expyear&quot;:&quot;${expyear}&quot;,&#xd;
                &quot;cvv&quot;:&quot;${cvv}&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;],&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
 //  System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Programs" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Programs" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${Programscount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${program}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,Description,TransactionCategoryID,TransactionSubCategoryID,IsClaim,ClaimAmount,CurrencyCode,experror</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_Programs" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;CreateProgram&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;Description&quot;:&quot;${Description}&quot;,&#xd;
            &quot;TransactionCategoryID&quot;:&quot;${TransactionCategoryID}&quot;,&#xd;
            &quot;TransactionSubCategoryID&quot;:&quot;${TransactionSubCategoryID}&quot;,&#xd;
            &quot;IsClaim&quot;:&quot;${IsClaim}&quot;,&#xd;
            &quot;ClaimAmount&quot;:&quot;${ClaimAmount}&quot;,&#xd;
            &quot;CurrencyCode&quot;:&quot;${CurrencyCode}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Programs/CreateProgram</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

  //System.out.println(actualerror);
 // System.out.println(expmessage);
   //System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Wallets" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="UserWallets" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${Walletscount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${Wallets}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,UserID,WalletName,WalletCurrency,experror </stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_UserWallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateUserWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;:&quot;${issuerAccountNumber}&quot;,&#xd;
        &quot;UserID&quot;: &quot;${UserID}&quot;,&#xd;
        &quot;WalletName&quot;: &quot;${WalletName}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${WalletCurrency}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateUserWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CompanyWallets" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${CompanyWalletscount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${CompanyWallets}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,UserID,WalletName,WalletCurrency,experror,WalletType</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_CompanyWallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateCompanyWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
    	 &quot;issuerAccountNumber&quot;:&quot;${issuerAccountNumber}&quot;,&#xd;
    	 &quot;WalletName&quot;: &quot;${WalletName}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${WalletCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;${WalletType}&quot;,&#xd;
        &quot;AllowAccessAccountNumber&quot;:&quot;${UserID}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="BeneficiaryWallets" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${CompanyWalletscount}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${BeneficiaryWallets}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,issuerAccountNumber,UserID,WalletName,WalletCurrency,experror,WalletType</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_BeneficiaryWallet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;CreateBeneficiaryCompanyWallet&quot;: {&#xd;
    &quot;request&quot;: {&#xd;
    	&quot;issuerAccountNumber&quot;:&quot;${issuerAccountNumber}&quot;,&#xd;
        &#xd;
    	 &quot;WalletName&quot;: &quot;${WalletName}&quot;,&#xd;
        &quot;WalletCurrency&quot;: &quot;${WalletCurrency}&quot;,&#xd;
        &quot;WalletType&quot;:&quot;${WalletType}&quot;,&#xd;
        &quot;BeneficiaryAccountNumber&quot;:&quot;${UserID}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/CreateBeneficiaryCompanyWallet</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Tax information" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${counttax}</stringProp>
          </LoopController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${tax}</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">case,issuerAccountNumber,BeneficiaryAccountNumber,MonthStarts,TaxYear,EmailBody,experror</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_tax" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferTaxInformation&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${BeneficiaryAccountNumber}&quot;,&#xd;
            &quot;TaxYearStartMonth&quot;: &quot;${MonthStarts}&quot;,&#xd;
            &quot;TaxYear&quot;: &quot;${TaxYear}&quot;,&#xd;
            &quot;EmailBody&quot;: &quot;${EmailBody}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Report/TransferTaxInformation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
 //  System.out.println(casename + &quot;_&quot; + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="General" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="States" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${count_States}</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="States" enabled="true"/>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="delimiter">;</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="filename">${states}</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames">case,IssuerAccountNumber,CountryID,experror </stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_States" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot; : &quot;${IssuerAccountNumber}&quot;,&#xd;
            &quot;CountryID&quot; : &quot;${CountryID}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/General/GetState</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	   actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
 //System.out.println(casename + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="User wallet transactions" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${count_userwallet}</stringProp>
          </LoopController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="userwallet" enabled="true"/>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${erroruserwallet}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,StartUTC,EndUTC,TransactionType,SearchParam,experror</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserWallet transactions_${case}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetUserWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
      &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;${TransactionType}&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;${SearchParam}&quot;&#xd;
       },&#xd;
     &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	   actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
// System.out.println(casename + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Company wallet transactions" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${count_userwallet}</stringProp>
          </LoopController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company wallet" enabled="true"/>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${erroruserwallet}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,StartUTC,EndUTC,TransactionType,SearchParam,experror</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyWalletTransactions_${case}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;GetCompanyWalletTransactions&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
      &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
       &quot;Filters&quot; :&#xd;
       {&#xd;
          &quot;DateRange&quot; : {&#xd;
          &quot;StartUTC&quot;: &quot;${StartUTC}&quot;,&#xd;
          &quot;EndUTC&quot;: &quot;${EndUTC}&quot;&#xd;
        },&#xd;
           &quot;TransactionType&quot;: &quot;${TransactionType}&quot;,&#xd;
           &quot;SearchParam&quot;: &quot;${SearchParam}&quot;&#xd;
       },&#xd;
      &quot;Pagination&quot;: {&#xd;
        &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
        &quot;RecordsToTake&quot;: &quot;10&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	   actualerror = response.substring(response.indexOf(&quot;\&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;\&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
// System.out.println(casename + actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Exchange Rate" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Get Exchange Rate" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${countexchangerate}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">;</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${GetExchangeRate}</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">case,IssuerPaymentCurrency,ToCurrency</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exchange Rate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetExchangeRate&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;ToCurrency&quot;: &quot;${ToCurrency}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Payment/GetExchangeRate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Advanced profile" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${countAdvprofile}</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${Advprofile}</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">case,issuerAccountNumber,BeneficiaryAccountNumber,advCountry_Code2,Fictitious_Name,Website,Company_Type,Industry_Classification,Country_Of_Registration_Code2,Region_Of_Registration_Code2,Tax_Identification_Number,Identification_Type,Identification_Number,Address_Line_1,Address_Line_2,Address_Line_3,City,Country_Code2,Region_Code2,Postal_Code,Job_Title,First_Name,Last_Name,Email_Address,Date_Of_Birth,Citizenship,job_Address_Line_1,job_City,job_Region_Code2,job_Country_Code2,job_Postal_Code,Business_Phone,OwnerInformation__IsPublicallyTraded,OwnerInformation_jobtitle,Percentage_Owned,owner_First_Name,owner_Middle_Name,owner_Last_Name,owner_Email_Address,owner_Date_of_Birth,owner_Citizenship,owner_Address_Line_1,owner_City,owner_Country_Code2,owner_Region_Code2,owner_Postal_Code,experror</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error_${case}_Advanced profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfile&quot;:{&#xd;
        &quot;request&quot;:{&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;:&quot;${BeneficiaryAccountNumber}&quot;,&#xd;
            &quot;Country_Of_Registration_Code2&quot;:&quot;${advCountry_Code2}&quot;,&#xd;
            &quot;BusinessEntityInformation&quot;: {&#xd;
               &quot;Fictitious_Name&quot;:&quot;${Fictitious_Name}&quot;,&#xd;
               &quot;Website&quot;:&quot;${Website}&quot;,&#xd;
               &quot;Company_Type&quot;:&quot;${Company_Type}&quot;,&#xd;
               &quot;Industry_Classification&quot;:&quot;${Industry_Classification}&quot;,&#xd;
               &quot;Country_Of_Incorporation_Code2&quot;:&quot;${Country_Of_Registration_Code2}&quot;,&#xd;
               &quot;Region_Of_Incorporation_Code2&quot;:&quot;${Region_Of_Registration_Code2}&quot;,&#xd;
               &quot;Tax_Identification_Number&quot;:&quot;${Tax_Identification_Number}&quot;,&#xd;
               &quot;Identification_Type&quot;:&quot;${Identification_Type}&quot;,&#xd;
               &quot;Identification_Number&quot;:&quot;${Identification_Number}&quot;,&#xd;
               &quot;Address_Line_1&quot;:&quot;${Address_Line_1}&quot;,&#xd;
               &quot;Address_Line_2&quot;:&quot;${Address_Line_2}&quot;,&#xd;
               &quot;Address_Line_3&quot;:&quot;${Address_Line_3}&quot;,&#xd;
               &quot;City&quot;:&quot;${City}&quot;,&#xd;
               &quot;Country_Code2&quot;:&quot;${Country_Code2}&quot;,&#xd;
               &quot;Region_Code2&quot;:&quot;${Region_Code2}&quot;,&#xd;
               &quot;Postal_Code&quot;:&quot;${Postal_Code}&quot;&#xd;
            },&#xd;
            &quot;AuthorizedContactInformation&quot;: {&#xd;
                &quot;Job_Title&quot;:&quot;${Job_Title}&quot;,&#xd;
                &quot;First_Name&quot;:&quot;${First_Name}&quot;,&#xd;
                &quot;Last_Name&quot;:&quot;${Last_Name}&quot;,&#xd;
                &quot;Email_Address&quot;:&quot;${Email_Address}&quot;,&#xd;
                &quot;Date_Of_Birth&quot;:&quot;${Date_Of_Birth}&quot;,&#xd;
                &quot;Citizenship&quot;:&quot;${Citizenship}&quot;,&#xd;
                &quot;Address_Line_1&quot;:&quot;${job_Address_Line_1}&quot;,&#xd;
                &quot;City&quot;:&quot;${job_City}&quot;,&#xd;
                &quot;Region_Code2&quot;:&quot;${job_Region_Code2}&quot;,&#xd;
                &quot;Country_Code2&quot;:&quot;${job_Country_Code2}&quot;,&#xd;
                &quot;Postal_Code&quot;:&quot;${job_Postal_Code}&quot;,&#xd;
                &quot;Business_Phone&quot;:&quot;${Business_Phone}&quot;&#xd;
            },&#xd;
            &quot;OwnerInformation&quot;:{&#xd;
            &quot;IsPublicallyTraded&quot;:&quot;${OwnerInformation__IsPublicallyTraded}&quot;,&#xd;
            &quot;Owners&quot;: [&#xd;
            {&#xd;
                &quot;Job_Title&quot;:&quot;${OwnerInformation_jobtitle}&quot;,&#xd;
                &quot;Percentage_Owned&quot;:&quot;${Percentage_Owned}&quot;,&#xd;
                &quot;First_Name&quot;:&quot;${owner__First_Name}&quot;,&#xd;
                &quot;Middle_Name&quot;:&quot;${owner__Middle_Name}&quot;,&#xd;
                &quot;Last_Name&quot;:&quot;${owner__Last_Name}&quot;,&#xd;
                &quot;Email_Address&quot;:&quot;${owner_Email_Address}&quot;,&#xd;
                &quot;Date_of_Birth&quot;:&quot;${owner_Date_of_Birth}&quot;,&#xd;
                &quot;Citizenship&quot;:&quot;${owner_Citizenship}&quot;,&#xd;
                &quot;Address_Line_1&quot;:&quot;${owner_Address_Line_1}&quot;,&#xd;
                &quot;City&quot;:&quot;${owner_City}&quot;,&#xd;
                &quot;Country_Code2&quot;:&quot;${owner_Country_Code2}&quot;,&#xd;
                &quot;Region_Code2&quot;:&quot;${owner_Region_Code2}&quot;,&#xd;
                &quot;Postal_Code&quot;:&quot;${owner_Postal_Code}&quot;&#xd;
            }&#xd;
            ]&#xd;
          }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${xtrm_api_endpoint}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;experror&quot;);
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 
String  actualerror=&quot;&quot;;
	    actualerror = response.substring(response.indexOf(&quot;Errors\&quot;:[&quot;), response.lastIndexOf(&quot;]}}}}&quot;)).replace(&quot;Errors\&quot;:[&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);


  //System.out.println(actualerror);
 // System.out.println(expmessage);
  System.out.println(casename + &quot;$&quot; +actualerror);
  
if(actualerror.equals(expmessage)){

 prev.setSuccessful(true);
   prev.setResponseCodeOK();
   prev.setResponseMessageOK();

}
else
{
		 Failure= true ;
	
	sErrLog=&quot;Error message expected to have:&quot;+expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Fund" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${countfund}</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${fund}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">run,case,issuerAccountNumber,Amount,CurrencyCode,WalletID,FirstName,LastName,Address1,City,State,CountryISO2,PostalCode,CardToken,ExpireMonth,ExpireYear,CreditCardNumber,CreditCardType,CVV,ExpError</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">;</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String casename=vars.get(&quot;run&quot;);
System.out.println(&quot;value&quot; + casename);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(&quot;${run}&quot;.indexOf(&quot;enabled&quot;) &gt; -1)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="fund_${case}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;FundCompanyWalletUsingCreditCardRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;PaymentDetails&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${issuerAccountNumber}&quot;,&#xd;
        &quot;Amount&quot;: &quot;${Amount}&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;${CurrencyCode}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${WalletID}&quot;&#xd;
      },&#xd;
      &quot;PayerInformation&quot;: {&#xd;
        &quot;FirstName&quot;: &quot;${FirstName}&quot;,&#xd;
        &quot;LastName&quot;: &quot;${LastName}&quot;&#xd;
      },&#xd;
      &quot;PayerBillingAddress&quot;:{&#xd;
       &quot;AddressLine1&quot;:&quot;${Address1}&quot;,&#xd;
       &quot;City&quot;:&quot;${City}&quot;,&#xd;
       &quot;State&quot;:&quot;${State}&quot;,&#xd;
       &quot;CountryISO2&quot;:&quot;${CountryISO2}&quot;,&#xd;
       &quot;PostalCode&quot;:&quot;${PostalCode}&quot;&#xd;
      },&#xd;
      &quot;CreditCardDetails&quot;:{&#xd;
       &quot;CardToken&quot;:&quot;${CardToken}&quot;,&#xd;
       &quot;ExpireMonth&quot;:&quot;${ExpireMonth}&quot;,&#xd;
       &quot;ExpireYear&quot;:&quot;${ExpireYear}&quot;,&#xd;
       &quot;CreditCardNumber&quot;:&quot;${CreditCardNumber}&quot;,&#xd;
       &quot;CreditCardType&quot;:&quot;${CreditCardType}&quot;,&#xd;
       &quot;CVV&quot;:&quot;${CVV}&quot;&#xd;
      }&#xd;
       &#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/FundCompanyWalletUsingCreditCard</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String expmessage=vars.get(&quot;ExpError&quot;);
String casename=vars.get(&quot;case&quot;);
String sErrLog = &quot;&quot;;


String actualerror =response.substring(response.indexOf(&quot;Errors\&quot;:&quot;), response.lastIndexOf(&quot;]&quot;)).replace(&quot;Errors\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;[&quot;, &quot;&quot;);
if(actualerror.equals(expmessage)) {
	prev.setSuccessful(true);
	prev.setResponseCodeOK();
	prev.setResponseMessageOK();
} else {
	Failure= true;
	sErrLog=&quot;Error message expected to have:&quot;+ expmessage+ &quot; but received &quot; +actualerror;
	FailureMessage = sErrLog;
}

//System.out.println(casename + &quot;$&quot; +actualerror);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">3</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OTP Required tests" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Beneficiary company withdraw funds using RBT - Need OTP" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;1&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;113933&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;${CardToken}&quot;,&#xd;
            &quot;OTP&quot;: &quot;624842&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Fund Wallet to Wallet\simple send - Need OTP" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferFundWallettoWallet - user" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundWallettoWallet&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ToAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;ToWalletID&quot;: &quot;${UserWalletID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;20&quot;,&#xd;
            &quot;OTP&quot;: &quot;685425&quot;,&#xd;
            &quot;Description&quot;: &quot;Test Transfer wallet to wallet&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundWallettoWallet</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferFundWallettoWallet - company" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundWallettoWallet&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromWalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ToAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;ToWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;20&quot;,&#xd;
            &quot;OTP&quot;: &quot;364628&quot;,&#xd;
            &quot;Description&quot;: &quot;Test Transfer wallet to wallet&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundWallettoWallet</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user wallet transactions" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Test Transfer wallet to wallet&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get details on a specific user transaction" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Credit&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transaction Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should&quot;+exptext+&quot;But received &quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund- Need OTP" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Common end points" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get a beneficiary’s linked bank accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user payment methods" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Payment/GetPaymentMethods</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get digital gift cards (by currency)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetGiftCards&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/GiftCard/GetDigitalGiftCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user wallet transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;25&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get details on a specific user transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;127895&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${Country}&quot;==&quot;US&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund RBT" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;transfer&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	CardToken=response.substring(response.indexOf(&quot;CardToken\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;).replace(&quot;CardToken:&quot;,&quot;&quot;);
	 	    vars.put(&quot;CardTokenUser&quot;,CardToken);
 
	 	    }
	 	    else
	 	    {
	 	    	CardToken=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;No card found&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;CardTokenUser&quot;,CardToken);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;3.22&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;OTP&quot;: &quot;952837&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardTokenUser}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using RBT&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for RBT Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Check" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;transfer&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	CardToken=response.substring(response.indexOf(&quot;CardToken\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;CardTokenUser&quot;,CardToken);
 
	 	    }
	 	    else
	 	    {
	 	    	CardToken=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;No card found&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;CardTokenUser&quot;,CardToken);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;3.22&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
            &quot;OTP&quot;: &quot;533383&quot;,&#xd;
            &quot;CardToken&quot;: &quot;57B04B7490D64AB&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund wallet" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;3.22&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94502&quot;,&#xd;
            &quot;OTP&quot;: &quot;533383&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardTokenUser}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Rewardlink" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;3.22&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94506&quot;,&#xd;
            &quot;OTP&quot;: &quot;533383&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardTokenUser}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using RBT&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for RBT Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;452721&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Digital gift card" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Withdraw Fund using Digital gift card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94505&quot;,&#xd;
            &quot;OTP&quot;: &quot;939574&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;afexuser1@mailinator.com&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Transfer to 1-800-FLOWERS&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for digital gift card Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Prepaid Virtual Debit Card" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Withdraw Fund using Prepaid Virtual Debit Card" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94503&quot;,&#xd;
            &quot;OTP&quot;: &quot;641474&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;afexuser1@mailinator.com&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Transfer to  digital gift card&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for digital gift card Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard- Payment status check" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;256877&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;8c3c9de33f7345e384aeb8faa68f7498&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;WIRE&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expstatus=&quot;Verified&quot;;


        String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
        String transactionStatus=response.substring(response.indexOf(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;),
        		response.indexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
       if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode) &amp;&amp; transactionStatus.contains(expstatus))  {
    	 	 
    	 	    	
    	 	    
     
    	 	    }
    	 	    else
    	 	    {
    	 	transactionId=&quot;&quot;;
		Failure= true ;
    		sErrLog=&quot;Expected Transfertype/Bank code/Transaction status not matched&quot;;
  		FailureMessage = sErrLog;
    	 	  
    	 	    
    	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund- Need OTP" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Common endpoints" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user payment methods" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Payment/GetPaymentMethods</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get wallets for a particular beneficary" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetBeneficiaryWallets&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetBeneficiaryWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account Copy" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Beneficiary Wallets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;GetBeneficiaryWallets&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;BeneficiaryAccountNumber&quot;:&quot;${xtrm_ben_company}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetBeneficiaryWallets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get a beneficiary’s linked bank accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s bank for transfers" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestAddbank&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456789&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;3770 E Washington Blvd&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;3770 E Washington Blvd, Los Angeles&quot;,&#xd;
            &quot;City&quot;:&quot;California&quot;,&#xd;
            &quot;Region&quot;:&quot;CA&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;2R63+57&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get a beneficiary’s linked bank accounts Copy" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Cards" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Beneficiary company withdraw funds -1 input" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;1.25&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;83083&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;8DA1F205BA68485&quot;,&#xd;
            &quot;OTP&quot;: &quot;197276&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details Copy" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;150517&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund RBT" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using RBT" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;1.22&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;fb8bd35a6d4d46d18a5142ba9af43f73&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;1672D3144AAD4B9&quot;,&#xd;
            &quot;OTP&quot;: &quot;671362&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using RBT&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Company Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Bank Transfer - Rapid&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
 	    

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should&quot;+exptext+&quot;But received&quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;5.55&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
           &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;458CB7947A8944F&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;864778&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for AnyPay Company Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Bank Transfer - Rapid&quot;;
String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
 	    

 	    
   if(transfertype.contains(exptext))  {
	 	 
	 	    	
	 	    
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Expected Transfer type Should&quot;+exptext+&quot;But received&quot;+transfertype;
	FailureMessage = sErrLog;
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Not works" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Check" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Check" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;85645&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;626837&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund PVC" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using PVC" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94503&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;85645&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;626837&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Book Exchange- Need OTP" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetExchangeRate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;BookExchange&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;FromCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;ToCurrency&quot;: &quot;AED&quot;&#xd;
                    }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Payment/GetExchangeRate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Book Exchange" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;BookExchange&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;AccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
             &quot;FromWalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ToWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;FromCurrency&quot;: &quot;USD&quot;,&#xd;
            &quot;ToCurrency&quot;: &quot;AED&quot;,&#xd;
            &quot;Amount&quot;: &quot;100&quot;,&#xd;
      &quot;OTP&quot;:&quot;six digit integer&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Payment/BookExchange</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card for company account-transfer type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;userid&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;identity&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;TestCard1&quot;,&#xd;
                &quot;lastname&quot;: &quot;webapi&quot;,&#xd;
                &quot;addressline1&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;addressline2&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;city&quot;:&quot;Belmont&quot;,&#xd;
                &quot;state&quot;:&quot;California&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;US&quot;,&#xd;
                &quot;postalcode&quot;:&quot;99191&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;TestAddcard1&quot;,&#xd;
                &quot;cardtype&quot;:&quot;Visa Card&quot;,&#xd;
                &quot;cardno&quot;:&quot;9401111999999999&quot;,&#xd;
                &quot;expmonth&quot;:&quot;02&quot;,&#xd;
                &quot;expyear&quot;:&quot;2030&quot;,&#xd;
                &quot;cvv&quot;:&quot;123&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CardToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Card for company account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;LinkCard&quot;:{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;issueraccountnumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;userid&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;linkcardtype&quot;:&quot;identity&quot;,&#xd;
            &quot;card&quot;: {&#xd;
                &quot;firstname&quot;: &quot;TestCard1&quot;,&#xd;
                &quot;lastname&quot;: &quot;webapi&quot;,&#xd;
                &quot;addressline1&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;addressline2&quot;:&quot;4 Laurel Street&quot;,&#xd;
                &quot;city&quot;:&quot;Belmont&quot;,&#xd;
                &quot;state&quot;:&quot;California&quot;,&#xd;
                &quot;countrycode2&quot;:&quot;US&quot;,&#xd;
                &quot;postalcode&quot;:&quot;99191&quot;,&#xd;
                &quot;nameoncard&quot;:&quot;TestAddcard1&quot;,&#xd;
                &quot;cardtype&quot;:&quot;Visa Card&quot;,&#xd;
                &quot;cardno&quot;:&quot;9401111999999999&quot;,&#xd;
                &quot;expmonth&quot;:&quot;02&quot;,&#xd;
                &quot;expyear&quot;:&quot;2030&quot;,&#xd;
                &quot;cvv&quot;:&quot;123&quot;&#xd;
				}&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Card/LinkCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CardToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Rapidcardtoken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;CardToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for user account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_api_account}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund_with existing card_USD" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundCompanyWalletUsingCreditCardRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;PaymentDetails&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
        &quot;Amount&quot;: &quot;30&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;86288&quot;&#xd;
      },&#xd;
      &quot;PayerInformation&quot;: {&#xd;
        &quot;FirstName&quot;: &quot;Testpay1&quot;,&#xd;
        &quot;LastName&quot;: &quot;check&quot;&#xd;
      },&#xd;
      &quot;PayerBillingAddress&quot;:{&#xd;
       &quot;AddressLine1&quot;:&quot;Address 1&quot;,&#xd;
       &quot;City&quot;:&quot;Kansas&quot;,&#xd;
       &quot;State&quot;:&quot;Kansas&quot;,&#xd;
       &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
       &quot;PostalCode&quot;:&quot;90001&quot;&#xd;
      },&#xd;
      &quot;CreditCardDetails&quot;:{&#xd;
       &quot;CardToken&quot;:&quot;53A56D4239434F7&quot;,&#xd;
       //${Rapidcardtoken}&quot;,&#xd;
       &quot;ExpireMonth&quot;:&quot;03&quot;,&#xd;
       &quot;ExpireYear&quot;:&quot;2023&quot;,&#xd;
       &quot;CreditCardNumber&quot;:&quot;1234567891213123&quot;,&#xd;
       &quot;CreditCardType&quot;:&quot;Visa Card&quot;,&#xd;
       &quot;CVV&quot;:&quot;7789&quot;&#xd;
      }&#xd;
       &#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundCompanyWalletUsingCreditCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund_withNewcard" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundCompanyWalletUsingCreditCardRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
      &quot;PaymentDetails&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
        &quot;Amount&quot;: &quot;25.62&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;86288&quot;&#xd;
      },&#xd;
      &quot;PayerInformation&quot;: {&#xd;
        &quot;FirstName&quot;: &quot;Testpay1&quot;,&#xd;
        &quot;LastName&quot;: &quot;check&quot;&#xd;
      },&#xd;
      &quot;PayerBillingAddress&quot;:{&#xd;
       &quot;AddressLine1&quot;:&quot;Address 1&quot;,&#xd;
       &quot;City&quot;:&quot;Kansas&quot;,&#xd;
       &quot;State&quot;:&quot;Kansas&quot;,&#xd;
       &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
       &quot;PostalCode&quot;:&quot;90001&quot;&#xd;
      },&#xd;
      &quot;CreditCardDetails&quot;:{&#xd;
       &quot;CardToken&quot;:&quot;&quot;,&#xd;
       &quot;ExpireMonth&quot;:&quot;03&quot;,&#xd;
       &quot;ExpireYear&quot;:&quot;2023&quot;,&#xd;
       &quot;CreditCardNumber&quot;:&quot;12345678912132333&quot;,&#xd;
       &quot;CreditCardType&quot;:&quot;Visa Card&quot;,&#xd;
       &quot;CVV&quot;:&quot;7789&quot;&#xd;
      }&#xd;
       &#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundCompanyWalletUsingCreditCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund-  Checkbook" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;966829&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;4ee1c3ccb86041c9acd9994764d616e9&quot;,&#xd;
            //4ee1c3ccb86041c9acd9994764d616e9 - INR&#xd;
            //9043acf0cd154668a0fc96e91636d1e1 - USD&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund- Checkbook" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;9.92&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;65e61b80141b42c1892ed39be1f78096&quot;,&#xd;
            //65e61b80141b42c1892ed39be1f78096 -GBP&#xd;
            //13921341a03f4ffaab009a37d63c8b37 - USD&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;134719&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="For company" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;

		 
		  String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
		    String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
		     String PaymentStatus=response.substring(response.indexOf(&quot;Payment Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;), 
		    		 response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment&quot;)).replace(&quot;Payment Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);

		 	    System.out.println(PaymentStatus);
		   if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode)&amp;&amp; PaymentStatus.contains(expPaymentStatus))  {
			 	 
			 	    	
			 	    
		 
			 	    }
			 	    else
			 	    {
			 	    transactionId=&quot;&quot;;
			 	    	Failure= true ;
				sErrLog=&quot;Expected Transfer type/Bank code/Transaction status not matched&quot;;
			FailureMessage = sErrLog;
			 	  
			 	    
			 	    }
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="main Checkbook" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="main details Checkbook" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund-  Corpay" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;20&quot;,&#xd;
            &quot;Currency&quot;: &quot;USD&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;337255&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;4ee1c3ccb86041c9acd9994764d616e9&quot;,&#xd;
            //4ee1c3ccb86041c9acd9994764d616e9 - INR&#xd;
            //9043acf0cd154668a0fc96e91636d1e1 - USD&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund- Corpay" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund -Checkbook" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;12.3&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;13921341a03f4ffaab009a37d63c8b37&quot;,&#xd;
            //65e61b80141b42c1892ed39be1f78096 -GBP&#xd;
            //13921341a03f4ffaab009a37d63c8b37 - USD&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;677535&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund - Corpay" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;12.3&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;65e61b80141b42c1892ed39be1f78096&quot;,&#xd;
            //65e61b80141b42c1892ed39be1f78096 -GBP&#xd;
            //13921341a03f4ffaab009a37d63c8b37 - USD&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;677535&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Checkbook specific -Dev" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer to company" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-MR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2210227_API_User&amp;client_secret=P8Y6Ke8Mkj5rbKilAza0nhshDj6ldVzpuD7erSmiWE=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">cbcompany</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -CB" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN2292101</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN1779325</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">88440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">6103</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">1515</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company - Checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;15.23&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;test transfer to company using Standard&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Standard&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Standard&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions- Checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer to User" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User MR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -User CB" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN1987678</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_personal" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                  <stringProp name="Argument.value">PAT2290672</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">84011</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">3719</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">86570</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">86345</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userLinkedIdUSD</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Checkbook API Test&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[{&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;11&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Checkbook test&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;${userLinkedIdUSD}&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Checkbook API Test&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Direct to bank Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="false">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;ACH&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expstatus=&quot;Verified&quot;;


        String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
        String transactionStatus=response.substring(response.indexOf(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;),
        		response.indexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
       if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode) &amp;&amp; transactionStatus.contains(expstatus))  {
    	 	 
    	 	    	
    	 	    
     
    	 	    }
    	 	    else
    	 	    {
    	 	transactionId=&quot;&quot;;
		Failure= true ;
    		sErrLog=&quot;Expected Transfertype/Bank code/Transaction status not matched&quot;;
  		FailureMessage = sErrLog;
    	 	  
    	 	    
    	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Checkbook API Test&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="For company" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
	     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}

	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company withdraw" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund - No remitter gclife" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2210224_API_User&amp;client_secret=DPCnUleAES9fviu7jHjA/SZK9JQjKjQwhaNssuGvyc0=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="No remitter -CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN2292139</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">SPN2292139</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">88478</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">6101</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">88478</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;9.92&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;136694&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund - Multiple  remitter demo" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-MR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2210226_API_User&amp;client_secret=xYRThGV6sbNDFlfKL3q9c6HIdJ2ID70r//zxHzbxbI=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN1779325</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">SPN1779325</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">1515</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">6103</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">1515</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;1.92&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;514732&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund - Single remitter gclifecompany2 -pending" enabled="true"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Single remitter -CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN2292143</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">SPN2292143</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">88483</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">6102</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">88483</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-SR CB" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">grant_type=password&amp;client_id=2210225_API_User&amp;client_secret=GWsaLeBItSHOozTb3tkyRU9Ac0LOTwdKSWRqWY3hR8=</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;9.92&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;584715&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard - NR CB" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User NR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2210224_API_User&amp;client_secret=DPCnUleAES9fviu7jHjA/SZK9JQjKjQwhaNssuGvyc0=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="No remitter -User CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN2292139</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">PAT2188975</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">88478</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">6101</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">88497</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_personal" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                    <stringProp name="Argument.value">PAT2188975</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;458475&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard  - MR CB" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User MR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -User CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN1987678</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_personal" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                    <stringProp name="Argument.value">PAT2290672</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">84011</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">3719</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">86570</stringProp>
                    <stringProp name="Argument.desc">86345</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;486737&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard  - SR CB" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User SR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Single remitter -User CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_ben_personal" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                    <stringProp name="Argument.value">PAT2190529</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">afexuser123@mailinator.com</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN1987678</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">84011</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">86282</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String parameters = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String userLinkedId =&quot;&quot;;
	 
		 String response1 = parameters.substring(parameters.lastIndexOf(&quot;BeneficiaryDetails\&quot;:[&quot;),parameters.indexOf(&quot;]&quot;)).
			 replace(&quot;BeneficiaryDetails\&quot;:[&quot;, &quot;&quot;).replace(&quot;[{\&quot;, &quot;, &quot;&quot;);
		 String[] response=response1.split(&quot;BeneficiaryId\&quot;:\&quot;&quot;);
	 int count=response.length;
	 for(int j=1;j&lt;count;j++)
     { 
		 
	 	if(response[j].contains(&quot;Approved&quot;))
	 	{
	 		response[j]=&quot;result&quot;+response[j];
	 		 userLinkedId =response[j].substring(response[j].lastIndexOf(&quot;result&quot;),response[j].indexOf(&quot;\&quot;,\&quot;BeneficiaryName&quot;)).replace(&quot;&quot;,&quot;&quot;).replace(&quot;result&quot;, &quot;&quot;);
//		  System.out.println(Expvalue);
 vars.put(&quot;BeneficiaryCompanyLinkedBankId&quot;,userLinkedId);
		  break;
	 	}
	 
}

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;479753&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            //4ee1c3ccb86041c9acd9994764d616e9 - INR&#xd;
            //9043acf0cd154668a0fc96e91636d1e1 - USD&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund -gclife" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2210224_API_User&amp;client_secret=DPCnUleAES9fviu7jHjA/SZK9JQjKjQwhaNssuGvyc0=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;SPN2292139&quot;,&#xd;
      &quot;UserID&quot;:&quot;SPN2292139&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1234567890&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;494d9ff868ec481896847bf87cebbf61&quot;&#xd;
			//${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">552caa39d0364d5e9f2672154a6159b8</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;494d9ff868ec481896847bf87cebbf61&quot;,&#xd;
			//${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.07&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;SPN2292139&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
        &quot;Amount&quot;: &quot;7&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;88478&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;a745098eceef4f77af226912d25eb385&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
        &quot;Amount&quot;: &quot;11.55&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;INR&quot;,&#xd;
        &quot;WalletID&quot;: &quot;88478&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund -CB" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Fund account" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN1987678</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN1987678</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">84011</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">6101</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">84011</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1122334455&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;UserID&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">552caa39d0364d5e9f2672154a6159b8</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;UserID&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.07&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;Amount&quot;: &quot;11.55&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Advanced Profile" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact State" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedContactState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CountryCode&quot;: &quot;US&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactState</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvContactStatePattern.txt,,${AssertionDir}\AdvContactStateExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Country" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactCountry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Job Titles" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactJobTitles</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvContactJobPattern.txt,,${AssertionDir}\AdvContactJobExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_Yes_cb_SPN1987953" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office Edited&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm123.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan edit&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director edit&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe edit&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987953&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office edited&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;C Corporation&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;Yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;IN&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;IN&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreplytest@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan edit&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner edit&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough edit&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;99999&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;XYZ123456&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_No_cb_SPN1987957" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;US&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987957&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987957&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_Yes_corpay_SPN1987952" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987952&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Inc&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987952&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;Yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_No_corpay_SPN1987958" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987958&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Inc&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987958&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="International_IsPublicallyTraded_Yes_cb_SPN1987951" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987951&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Autre&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;PT&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;No&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987951&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;International&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="&quot;USA Only&quot;_IsPublicallyTraded_No_CB_SPN2290721" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN2290721&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Autre&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;PT&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;No&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987955&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="International_IsPublicallyTraded_No_Corpay_SPN1987954" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987954&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;PT&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan 2&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough 2&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;50&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;7777&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987955&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;International&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="International_IsPublicallyTraded_Yes_corpay_SPN1987962" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987962&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Inc&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987962&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;International&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Profile Status" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileStatus&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987954&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfileStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Profile Details" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileDetails&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;SPN2290721&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetCompanyAdvancedProfileDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="false">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvProfileDetailsPattern.txt,,${AssertionDir}\AdvProfileDetailsExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund -new" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2210224_API_User&amp;client_secret=DPCnUleAES9fviu7jHjA/SZK9JQjKjQwhaNssuGvyc0=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;SPN2292139&quot;,&#xd;
      &quot;UserID&quot;:&quot;SPN2292139&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1234567890&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;494d9ff868ec481896847bf87cebbf61&quot;&#xd;
			//${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">552caa39d0364d5e9f2672154a6159b8</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN2292139&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;494d9ff868ec481896847bf87cebbf61&quot;,&#xd;
			//${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.07&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;SPN2292139&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
        &quot;Amount&quot;: &quot;7&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;88478&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;a745098eceef4f77af226912d25eb385&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
        &quot;Amount&quot;: &quot;11.55&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;INR&quot;,&#xd;
        &quot;WalletID&quot;: &quot;88478&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Checkbook specific -sbox" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company withdraw" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund - No remitter cbcompanytest" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2231382_API_User&amp;client_secret=kyDvFi6W2bWHDAWt9MTQdokfT3LE81zWyHyrCbtxo8=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="No remitter -CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN22140785</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">SPN22140785</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">115832</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">5002</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">115832</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;5&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;982515&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using RBT" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;1.22&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;B120FEF884DC46D&quot;,&#xd;
            &quot;OTP&quot;: &quot;728179&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Check" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;626837&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using PVC" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94503&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;626837&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund - Multiple  remitter demo" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-MR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2210226_API_User&amp;client_secret=xYRThGV6sbNDFlfKL3q9c6HIdJ2ID70r//zxHzbxbI=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN1779325</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">SPN1779325</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">1515</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">6103</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">1515</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;1.92&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;514732&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Company Withdraw Fund - Single remitter gclifecompany2 -pending" enabled="false"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Single remitter -CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN2292143</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">SPN2292143</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">88483</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">6102</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">88483</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BeneficiaryCompanyWithdrawFund Standard" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-SR CB" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">grant_type=password&amp;client_id=2210225_API_User&amp;client_secret=GWsaLeBItSHOozTb3tkyRU9Ac0LOTwdKSWRqWY3hR8=</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeneficiaryCompanyWithdrawFund using Standard" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;BeneficiaryCompanyWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Amount&quot;: &quot;9.92&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryCardToken&quot;:&quot;&quot;,&#xd;
            &quot;OTP&quot;: &quot;584715&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;false&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Fund/BeneficiaryCompanyWithdrawFund</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard - NR CB" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User NR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2210048_API_User&amp;client_secret=dVbZghihZM7yyKAw41RIFvq92eFxJ2tQkgLBeDYN/g=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="No remitter -User CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">PAT22139298</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_company" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                    <stringProp name="Argument.value">PAT22139298</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">114119</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">114119</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_personal" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                    <stringProp name="Argument.value">PAT22139298</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">testremitter2@mailinator.com</stringProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;458475&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard  - MR CB" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User MR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -User CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN1987678</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_ben_personal" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                    <stringProp name="Argument.value">PAT2290672</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">84011</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value">3719</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">86570</stringProp>
                    <stringProp name="Argument.desc">86345</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;486737&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Withdraw Fund Standard  - SR CB -cbtestuser1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-sbox-User SR CB" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=password&amp;client_id=2231377_API_User&amp;client_secret=8aB/C2MFQxwQ2SR5sXkp98DDHgxsX7sdJjNN2ocQ0=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com//oAuth/token</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
                <stringProp name="TestPlan.comments">eddtest12@mailinator.com</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Single remitter -User CB" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="xtrm_ben_personal" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                    <stringProp name="Argument.value">PAT22140800</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">afexuser123@mailinator.com</stringProp>
                  </elementProp>
                  <elementProp name="xtrm_api_account" elementType="Argument">
                    <stringProp name="Argument.name">xtrm_api_account</stringProp>
                    <stringProp name="Argument.value">SPN22140788</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                    <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                    <stringProp name="Argument.value">USD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerWalletID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerWalletID</stringProp>
                    <stringProp name="Argument.value">115834</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="IssuerProgramID" elementType="Argument">
                    <stringProp name="Argument.name">IssuerProgramID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                    <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                    <stringProp name="Argument.value">115845</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">testremitter4@mailinator.com</stringProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Linked Card for company account" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetLinkedCardAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;userid&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Card/GetLinkedCards</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;transfer&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	CardToken=response.substring(response.indexOf(&quot;CardToken\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;).replace(&quot;CardToken:&quot;,&quot;&quot;);
	 	    vars.put(&quot;CardTokenUser&quot;,CardToken);
 
	 	    }
	 	    else
	 	    {
	 	    	CardToken=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;No card found&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;CardTokenUser&quot;,CardToken);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Standard USD" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;7.23&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;OTP&quot;: &quot;561241&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Withdraw Fund RBT" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;0.11&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94508&quot;,&#xd;
            &quot;OTP&quot;: &quot;391793&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardTokenUser}&quot;,&#xd;
            &quot;SKU&quot;: &quot;&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User withdraw fund Check" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;3.22&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94507&quot;,&#xd;
            &quot;OTP&quot;: &quot;533383&quot;,&#xd;
            &quot;CardToken&quot;: &quot;${CardTokenUser}&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Withdraw Fund using Digital gift card" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94505&quot;,&#xd;
            &quot;OTP&quot;: &quot;944252&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;cbtestuser1@mailinator.com&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Withdraw Fund using Prepaid Virtual Debit Card" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;UserWithdrawFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;Amount&quot;: &quot;10&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94503&quot;,&#xd;
            &quot;OTP&quot;: &quot;426977&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;SKU&quot;: &quot;U935268&quot;,&#xd;
            &quot;SendTransferCodetoEmail&quot;: &quot;true&quot;,&#xd;
            &quot;SendTransferCodetoMobile&quot;: &quot;true&quot;,&#xd;
            &quot;UserGiftCardEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserLinkedBankID&quot;: &quot;&quot;,&#xd;
            &quot;UserPayPalEmailID&quot;: &quot;&quot;,&#xd;
            &quot;UserPrepaidVisaEmailID&quot;: &quot;cbtestuser1@mailinator.com&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Fund/UserWithdrawFund</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;5&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer to company" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-MR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=1930872_API_User&amp;client_secret=8vSeWK1Ypz2H3NJBQM9lhDg5J2N7DkwOn3j0xhIpM3M=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">cbcompany</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -CB" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN19134662</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN22139153</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">107884</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">4969</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">113933</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="no remitter -CB" enabled="false">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN22140785</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN22140785</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">88440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">6103</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">1515</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
              &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Fund to company - Checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFundToCompany&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;PaymentType&quot;: &quot;Company&quot;,&#xd;
            &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
            &quot;WalletId&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;ProgramId&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
            &quot;Currency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
            &quot;IssuerTransactionId&quot;: &quot;123&quot;,&#xd;
            &quot;Amount&quot;: &quot;15.23&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
            &quot;BeneficiaryWalletID&quot;: &quot;${BeneficiaryCompanyWalletID}&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
            &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
            &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;US&quot;,&#xd;
            &quot;BeneficiaryCheckMemo&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckName&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryCheckPostalCode&quot;: &quot;90001&quot;,&#xd;
            &quot;BeneficiaryCheckReference&quot;: &quot;test transfer to company using Standard&quot;,&#xd;
            &quot;BeneficiaryCheckState&quot;: &quot;&quot;,&#xd;
            &quot;BeneficiaryLinkedBankId&quot;: &quot;e3794c93aaac446883d6895360701dbc&quot;,&#xd;
            //${BeneficiaryCompanyLinkedBankId}&quot;,&#xd;
            &quot;BeneficiaryPayPayEmailId&quot;: &quot;&quot;,&#xd;
            &quot;CardToken&quot;: &quot;&quot;,&#xd;
            &quot;description&quot;: &quot;test transfer to company using Standard&quot; &#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFundToCompany</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String sErrLog = &quot;&quot;;
String casename=&quot;Standard&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransferFundtoCompanyResult\&quot;:{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransferFundtoCompanyResult\&quot;:{\&quot;&quot;, &quot;&quot;).replace(&quot;TransferFundtoCompanyResult:{&quot;, &quot;&quot;);
 String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 	 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }

				
		  }
					
		   }

		   if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  

			</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions- Checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;test transfer to company using Standard&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - Checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
		 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
		     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}
	
	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer to User" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-User MR CB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=1910107_API_User&amp;client_secret=L4UTH3r4E2IQT0cd0NtdEYueF9iuXWS34RU5Z/278=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Multiple remitter -User CB" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN1987678</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_personal" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_personal</stringProp>
                  <stringProp name="Argument.value">PAT2290672</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">84011</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">3719</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">86570</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">86345</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Bank Beneficiary" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_personal}&quot;,&#xd;
    &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;Address1&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;Address2&quot;,&#xd;
            &quot;City&quot;:&quot;kansas&quot;,&#xd;
            &quot;Region&quot;:&quot;California&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;90001&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;Wells Fargo&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;LV&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;123&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;7777&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Linked Bank Accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;getLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;recipientUserId&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userLinkedIdUSD</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Other Accounts - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;TransferFund&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;Transaction&quot;: {&#xd;
                &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
                &quot;PaymentType&quot;: &quot;Personal&quot;,&#xd;
                &quot;PaymentMethodID&quot;: &quot;XTR94500&quot;,&#xd;
                &quot;ProgramID&quot;: &quot;${IssuerProgramID}&quot;,&#xd;
                &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
                &quot;PaymentDescription&quot;: &quot;Checkbook API Test&quot;,&#xd;
                &quot;PaymentCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
                &quot;EmailNotification&quot;: &quot;true&quot;,&#xd;
                &quot;TransactionDetails&quot;:[{&#xd;
                    &quot;IssuerTransactionId&quot;: &quot;12345&quot;,&#xd;
                    &quot;PaymentAmount&quot;: &quot;11&quot;,&#xd;
                    &quot;PartnerAccountNumber&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;RecipientUserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss1&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckAddresss2&quot;: &quot;1234 Alhambra Street Way&quot;,&#xd;
                    &quot;BeneficiaryCheckCity&quot;: &quot;Port Vila&quot;,&#xd;
                    &quot;BeneficiaryCheckCountryCodeISO2&quot;: &quot;VU&quot;,&#xd;
                    &quot;BeneficiaryCheckMemo&quot;: &quot;Sales incentive payment&quot;,&#xd;
                    &quot;BeneficiaryCheckName&quot;: &quot;Genevieve&quot;,&#xd;
                    &quot;BeneficiaryCheckPostalCode&quot;: &quot;94553-1258&quot;,&#xd;
                    &quot;BeneficiaryCheckReference&quot;: &quot;Long comment up to five hundred (500) characters&quot;,&#xd;
                    &quot;BeneficiaryCheckState&quot;: &quot;Shefa&quot;,&#xd;
                    &quot;CardToken&quot;: &quot;&quot;,&#xd;
                    &quot;Comment&quot;: &quot;Checkbook test&quot;,&#xd;
                    &quot;DealRegId&quot;: &quot;H. Smith - Canada&quot;,&#xd;
                    &quot;SKU&quot;: &quot;&quot;,&#xd;
                    &quot;UserGiftCardEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;,&#xd;
                    &quot;UserLinkedBankID&quot;: &quot;${userLinkedIdUSD}&quot;,&#xd;
                    &quot;UserPrepaidVisaEmailID&quot;: &quot;genevieveshefa@xtrm.com&quot;&#xd;
                }]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Fund/TransferFund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String sErrLog = &quot;&quot;;
String casename=&quot;wallet&quot;;
	 
	//Checks for response should not contain null values		 	    
	response = response.substring(response.lastIndexOf(&quot;TransactionDetail\&quot;:[{&quot;), response.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;TransactionDetail\&quot;:[{&quot;, &quot;&quot;);
 //System.out.println(response);
	String[] splitParameters = response.split(&quot;,&quot;);
   int count=splitParameters.length;
    for(int j=0;j&lt;count;j++)
   {
   	String expectedResultCell1 = splitParameters[j];
   
		 String  result=expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;\&quot;:&quot;)).replace(&quot;\&quot;:\&quot;&quot;,&quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
				// expectedResultCell1.substring(expectedResultCell1.indexOf(&quot;\&quot;:\&quot;&quot;),expectedResultCell1.indexOf(&quot;\&quot;&quot;)).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
		 
		  
		 if(result == null || result.isEmpty() ||result.contains(&quot;null&quot;))
		  { 
			 if(!expectedResultCell1.contains(&quot;PayDirectTransactionDetails&quot;)&amp;&amp; !expectedResultCell1.contains(&quot;RedemptionDetails&quot;)) {
				 sErrLog+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;
			 }
			 
			 
			 if(expectedResultCell1.equals(&quot;PayDirectTransactionDetails\&quot;: null&quot;) &amp;&amp; expectedResultCell1.equals(&quot;RedemptionDetails\&quot;: null&quot;))
					 {
					 				 sErrLog+=&quot;&quot;;
			 }
			 
					
		   }
   }  

    if(!sErrLog.isEmpty())
    {
		     Failure= true ;		
			 FailureMessage = sErrLog;
    }  </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;,&#xd;
            &quot;WalletCurrency&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Checkbook API Test&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Direct to bank Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Wallet Transaction Details - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetUserTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;UserID&quot;: &quot;${xtrm_ben_personal}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetUserWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Foruser" enabled="false">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;ACH&quot;;
String sErrLog = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expstatus=&quot;Verified&quot;;


        String transfertype=response.substring(response.indexOf(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Transfer Type\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
        String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;}]&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;,&quot;&quot;);
        String transactionStatus=response.substring(response.indexOf(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;),
        		response.indexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Transaction Status\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
       if(transfertype.contains(exptext) &amp;&amp; bankcode.contains(expcode) &amp;&amp; transactionStatus.contains(expstatus))  {
    	 	 
    	 	    	
    	 	    
     
    	 	    }
    	 	    else
    	 	    {
    	 	transactionId=&quot;&quot;;
		Failure= true ;
    		sErrLog=&quot;Expected Transfertype/Bank code/Transaction status not matched&quot;;
  		FailureMessage = sErrLog;
    	 	  
    	 	    
    	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Checkbook API Test&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details - checkbook" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="For company" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Direct to Bank&quot;;
String sErrLog = &quot;&quot;;
String sErrLog1 = &quot;&quot;;
String expcode=&quot;121000248&quot;;
String expPaymentStatus=&quot;Verified&quot;;
String parameters =prev.getResponseDataAsString();

		
 parameters = parameters.substring(parameters.lastIndexOf(&quot;Field\&quot;:[[{\&quot;&quot;), parameters.indexOf(&quot;,\&quot;OperationStatus&quot;)).replace(&quot;Field\&quot;:[[{\&quot;&quot;, &quot;&quot;);
		  String[] splitParameters = parameters.split(&quot;\&quot;},&quot;);
		    int count=splitParameters.length;
		   // System.out.println(&quot;count &quot;+count);
		     for(int j=0;j&lt;count;j++)
	        {
		    	String expectedResultCell1 = splitParameters[j];
		    	
				 String  result= expectedResultCell1.substring(expectedResultCell1.lastIndexOf(&quot;,\&quot;Value\&quot;:\&quot;&quot;)).replace(&quot;,\&quot;Value\&quot;:\&quot;&quot;,&quot;&quot;);
				  
				 if(result==null || result.isEmpty())
				  { 
					  if(expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Partner\&quot;,\&quot;Value\&quot;:\&quot;&quot;) || expectedResultCell1.equals(&quot;{\&quot;Name\&quot;:\&quot;Comment\&quot;,\&quot;Value\&quot;:\&quot;&quot;))  {
					  sErrLog1+=&quot;&quot;;  
					 
					  }
					  else
					  {
						  sErrLog1+=&quot;Parameter values is empty for &quot;+expectedResultCell1+&quot;\n&quot;;  
					  }
		    	 
	        }
		    
		    	
	     //checks based on transfer type
		     
	 String transfertype=response.substring(response.indexOf(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.indexOf(&quot;}&quot;)).replace(&quot;Method\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);

	if(transfertype.contains(exptext) )
		{
		if(transfertype.equals(&quot;Wallet&quot;) ||transfertype.equals(&quot;Bank Transfer - Rapid&quot;) ||transfertype.equals(&quot;Check Direct&quot;))
		
	 {
		 
	 }else if(transfertype.equals(&quot;Direct to Bank&quot;))
	 {
		 String bankcode=response.substring(response.indexOf(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;), response.lastIndexOf(&quot;\&quot;},{\&quot;Name\&quot;:\&quot;Payment Amount&quot;)).replace(&quot;Bank Code\&quot;,\&quot;Value\&quot;:\&quot;&quot;, &quot;&quot;);
   	 if(!bankcode.equals(expcode))
      {
   
	 	 sErrLog= &quot;Expected Bank code not matched, Expected &quot;+expcode+ &quot; but received &quot; + bankcode;
   }
	 }
     
	}
	else
	{
		 sErrLog=&quot;Transfertype is not as expected, Expected to have &quot;+exptext+ &quot; But received &quot;+transfertype;
	}

	
	if(!sErrLog1.isEmpty() || !sErrLog.isEmpty())
   {
   	Failure= true ;
  	 sErrLog1=sErrLog1+&quot;\n&quot;+sErrLog;
  	 FailureMessage = sErrLog1 ;
  	 System.out.println(FailureMessage);
   }
	        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund -cbcompanytest" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB SPN22140785" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2231382_API_User&amp;client_secret=kyDvFi6W2bWHDAWt9MTQdokfT3LE81zWyHyrCbtxo8=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">cbcompanytest@mailinator.com</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;SPN22140785&quot;,&#xd;
      &quot;UserID&quot;:&quot;SPN22140785&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1122334455&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN22140785&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">552caa39d0364d5e9f2672154a6159b8</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN22140785&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.07&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;SPN22140785&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
        &quot;Amount&quot;: &quot;30.50&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;115832&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN2292139&quot;,&#xd;
        &quot;Amount&quot;: &quot;11.55&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;88478&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;05554414b3724fb288927d23624233f7&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund -CB" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Fund account" enabled="false">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN1987678</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN1987678</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">84011</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">6101</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">84011</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-MR CB" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2210226_API_User&amp;client_secret=xYRThGV6sbNDFlfKL3q9c6HIdJ2ID70r//zxHzbxbI=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapidev.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2231382_API_User&amp;client_secret=kyDvFi6W2bWHDAWt9MTQdokfT3LE81zWyHyrCbtxo8=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="No remitter -CB" enabled="false">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN22140785</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN22140785</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">115832</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value">5002</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">115832</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-testdev" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2231545_API_User&amp;client_secret=alqf7NnbdmZMoLIzBXv/1MEksnIuyLCT/djVuwrM7zs=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${xtrm_authorization_endpoint}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="No remitter -CB" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xtrm_api_account" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_api_account</stringProp>
                  <stringProp name="Argument.value">SPN22139030</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xtrm_ben_company" elementType="Argument">
                  <stringProp name="Argument.name">xtrm_ben_company</stringProp>
                  <stringProp name="Argument.value">SPN22139030</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerPaymentCurrency" elementType="Argument">
                  <stringProp name="Argument.name">IssuerPaymentCurrency</stringProp>
                  <stringProp name="Argument.value">USD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerWalletID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerWalletID</stringProp>
                  <stringProp name="Argument.value">116289</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IssuerProgramID" elementType="Argument">
                  <stringProp name="Argument.name">IssuerProgramID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryCompanyWalletID" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryCompanyWalletID</stringProp>
                  <stringProp name="Argument.value">116289</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BeneficiaryLinkedBankId" elementType="Argument">
                  <stringProp name="Argument.name">BeneficiaryLinkedBankId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;${xtrm_api_account}&quot;,&#xd;
      &quot;UserID&quot;:&quot;${xtrm_ben_company}&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;TestContact1&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;UserID&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">{BeneficiaryId}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;UserID&quot;: &quot;${xtrm_ben_company}&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.15&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
			&quot;RecipientUserId&quot;: &quot;${xtrm_ben_company}&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
        &quot;Amount&quot;: &quot;3&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;${IssuerPaymentCurrency}&quot;,&#xd;
        &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;651dc5cea07a43e393b1dca28355ab87&quot;&#xd;
        //7fd25ad8f17c4452858ae185a68ddcbb&quot;&#xd;
        //${BeneficiaryCompanyLinkedBankId}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;WalletID&quot;: &quot;${IssuerWalletID}&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;null&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for  Fund Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;${xtrm_api_account}&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;104957&quot;&#xd;
            //${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Advanced Profile" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact State" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedContactState&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;CountryCode&quot;: &quot;US&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactState</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvContactStatePattern.txt,,${AssertionDir}\AdvContactStateExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Country" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactCountry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Contact Job Titles" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetAdvancedContactJobTitles</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvContactJobPattern.txt,,${AssertionDir}\AdvContactJobExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_Yes_cb_SPN1987953" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office Edited&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm123.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan edit&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director edit&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe edit&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987953&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office edited&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;C Corporation&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;Yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;IN&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;IN&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreplytest@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan edit&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner edit&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough edit&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;99999&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;XYZ123456&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_No_cb_SPN1987957" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;US&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987957&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987957&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_Yes_corpay_SPN1987952" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987952&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Inc&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987952&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;Yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="USA Only_IsPublicallyTraded_No_corpay_SPN1987958" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987958&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Inc&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987958&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="International_IsPublicallyTraded_Yes_cb_SPN1987951" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987951&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Autre&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;PT&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;No&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987951&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;International&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="&quot;USA Only&quot;_IsPublicallyTraded_No_CB_SPN2290721" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN2290721&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Autre&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;02&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;PT&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;No&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;02&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987955&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;USA Only&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="International_IsPublicallyTraded_No_Corpay_SPN1987954" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987954&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Other&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;PT&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;no&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan 2&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough 2&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;50&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;7777&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;SPN1987955&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;International&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="International_IsPublicallyTraded_Yes_corpay_SPN1987962" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;AdvancedProfile&quot;: {&#xd;
		&quot;request&quot;: {&#xd;
			&quot;AuthorizedContactInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Business_Phone&quot;: &quot;998877665544&quot;,&#xd;
				&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Date_Of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
				&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
				&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
				&quot;Job_Title&quot;: &quot;Director&quot;,&#xd;
				&quot;Last_Name&quot;: &quot;Joe&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
			},&#xd;
			&quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987962&quot;,&#xd;
			&quot;BusinessEntityInformation&quot;: {&#xd;
				&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
				&quot;Address_Line_2&quot;: &quot;1 Calle Xerimba&quot;,&#xd;
				&quot;Address_Line_3&quot;: &quot;Suite&quot;,&#xd;
				&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
				&quot;Company_Type&quot;: &quot;Inc&quot;,&#xd;
				&quot;Countries_Receiving_From&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Countries_Sending_To&quot;: &quot;US, GB&quot;,&#xd;
				&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
				&quot;Country_Of_Incorporation_Code2&quot;: &quot;US&quot;,&#xd;
				&quot;Expected_Annual_Volume&quot;: &quot;500000.00&quot;,&#xd;
				&quot;Expected_Currencies&quot;: &quot;USD,CAD,VUV&quot;,&#xd;
				&quot;Expected_Transaction_Amount&quot;: &quot;5000.00&quot;,&#xd;
				&quot;Fictitious_Name&quot;: &quot;Assumed&quot;,&#xd;
				&quot;Identification_Number&quot;: &quot;XX123456&quot;,&#xd;
				&quot;Identification_Type&quot;: &quot;Passport&quot;,&#xd;
				&quot;Industry_Classification&quot;: &quot;Information Technology&quot;,&#xd;
				&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
				&quot;Purpose_Of_Transactions&quot;: &quot;Explanation of purpose or intent&quot;,&#xd;
				&quot;Region_Code2&quot;: &quot;CT&quot;,&#xd;
				&quot;Region_Of_Incorporation_Code2&quot;: &quot;CA&quot;,&#xd;
				&quot;Tax_Identification_Number&quot;: &quot;555-66-7777&quot;,&#xd;
				&quot;Website&quot;: &quot;https://www.xyz.com&quot;&#xd;
			},&#xd;
			&quot;Country_Of_Registration_Code2&quot;: &quot;US&quot;,&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN1987962&quot;,&#xd;
			&quot;OwnerInformation&quot;: {&#xd;
				&quot;IsPublicallyTraded&quot;: &quot;yes&quot;,&#xd;
				&quot;Owners&quot;: [&#xd;
					{&#xd;
						&quot;Address_Line_1&quot;: &quot;The CommercialCo Home Office&quot;,&#xd;
						&quot;Citizenship&quot;: &quot;PT&quot;,&#xd;
						&quot;City&quot;: &quot;Coimbra&quot;,&#xd;
						&quot;Country_Code2&quot;: &quot;PT&quot;,&#xd;
						&quot;Date_of_Birth&quot;: &quot;10/10/1990&quot;,&#xd;
						&quot;Email_Address&quot;: &quot;noreply@xtrm.com&quot;,&#xd;
						&quot;First_Name&quot;: &quot;Jonathan&quot;,&#xd;
						&quot;Job_Title&quot;: &quot;Owner&quot;,&#xd;
						&quot;Last_Name&quot;: &quot;Dough&quot;,&#xd;
						&quot;Middle_Name&quot;: &quot;D&quot;,&#xd;
						&quot;Percentage_Owned&quot;: &quot;25&quot;,&#xd;
						&quot;Postal_Code&quot;: &quot;11223344&quot;,&#xd;
						&quot;Region_Code2&quot;: &quot;CT&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;Ticker_Symbol&quot;: &quot;&quot;&#xd;
			},&#xd;
			&quot;Payments_Type&quot;: &quot;International&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfile</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Profile Status" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileStatus&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;SPN1987954&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/CompanyAdvancedProfileStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Advanced Profile Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AdvancedProfileDetails&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;issuerAccountNumber&quot;: &quot;SPN1987678&quot;,&#xd;
            &quot;BeneficiaryAccountNumber&quot;: &quot;SPN2290721&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Register/GetCompanyAdvancedProfileDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Result comparison" enabled="false">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename">${scriptpath}</stringProp>
                <stringProp name="BeanShellAssertion.parameters">setAssertionForFailure:Checkassertions.PatternandexpectedCheck(${AssertionDir}\AdvProfileDetailsPattern.txt,,${AssertionDir}\AdvProfileDetailsExpected.txt))</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fund -gclife" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Key-dev-NR CB SPN22140785" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=password&amp;client_id=2231382_API_User&amp;client_secret=kyDvFi6W2bWHDAWt9MTQdokfT3LE81zWyHyrCbtxo8=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">https://xapisandbox.xtrm.com/oAuth/token</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">cbcompanytest@mailinator.com</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">
String response = prev.getResponseDataAsString();
String token=vars.get(&quot;token&quot;);
String token=&quot;&quot;;

String  actuvaltoken=&quot;&quot;;
	    actuvaltoken = response.substring(response.indexOf(&quot;access_token&quot;), response.lastIndexOf(&quot;\&quot;,\&quot;token_type&quot;)).replace(&quot;access_token&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;);
	    
   // System.out.println(actuvaltoken);
vars.put(&quot;token&quot;,actuvaltoken);</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link beneficiary’s Bank for ACH debit Company" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
  &quot;LinkACHDebitBankBeneficiary&quot;:{  &#xd;
    &quot;request&quot;:{  &#xd;
      &quot;issuerAccountNumber&quot;:&quot;SPN22140785&quot;,&#xd;
      &quot;UserID&quot;:&quot;SPN22140788&quot;,&#xd;
      &quot;Beneficiary&quot;:{  &#xd;
        &quot;BeneficiaryDetails&quot;:{  &#xd;
          &quot;BeneficiaryInformation&quot;:{  &#xd;
            &quot;ContactName&quot;:&quot;Fundbank trial&quot;,&#xd;
            &quot;PhoneNumber&quot;:&quot;123456&quot;,&#xd;
            &quot;AddressLine1&quot;:&quot;1300 SW 35th Ave, Boynton Beach&quot;,&#xd;
            &quot;AddressLine2&quot;:&quot;BankAddress2&quot;,&#xd;
            &quot;City&quot;:&quot;Florida&quot;,&#xd;
            &quot;Region&quot;:&quot;United States&quot;,&#xd;
            &quot;PostalCode&quot;:&quot;33426&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;BankDetails&quot;:{  &#xd;
          &quot;BeneficiaryBankInformation&quot;:{  &#xd;
            &quot;InstitutionName&quot;:&quot;WELLS FARGO&quot;,&#xd;
            &quot;WithdrawType&quot;:&quot;&quot;,&#xd;
             &quot;AccountType&quot;: &quot;BUSINESS&quot;,&#xd;
            &quot;Currency&quot;:&quot;${IssuerPaymentCurrency}&quot;,&#xd;
            &quot;SWIFTBIC&quot;:&quot;&quot;,&#xd;
            &quot;AccountNumber&quot;:&quot;1122334455&quot;,&#xd;
            &quot;RoutingNumber&quot;:&quot;121000248&quot;,&#xd;
            &quot;CountryISO2&quot;:&quot;US&quot;,&#xd;
            &quot;RemittanceLine3&quot;:&quot;Remittance Line3&quot;,&#xd;
            &quot;RemittanceLine4&quot;:&quot;Remittance Line4&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/LinkACHDebitBankBeneficiary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ReleaseACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ReleaseACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN22140788&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/ReleaseACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">552caa39d0364d5e9f2672154a6159b8</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyACHDebitMicrodeposit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;VerifyACHDebitMicrodeposit&quot;: {&#xd;
		&quot;Request&quot;: {&#xd;
			&quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
			&quot;UserID&quot;: &quot;SPN22140788&quot;,&#xd;
			&quot;BeneficiaryBankID&quot;: &quot;${BeneficiaryId}&quot;,&#xd;
			&quot;Amount_1&quot;: &quot;0.07&quot;,&#xd;
			&quot;Amount_2&quot;: &quot;0.07&quot;&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/VerifyACHDebitMicrodeposit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryIdACH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryIdACH&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACH debit linked bank accounts" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetACHDebitLinkedBankAccounts&quot;: {&#xd;
        &quot;request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
            &quot;RecipientUserId&quot;: &quot;SPN22140785&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Bank/GetACHDebitLinkedBankAccounts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extracteur Expression régulière" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BeneficiaryCompanyLinkedBankId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;BeneficiaryId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Wallet Using ACH Debit" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;FundWalletUsingACHDebitRequest&quot;: {&#xd;
    &quot;Request&quot;: {&#xd;
        &quot;issuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
        &quot;Amount&quot;: &quot;11.23&quot;,&#xd;
        &quot;CurrencyCode&quot;: &quot;USD&quot;,&#xd;
        &quot;WalletID&quot;: &quot;115832&quot;,&#xd;
        &quot;LinkedBankID&quot;: &quot;${BeneficiaryCompanyLinkedBankId}&quot;&#xd;
      }&#xd;
    }&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/FundWalletUsingACHDebit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transactions" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyWalletTransactions&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
            &quot;WalletID&quot;: &quot;115832&quot;,&#xd;
            &quot;Pagination&quot;: {&#xd;
                &quot;RecordsToSkip&quot;: &quot;1&quot;,&#xd;
                &quot;RecordsToTake&quot;: &quot;2&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String exptext=&quot;Fund transfer to acct&quot;;
String casename=vars.get(&quot;case&quot;);
 String sErrLog = &quot;&quot;;
 

  //System.out.println(actualerror);
 // System.out.println(expmessage);
  // System.out.println(casename + &quot;_&quot; + actualerror);
   if(response.contains(exptext))  {
	 	 
	 	    	
	 	    	transactionId=response.substring(response.indexOf(&quot;TransactionID\&quot;:&quot;), response.indexOf(&quot;,\&quot;&quot;)).replace(&quot;TransactionID\&quot;:&quot;, &quot;&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;);
	 	    vars.put(&quot;TransactionId&quot;,transactionId);
 
	 	    }
	 	    else
	 	    {
	 	    	transactionId=&quot;&quot;;
	 	    	 Failure= true ;
		sErrLog=&quot;Did not received TransactionID for Standard Transfer&quot;;
	FailureMessage = sErrLog;
	 vars.put(&quot;TransactionId&quot;,transactionId);
	 	  
	 	    
	 	    }
  

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get company wallet transaction details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;GetCompanyTransactionDetails&quot;: {&#xd;
        &quot;Request&quot;: {&#xd;
            &quot;IssuerAccountNumber&quot;: &quot;SPN22140785&quot;,&#xd;
            &quot;TransactionID&quot;: &quot;${TransactionId}&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${url}/Wallet/GetCompanyWalletTransactionDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// Get the name of the sampler into a variable so that it can be used to name the response files later

String sampleName = prev.getSampleLabel();
String responseFilesPath = vars.get(&quot;responseFilesPath&quot;);
System.out.println(&quot;test&quot;+responseFilesPath);
vars.put(&quot;responseFile&quot;,responseFilesPath+&quot;\\&quot;+sampleName);


</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <sentBytes>true</sentBytes>
          </value>
        </objProp>
        <stringProp name="filename">${baseDir}/consolidated.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
        <stringProp name="FileSaver.filename">${responseFile}</stringProp>
        <boolProp name="FileSaver.errorsonly">false</boolProp>
        <boolProp name="FileSaver.skipautonumber">true</boolProp>
        <boolProp name="FileSaver.skipsuffix">false</boolProp>
        <boolProp name="FileSaver.successonly">false</boolProp>
      </ResultSaver>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${baseDir}/Summaryreport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
